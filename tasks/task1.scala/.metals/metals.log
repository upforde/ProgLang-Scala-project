2020.11.11 17:41:10 INFO  Started: Metals version 0.9.5 in workspace 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala' for client vscode.
2020.11.11 17:41:11 INFO  time: initialize in 0.38s
2020.11.11 17:41:11 WARN  Build server is not auto-connectable.
2020.11.11 17:41:24 WARN  no build target for: C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\task1.scala
2020.11.11 17:41:24 WARN  no build target for: C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\task1.scala
2020.11.11 17:41:25 INFO  skipping build import with status 'Requested'
2020.11.11 17:41:27 INFO  no build target: using presentation compiler with only scala-library
2020.11.11 17:41:28 INFO  running 'C:\Program Files (x86)\Java\jre1.8.0_261\bin\java -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\aleks\AppData\Local\Temp\metals7247391092053746481\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2020.11.11 17:41:29 ERROR [info] [launcher] getting org.fusesource.jansi jansi 1.11  (this may take some time)...
2020.11.11 17:41:34 ERROR downloading https://repo1.maven.org/maven2/org/fusesource/jansi/jansi/1.11/jansi-1.11.jar ...
2020.11.11 17:41:34 ERROR :: loading settings :: url = jar:file:/C:/Users/aleks/AppData/Local/Temp/metals7247391092053746481/sbt-launch.jar!/org/apache/ivy/core/settings/ivysettings.xml
2020.11.11 17:41:34 ERROR 	[SUCCESSFUL ] org.fusesource.jansi#jansi;1.11!jansi.jar (184ms)
2020.11.11 17:41:34 ERROR :: retrieving :: org.scala-sbt#boot-jansi
2020.11.11 17:41:34 ERROR 	confs: [default]
2020.11.11 17:41:34 ERROR :: loading settings :: url = jar:file:/C:/Users/aleks/AppData/Local/Temp/metals7247391092053746481/sbt-launch.jar!/org/apache/ivy/core/settings/ivysettings.xml
2020.11.11 17:41:34 ERROR 	1 artifacts copied, 0 already retrieved
2020.11.11 17:41:34 ERROR [info] [launcher] getting org.scala-sbt sbt 1.4.2  (this may take some time)...
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/run_2.12/1.4.2/run_2.12-1.4.2.jar ...
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/collections_2.12/1.4.2/collections_2.12-1.4.2.jar ...
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/logic_2.12/1.4.2/logic_2.12-1.4.2.jar ...
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/scala-lang/scala-library/2.12.12/scala-library-2.12.12.jar ...
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/main-settings_2.12/1.4.2/main-settings_2.12-1.4.2.jar ...
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc-lm-integration_2.12/1.4.2/zinc-lm-integration_2.12-1.4.2.jar ...
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/scripted-plugin_2.12/1.4.2/scripted-plugin_2.12-1.4.2.jar ...
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/main_2.12/1.4.2/main_2.12-1.4.2.jar ...
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/actions_2.12/1.4.2/actions_2.12-1.4.2.jar ...
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/io_2.12/1.4.0/io_2.12-1.4.0.jar ...
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/sbt/1.4.2/sbt-1.4.2.jar ...
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/command_2.12/1.4.2/command_2.12-1.4.2.jar ...
2020.11.11 17:42:17 ERROR :: loading settings :: url = jar:file:/C:/Users/aleks/AppData/Local/Temp/metals7247391092053746481/sbt-launch.jar!/org/apache/ivy/core/settings/ivysettings.xml
2020.11.11 17:42:17 ERROR :: loading settings :: url = jar:file:/C:/Users/aleks/AppData/Local/Temp/metals7247391092053746481/sbt-launch.jar!/org/apache/ivy/core/settings/ivysettings.xml
2020.11.11 17:42:17 ERROR :: loading settings :: url = jar:file:/C:/Users/aleks/AppData/Local/Temp/metals7247391092053746481/sbt-launch.jar!/org/apache/ivy/core/settings/ivysettings.xml
2020.11.11 17:42:17 ERROR :: loading settings :: url = jar:file:/C:/Users/aleks/AppData/Local/Temp/metals7247391092053746481/sbt-launch.jar!/org/apache/ivy/core/settings/ivysettings.xml
2020.11.11 17:42:17 ERROR :: loading settings :: url = jar:file:/C:/Users/aleks/AppData/Local/Temp/metals7247391092053746481/sbt-launch.jar!/org/apache/ivy/core/settings/ivysettings.xml
2020.11.11 17:42:17 ERROR :: loading settings :: url = jar:file:/C:/Users/aleks/AppData/Local/Temp/metals7247391092053746481/sbt-launch.jar!/org/apache/ivy/core/settings/ivysettings.xml
2020.11.11 17:42:17 ERROR :: loading settings :: url = jar:file:/C:/Users/aleks/AppData/Local/Temp/metals7247391092053746481/sbt-launch.jar!/org/apache/ivy/core/settings/ivysettings.xml
2020.11.11 17:42:17 ERROR :: loading settings :: url = jar:file:/C:/Users/aleks/AppData/Local/Temp/metals7247391092053746481/sbt-launch.jar!/org/apache/ivy/core/settings/ivysettings.xml
2020.11.11 17:42:17 ERROR :: loading settings :: url = jar:file:/C:/Users/aleks/AppData/Local/Temp/metals7247391092053746481/sbt-launch.jar!/org/apache/ivy/core/settings/ivysettings.xml
2020.11.11 17:42:17 ERROR :: loading settings :: url = jar:file:/C:/Users/aleks/AppData/Local/Temp/metals7247391092053746481/sbt-launch.jar!/org/apache/ivy/core/settings/ivysettings.xml
2020.11.11 17:42:17 ERROR 	[SUCCESSFUL ] org.scala-sbt#scripted-plugin_2.12;1.4.2!scripted-plugin_2.12.jar (314ms)
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/util-logging_2.12/1.4.2/util-logging_2.12-1.4.2.jar ...
2020.11.11 17:42:17 ERROR 	[SUCCESSFUL ] org.scala-sbt#sbt;1.4.2!sbt.jar (390ms)
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/scala-lang/modules/scala-xml_2.12/1.3.0/scala-xml_2.12-1.3.0.jar ...
2020.11.11 17:42:17 ERROR 	[SUCCESSFUL ] org.scala-sbt#run_2.12;1.4.2!run_2.12.jar (421ms)
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/launcher-interface/1.1.5/launcher-interface-1.1.5.jar ...
2020.11.11 17:42:17 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc-lm-integration_2.12;1.4.2!zinc-lm-integration_2.12.jar (532ms)
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/com/github/ben-manes/caffeine/caffeine/2.8.5/caffeine-2.8.5.jar ...
2020.11.11 17:42:17 ERROR 	[SUCCESSFUL ] org.scala-sbt#actions_2.12;1.4.2!actions_2.12.jar (604ms)
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/io/get-coursier/lm-coursier-shaded_2.12/2.0.0/lm-coursier-shaded_2.12-2.0.0.jar ...
2020.11.11 17:42:17 ERROR 	[SUCCESSFUL ] org.scala-sbt#launcher-interface;1.1.5!launcher-interface.jar (221ms)
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-api/2.11.2/log4j-api-2.11.2.jar ...
2020.11.11 17:42:17 ERROR 	[SUCCESSFUL ] org.scala-sbt#logic_2.12;1.4.2!logic_2.12.jar (707ms)
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-core/2.11.2/log4j-core-2.11.2.jar ...
2020.11.11 17:42:17 ERROR 	[SUCCESSFUL ] org.scala-sbt#collections_2.12;1.4.2!collections_2.12.jar (829ms)
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-slf4j-impl/2.11.2/log4j-slf4j-impl-2.11.2.jar ...
2020.11.11 17:42:17 ERROR 	[SUCCESSFUL ] org.scala-sbt#command_2.12;1.4.2!command_2.12.jar (955ms)
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/librarymanagement-core_2.12/1.4.0/librarymanagement-core_2.12-1.4.0.jar ...
2020.11.11 17:42:17 ERROR 	[SUCCESSFUL ] org.apache.logging.log4j#log4j-slf4j-impl;2.11.2!log4j-slf4j-impl.jar (169ms)
2020.11.11 17:42:17 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/librarymanagement-ivy_2.12/1.4.0/librarymanagement-ivy_2.12-1.4.0.jar ...
2020.11.11 17:42:19 ERROR 	[SUCCESSFUL ] org.scala-sbt#util-logging_2.12;1.4.2!util-logging_2.12.jar (882ms)
2020.11.11 17:42:19 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/compiler-interface/1.4.2/compiler-interface-1.4.2.jar ...
2020.11.11 17:42:19 ERROR 	[SUCCESSFUL ] org.apache.logging.log4j#log4j-api;2.11.2!log4j-api.jar (585ms)
2020.11.11 17:42:19 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc-compile_2.12/1.4.2/zinc-compile_2.12-1.4.2.jar ...
2020.11.11 17:42:19 ERROR 	[SUCCESSFUL ] org.scala-sbt#main-settings_2.12;1.4.2!main-settings_2.12.jar (1261ms)
2020.11.11 17:42:19 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/util-relation_2.12/1.4.2/util-relation_2.12-1.4.2.jar ...
2020.11.11 17:42:19 ERROR 	[SUCCESSFUL ] org.scala-lang.modules#scala-xml_2.12;1.3.0!scala-xml_2.12.jar(bundle) (1053ms)
2020.11.11 17:42:19 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/util-position_2.12/1.4.2/util-position_2.12-1.4.2.jar ...
2020.11.11 17:42:19 ERROR 	[SUCCESSFUL ] org.scala-sbt#util-relation_2.12;1.4.2!util-relation_2.12.jar (222ms)
2020.11.11 17:42:19 ERROR downloading https://repo1.maven.org/maven2/com/eed3si9n/sjson-new-scalajson_2.12/0.9.1/sjson-new-scalajson_2.12-0.9.1.jar ...
2020.11.11 17:42:19 ERROR 	[SUCCESSFUL ] org.scala-sbt#compiler-interface;1.4.2!compiler-interface.jar (288ms)
2020.11.11 17:42:19 ERROR downloading https://repo1.maven.org/maven2/org/scala-lang/scala-reflect/2.12.12/scala-reflect-2.12.12.jar ...
2020.11.11 17:42:19 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc-compile_2.12;1.4.2!zinc-compile_2.12.jar (294ms)
2020.11.11 17:42:19 ERROR downloading https://repo1.maven.org/maven2/com/eed3si9n/sjson-new-core_2.12/0.9.1/sjson-new-core_2.12-0.9.1.jar ...
2020.11.11 17:42:19 ERROR 	[SUCCESSFUL ] org.scala-sbt#util-position_2.12;1.4.2!util-position_2.12.jar (167ms)
2020.11.11 17:42:19 ERROR downloading https://repo1.maven.org/maven2/com/eed3si9n/shaded-jawn-parser_2.12/0.9.1/shaded-jawn-parser_2.12-0.9.1.jar ...
2020.11.11 17:42:19 ERROR 	[SUCCESSFUL ] com.eed3si9n#sjson-new-scalajson_2.12;0.9.1!sjson-new-scalajson_2.12.jar (254ms)
2020.11.11 17:42:19 ERROR downloading https://repo1.maven.org/maven2/com/eed3si9n/shaded-scalajson_2.12/1.0.0-M4/shaded-scalajson_2.12-1.0.0-M4.jar ...
2020.11.11 17:42:19 ERROR 	[SUCCESSFUL ] com.github.ben-manes.caffeine#caffeine;2.8.5!caffeine.jar (1374ms)
2020.11.11 17:42:19 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/completion_2.12/1.4.2/completion_2.12-1.4.2.jar ...
2020.11.11 17:42:19 ERROR 	[SUCCESSFUL ] com.eed3si9n#shaded-jawn-parser_2.12;0.9.1!shaded-jawn-parser_2.12.jar (354ms)
2020.11.11 17:42:19 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/task-system_2.12/1.4.2/task-system_2.12-1.4.2.jar ...
2020.11.11 17:42:19 ERROR 	[SUCCESSFUL ] com.eed3si9n#shaded-scalajson_2.12;1.0.0-M4!shaded-scalajson_2.12.jar (226ms)
2020.11.11 17:42:19 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/tasks_2.12/1.4.2/tasks_2.12-1.4.2.jar ...
2020.11.11 17:42:19 ERROR 	[SUCCESSFUL ] org.scala-sbt#librarymanagement-ivy_2.12;1.4.0!librarymanagement-ivy_2.12.jar (965ms)
2020.11.11 17:42:19 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/testing_2.12/1.4.2/testing_2.12-1.4.2.jar ...
2020.11.11 17:42:19 ERROR 	[SUCCESSFUL ] org.scala-sbt#io_2.12;1.4.0!io_2.12.jar (1972ms)
2020.11.11 17:42:19 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/util-tracking_2.12/1.4.2/util-tracking_2.12-1.4.2.jar ...
2020.11.11 17:42:19 ERROR 	[SUCCESSFUL ] org.scala-sbt#librarymanagement-core_2.12;1.4.0!librarymanagement-core_2.12.jar (1170ms)
2020.11.11 17:42:19 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/jline3/jline-terminal/3.16.0-sbt-211a082ed6326908dc84ca017ce4430728f18a8a/jline-terminal-3.16.0-sbt-211a082ed6326908dc84ca017ce4430728f18a8a.jar ...
2020.11.11 17:42:19 ERROR 	[SUCCESSFUL ] org.scala-sbt#util-tracking_2.12;1.4.2!util-tracking_2.12.jar (220ms)
2020.11.11 17:42:19 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc-classpath_2.12/1.4.2/zinc-classpath_2.12-1.4.2.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] org.scala-sbt#task-system_2.12;1.4.2!task-system_2.12.jar (343ms)
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] org.scala-sbt#tasks_2.12;1.4.2!tasks_2.12.jar (340ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc-apiinfo_2.12/1.4.2/zinc-apiinfo_2.12-1.4.2.jar ...
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc_2.12/1.4.2/zinc_2.12-1.4.2.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] org.scala-sbt#testing_2.12;1.4.2!testing_2.12.jar (422ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/util-control_2.12/1.4.2/util-control_2.12-1.4.2.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] org.scala-sbt#completion_2.12;1.4.2!completion_2.12.jar (567ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/jline/jline/2.14.7-sbt-5e51b9d4f9631ebfa29753ce4accc57808e7fd6b/jline-2.14.7-sbt-5e51b9d4f9631ebfa29753ce4accc57808e7fd6b.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc-classpath_2.12;1.4.2!zinc-classpath_2.12.jar (301ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/org/jline/jline-reader/3.16.0/jline-reader-3.16.0.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc_2.12;1.4.2!zinc_2.12.jar (220ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/org/jline/jline-builtins/3.16.0/jline-builtins-3.16.0.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] org.scala-sbt#util-control_2.12;1.4.2!util-control_2.12.jar (149ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/util-interface/1.4.2/util-interface-1.4.2.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] org.scala-sbt.jline3#jline-terminal;3.16.0-sbt-211a082ed6326908dc84ca017ce4430728f18a8a!jline-terminal.jar (414ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/core-macros_2.12/1.4.2/core-macros_2.12-1.4.2.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc-apiinfo_2.12;1.4.2!zinc-apiinfo_2.12.jar (356ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/org/jline/jline-terminal-jna/3.16.0/jline-terminal-jna-3.16.0.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] com.eed3si9n#sjson-new-core_2.12;0.9.1!sjson-new-core_2.12.jar (1146ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/org/jline/jline-terminal-jansi/3.16.0/jline-terminal-jansi-3.16.0.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] org.scala-sbt#util-interface;1.4.2!util-interface.jar (161ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/com/lmax/disruptor/3.4.2/disruptor-3.4.2.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] org.scala-sbt.jline#jline;2.14.7-sbt-5e51b9d4f9631ebfa29753ce4accc57808e7fd6b!jline.jar (319ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/org/scala-lang/scala-compiler/2.12.12/scala-compiler-2.12.12.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] org.scala-sbt#core-macros_2.12;1.4.2!core-macros_2.12.jar (274ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/org/jline/jline-terminal/3.16.0/jline-terminal-3.16.0.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] org.jline#jline-terminal-jansi;3.16.0!jline-terminal-jansi.jar (225ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/org/fusesource/jansi/jansi/1.18/jansi-1.18.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] org.jline#jline-reader;3.16.0!jline-reader.jar (412ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/com/swoval/file-tree-views/2.1.4/file-tree-views-2.1.4.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] org.jline#jline-terminal-jna;3.16.0!jline-terminal-jna.jar (268ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/net/java/dev/jna/jna/5.5.0/jna-5.5.0.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] com.lmax#disruptor;3.4.2!disruptor.jar (296ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/net/java/dev/jna/jna-platform/5.5.0/jna-platform-5.5.0.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] org.jline#jline-builtins;3.16.0!jline-builtins.jar (469ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/org/jline/jline-style/3.16.0/jline-style-3.16.0.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] org.jline#jline-style;3.16.0!jline-style.jar (260ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/util-cache_2.12/1.4.2/util-cache_2.12-1.4.2.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] org.jline#jline-terminal;3.16.0!jline-terminal.jar (462ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/com/eed3si9n/sjson-new-murmurhash_2.12/0.9.1/sjson-new-murmurhash_2.12-0.9.1.jar ...
2020.11.11 17:42:20 ERROR 	[SUCCESSFUL ] com.swoval#file-tree-views;2.1.4!file-tree-views.jar (397ms)
2020.11.11 17:42:20 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/test-agent/1.4.2/test-agent-1.4.2.jar ...
2020.11.11 17:42:21 ERROR 	[SUCCESSFUL ] org.fusesource.jansi#jansi;1.18!jansi.jar (421ms)
2020.11.11 17:42:21 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/test-interface/1.0/test-interface-1.0.jar ...
2020.11.11 17:42:21 ERROR 	[SUCCESSFUL ] com.eed3si9n#sjson-new-murmurhash_2.12;0.9.1!sjson-new-murmurhash_2.12.jar (178ms)
2020.11.11 17:42:21 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/compiler-bridge_2.12/1.4.2/compiler-bridge_2.12-1.4.2.jar ...
2020.11.11 17:42:21 ERROR 	[SUCCESSFUL ] org.scala-sbt#test-interface;1.0!test-interface.jar (166ms)
2020.11.11 17:42:21 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc-classfile_2.12/1.4.2/zinc-classfile_2.12-1.4.2.jar ...
2020.11.11 17:42:21 ERROR 	[SUCCESSFUL ] org.scala-sbt#test-agent;1.4.2!test-agent.jar (176ms)
2020.11.11 17:42:21 ERROR downloading https://repo1.maven.org/maven2/com/jcraft/jsch/0.1.54/jsch-0.1.54.jar ...
2020.11.11 17:42:21 ERROR 	[SUCCESSFUL ] org.scala-sbt#util-cache_2.12;1.4.2!util-cache_2.12.jar (542ms)
2020.11.11 17:42:21 ERROR downloading https://repo1.maven.org/maven2/com/eed3si9n/gigahorse-okhttp_2.12/0.5.0/gigahorse-okhttp_2.12-0.5.0.jar ...
2020.11.11 17:42:21 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc-classfile_2.12;1.4.2!zinc-classfile_2.12.jar (368ms)
2020.11.11 17:42:21 ERROR downloading https://repo1.maven.org/maven2/com/squareup/okhttp3/okhttp-urlconnection/3.7.0/okhttp-urlconnection-3.7.0.jar ...
2020.11.11 17:42:21 ERROR 	[SUCCESSFUL ] com.eed3si9n#gigahorse-okhttp_2.12;0.5.0!gigahorse-okhttp_2.12.jar (218ms)
2020.11.11 17:42:21 ERROR downloading https://repo1.maven.org/maven2/com/eed3si9n/gigahorse-core_2.12/0.5.0/gigahorse-core_2.12-0.5.0.jar ...
2020.11.11 17:42:21 ERROR 	[SUCCESSFUL ] org.scala-sbt#compiler-bridge_2.12;1.4.2!compiler-bridge_2.12.jar (598ms)
2020.11.11 17:42:21 ERROR downloading https://repo1.maven.org/maven2/com/squareup/okhttp3/okhttp/3.14.2/okhttp-3.14.2.jar ...
2020.11.11 17:42:21 ERROR 	[SUCCESSFUL ] com.squareup.okhttp3#okhttp-urlconnection;3.7.0!okhttp-urlconnection.jar (220ms)
2020.11.11 17:42:21 ERROR downloading https://repo1.maven.org/maven2/com/typesafe/ssl-config-core_2.12/0.4.0/ssl-config-core_2.12-0.4.0.jar ...
2020.11.11 17:42:21 ERROR 	[SUCCESSFUL ] org.apache.logging.log4j#log4j-core;2.11.2!log4j-core.jar (3383ms)
2020.11.11 17:42:21 ERROR downloading https://repo1.maven.org/maven2/org/reactivestreams/reactive-streams/1.0.2/reactive-streams-1.0.2.jar ...
2020.11.11 17:42:21 ERROR 	[SUCCESSFUL ] com.jcraft#jsch;0.1.54!jsch.jar (638ms)
2020.11.11 17:42:21 ERROR downloading https://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.26/slf4j-api-1.7.26.jar ...
2020.11.11 17:42:21 ERROR 	[SUCCESSFUL ] org.reactivestreams#reactive-streams;1.0.2!reactive-streams.jar (120ms)
2020.11.11 17:42:21 ERROR downloading https://repo1.maven.org/maven2/org/scala-lang/modules/scala-parser-combinators_2.12/1.1.2/scala-parser-combinators_2.12-1.1.2.jar ...
2020.11.11 17:42:22 ERROR 	[SUCCESSFUL ] org.slf4j#slf4j-api;1.7.26!slf4j-api.jar (204ms)
2020.11.11 17:42:22 ERROR downloading https://repo1.maven.org/maven2/com/typesafe/config/1.3.3/config-1.3.3.jar ...
2020.11.11 17:42:22 ERROR 	[SUCCESSFUL ] com.eed3si9n#gigahorse-core_2.12;0.5.0!gigahorse-core_2.12.jar (366ms)
2020.11.11 17:42:22 ERROR downloading https://repo1.maven.org/maven2/com/squareup/okio/okio/1.17.2/okio-1.17.2.jar ...
2020.11.11 17:42:22 ERROR 	[SUCCESSFUL ] com.squareup.okio#okio;1.17.2!okio.jar (335ms)
2020.11.11 17:42:22 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc-core_2.12/1.4.2/zinc-core_2.12-1.4.2.jar ...
2020.11.11 17:42:22 ERROR 	[SUCCESSFUL ] org.scala-lang.modules#scala-parser-combinators_2.12;1.1.2!scala-parser-combinators_2.12.jar(bundle) (568ms)
2020.11.11 17:42:22 ERROR 	[SUCCESSFUL ] com.typesafe#ssl-config-core_2.12;0.4.0!ssl-config-core_2.12.jar(bundle) (713ms)
2020.11.11 17:42:22 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc-persist_2.12/1.4.2/zinc-persist_2.12-1.4.2.jar ...
2020.11.11 17:42:22 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc-compile-core_2.12/1.4.2/zinc-compile-core_2.12-1.4.2.jar ...
2020.11.11 17:42:22 ERROR 	[SUCCESSFUL ] com.squareup.okhttp3#okhttp;3.14.2!okhttp.jar (934ms)
2020.11.11 17:42:22 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc-persist-core-assembly/1.4.2/zinc-persist-core-assembly-1.4.2.jar ...
2020.11.11 17:42:22 ERROR 	[SUCCESSFUL ] com.typesafe#config;1.3.3!config.jar(bundle) (715ms)
2020.11.11 17:42:22 ERROR downloading https://repo1.maven.org/maven2/net/openhft/zero-allocation-hashing/0.10.1/zero-allocation-hashing-0.10.1.jar ...
2020.11.11 17:42:23 ERROR 	[SUCCESSFUL ] net.openhft#zero-allocation-hashing;0.10.1!zero-allocation-hashing.jar(bundle) (319ms)
2020.11.11 17:42:23 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/sbinary_2.12/0.5.1/sbinary_2.12-0.5.1.jar ...
2020.11.11 17:42:23 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc-persist_2.12;1.4.2!zinc-persist_2.12.jar (613ms)
2020.11.11 17:42:23 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/protocol_2.12/1.4.2/protocol_2.12-1.4.2.jar ...
2020.11.11 17:42:23 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc-compile-core_2.12;1.4.2!zinc-compile-core_2.12.jar (644ms)
2020.11.11 17:42:23 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/template-resolver/0.1/template-resolver-0.1.jar ...
2020.11.11 17:42:23 ERROR 	[SUCCESSFUL ] net.java.dev.jna#jna;5.5.0!jna.jar (2569ms)
2020.11.11 17:42:23 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/ipcsocket/ipcsocket/1.1.0/ipcsocket-1.1.0.jar ...
2020.11.11 17:42:23 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc-core_2.12;1.4.2!zinc-core_2.12.jar (832ms)
2020.11.11 17:42:23 ERROR downloading https://repo1.maven.org/maven2/org/checkerframework/checker-qual/3.4.1/checker-qual-3.4.1.jar ...
2020.11.11 17:42:23 ERROR 	[SUCCESSFUL ] org.scala-sbt#template-resolver;0.1!template-resolver.jar (148ms)
2020.11.11 17:42:23 ERROR downloading https://repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.4.0/error_prone_annotations-2.4.0.jar ...
2020.11.11 17:42:23 ERROR 	[SUCCESSFUL ] com.google.errorprone#error_prone_annotations;2.4.0!error_prone_annotations.jar (191ms)
2020.11.11 17:42:23 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/ivy/ivy/2.3.0-sbt-839fad1cdc07cf6fc81364d74c323867230432ad/ivy-2.3.0-sbt-839fad1cdc07cf6fc81364d74c323867230432ad.jar ...
2020.11.11 17:42:23 ERROR 	[SUCCESSFUL ] org.scala-sbt#sbinary_2.12;0.5.1!sbinary_2.12.jar (476ms)
2020.11.11 17:42:23 ERROR 	[SUCCESSFUL ] org.scala-sbt#main_2.12;1.4.2!main_2.12.jar (5861ms)
2020.11.11 17:42:23 ERROR 	[SUCCESSFUL ] org.scala-sbt.ipcsocket#ipcsocket;1.1.0!ipcsocket.jar (370ms)
2020.11.11 17:42:23 ERROR 	[SUCCESSFUL ] org.scala-lang#scala-library;2.12.12!scala-library.jar (5906ms)
2020.11.11 17:42:23 ERROR 	[SUCCESSFUL ] org.checkerframework#checker-qual;3.4.1!checker-qual.jar (467ms)
2020.11.11 17:42:24 ERROR 	[SUCCESSFUL ] org.scala-sbt#protocol_2.12;1.4.2!protocol_2.12.jar (1324ms)
2020.11.11 17:42:24 ERROR 	[SUCCESSFUL ] org.scala-lang#scala-reflect;2.12.12!scala-reflect.jar (5349ms)
2020.11.11 17:42:24 ERROR 	[SUCCESSFUL ] net.java.dev.jna#jna-platform;5.5.0!jna-platform.jar (4079ms)
2020.11.11 17:42:24 ERROR 	[SUCCESSFUL ] org.scala-sbt.ivy#ivy;2.3.0-sbt-839fad1cdc07cf6fc81364d74c323867230432ad!ivy.jar (1321ms)
2020.11.11 17:42:25 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc-persist-core-assembly;1.4.2!zinc-persist-core-assembly.jar (2844ms)
2020.11.11 17:42:26 ERROR 	[SUCCESSFUL ] io.get-coursier#lm-coursier-shaded_2.12;2.0.0!lm-coursier-shaded_2.12.jar (8457ms)
2020.11.11 17:42:28 ERROR 	[SUCCESSFUL ] org.scala-lang#scala-compiler;2.12.12!scala-compiler.jar (7436ms)
2020.11.11 17:42:28 ERROR :: retrieving :: org.scala-sbt#boot-app
2020.11.11 17:42:28 ERROR 	confs: [default]
2020.11.11 17:42:28 ERROR 	83 artifacts copied, 0 already retrieved
2020.11.11 17:42:28 ERROR [info] [launcher] getting Scala 2.12.12 (for sbt)...
2020.11.11 17:42:28 ERROR downloading https://repo1.maven.org/maven2/jline/jline/2.14.6/jline-2.14.6.jar ...
2020.11.11 17:42:28 ERROR downloading https://repo1.maven.org/maven2/org/scala-lang/modules/scala-xml_2.12/1.0.6/scala-xml_2.12-1.0.6.jar ...
2020.11.11 17:42:28 ERROR downloading https://repo1.maven.org/maven2/org/fusesource/jansi/jansi/1.12/jansi-1.12.jar ...
2020.11.11 17:42:28 ERROR 	[SUCCESSFUL ] jline#jline;2.14.6!jline.jar (246ms)
2020.11.11 17:42:28 ERROR 	[SUCCESSFUL ] org.fusesource.jansi#jansi;1.12!jansi.jar (265ms)
2020.11.11 17:42:28 ERROR 	[SUCCESSFUL ] org.scala-lang.modules#scala-xml_2.12;1.0.6!scala-xml_2.12.jar(bundle) (359ms)
2020.11.11 17:42:28 ERROR :: retrieving :: org.scala-sbt#boot-scala
2020.11.11 17:42:28 ERROR 	confs: [default]
2020.11.11 17:42:28 ERROR 	6 artifacts copied, 0 already retrieved
2020.11.11 17:42:29 INFO  [info] welcome to sbt 1.4.2 (Oracle Corporation Java 1.8.0_261)
2020.11.11 17:42:31 INFO  [info] loading settings for project task1-scala-build-build from metals.sbt ...
2020.11.11 17:42:33 INFO  [info] loading project definition from C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\project\project
2020.11.11 17:42:45 INFO  [info] loading settings for project task1-scala-build from metals.sbt ...
2020.11.11 17:42:45 INFO  [info] loading project definition from C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\project
2020.11.11 17:42:49 INFO  [success] Generated .bloop\task1-scala-build.json
2020.11.11 17:42:49 INFO  [success] Total time: 4 s, completed Nov 11, 2020 5:42:49 PM
2020.11.11 17:42:51 INFO  [info] loading settings for project task1-scala from build.sbt ...
2020.11.11 17:42:51 INFO  [info] set current project to hello-world (in build file:/C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/)
2020.11.11 17:42:56 INFO  [success] Generated .bloop\task1-scala.json
2020.11.11 17:42:56 INFO  [success] Generated .bloop\task1-scala-test.json
2020.11.11 17:42:56 INFO  [success] Total time: 5 s, completed Nov 11, 2020 5:42:56 PM
2020.11.11 17:42:56 INFO  sbt bloopInstall exit: 0
2020.11.11 17:42:56 INFO  time: ran 'sbt bloopInstall' in 1m27s
2020.11.11 17:42:56 INFO  Attempting to connect to the build server...
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 33474'...
Waiting for the bsp connection to come up...
Waiting for the bsp connection to come up...
Waiting for the bsp connection to come up...
Waiting for the bsp connection to come up...
Waiting for the bsp connection to come up...
Waiting for the bsp connection to come up...
Waiting for the bsp connection to come up...
Waiting for the bsp connection to come up...
Waiting for the bsp connection to come up...
Waiting for the bsp connection to come up...
Waiting for the bsp connection to come up...
2020.11.11 17:43:07 WARN  no build target for: C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\task1.scala
2020.11.11 17:43:07 INFO  skipping build import with status 'Installed'
Waiting for the bsp connection to come up...
Waiting for the bsp connection to come up...
Waiting for the bsp connection to come up...
Waiting for the bsp connection to come up...
Waiting for the bsp connection to come up...
Waiting for the bsp connection to come up...
Waiting for the bsp connection to come up...
Waiting for the bsp connection to come up...
Waiting for the bsp connection to come up...
No server running at 127.0.0.1:8212, let's fire one...
Resolving ch.epfl.scala:bloop-frontend_2.12:1.4.5-2-eb51d668...
Starting bloop server at 127.0.0.1:8212...
Attempting a connection to the server...
[0m[32m[D][0m Loading 2 projects from 'c:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\.bloop'...
[0m[32m[D][0m Loading project from 'c:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\.bloop\task1-scala-test.json'
[0m[32m[D][0m Loading project from 'c:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\.bloop\task1-scala.json'
[0m[32m[D][0m Cache miss for scala instance org.scala-lang:scala-compiler:2.13.3.
[0m[32m[D][0m   => C:\Users\aleks\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\net\java\dev\jna\jna\5.3.1\jna-5.3.1.jar
[0m[32m[D][0m   => C:\Users\aleks\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\jline\jline\3.15.0\jline-3.15.0.jar
[0m[32m[D][0m   => C:\Users\aleks\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala-compiler\2.13.3\scala-compiler-2.13.3.jar
[0m[32m[D][0m   => C:\Users\aleks\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala-library\2.13.3\scala-library-2.13.3.jar
[0m[32m[D][0m   => C:\Users\aleks\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala-reflect\2.13.3\scala-reflect-2.13.3.jar
[0m[32m[D][0m Missing analysis file for project 'task1-scala-test'
[0m[32m[D][0m Missing analysis file for project 'task1-scala'
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:33474...
The server is listening for incoming connections at tcp://127.0.0.1:33474...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
2020.11.11 17:43:18 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\aleks\AppData\Local\scalameta\metals\cache\bsp.trace.json
2020.11.11 17:43:23 INFO  Attempting to connect to the build server...
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 39778'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:39778...
The server is listening for incoming connections at tcp://127.0.0.1:39778...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
2020.11.11 17:43:24 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\aleks\AppData\Local\scalameta\metals\cache\bsp.trace.json
2020.11.11 17:43:26 INFO  time: connected to build server in 30s
2020.11.11 17:43:26 INFO  Connected to Build server v1.4.5-2-eb51d668
2020.11.11 17:43:27 WARN  Could not find java sources in None. Java symbols will not be available.
2020.11.11 17:43:30 INFO  time: indexed workspace in 3.23s
2020.11.11 17:43:30 INFO  compiling task1-scala (2 scala sources)
2020.11.11 17:43:36 INFO  time: compiled task1-scala in 6.12s
2020.11.11 17:43:45 INFO  skipping build import with status 'Installed'
2020.11.11 17:43:45 INFO  compiling task1-scala (2 scala sources)
2020.11.11 17:43:45 INFO  time: compiled task1-scala in 55ms
2020.11.11 17:43:55 INFO  skipping build import with status 'Installed'
2020.11.11 17:43:55 INFO  compiling task1-scala (2 scala sources)
2020.11.11 17:43:55 INFO  time: compiled task1-scala in 57ms
2020.11.11 17:44:17 ERROR code navigation does not work for the file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\task1.scala' because the SemanticDB file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\.bloop\task1-scala\bloop-bsp-clients-classes\test-classes-Metals-RGQzRbmbTNCFBMwKzF92fg==\META-INF\semanticdb\task1.scala.semanticdb' doesn't exist. There can be many reasons for this error. 
2020.11.11 17:44:18 INFO  skipping build import with status 'Installed'
2020.11.11 17:44:17 ERROR code navigation does not work for the file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\task1.scala' because the build target task1-scala-test is being compiled. Wait until compilation is finished and try again.
2020.11.11 17:44:18 INFO  compiling task1-scala (2 scala sources)
2020.11.11 17:44:18 INFO  time: compiled task1-scala in 53ms
2020.11.11 17:44:39 INFO  skipping build import with status 'Installed'
2020.11.11 17:44:39 INFO  compiling task1-scala (2 scala sources)
2020.11.11 17:44:39 INFO  time: compiled task1-scala in 54ms
2020.11.11 17:45:11 INFO  compiling task1-scala (2 scala sources)
2020.11.11 17:45:11 INFO  time: compiled task1-scala in 66ms
2020.11.11 17:45:28 INFO  compiling task1-scala (2 scala sources)
2020.11.11 17:45:28 INFO  time: compiled task1-scala in 50ms
2020.11.11 17:45:34 ERROR code navigation does not work for the file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\task1.scala' because the SemanticDB file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\.bloop\task1-scala\bloop-bsp-clients-classes\test-classes-Metals-RGQzRbmbTNCFBMwKzF92fg==\META-INF\semanticdb\task1.scala.semanticdb' doesn't exist. There can be many reasons for this error. 
2020.11.11 17:45:34 ERROR code navigation does not work for the file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\task1.scala' because the SemanticDB file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\.bloop\task1-scala\bloop-bsp-clients-classes\test-classes-Metals-RGQzRbmbTNCFBMwKzF92fg==\META-INF\semanticdb\task1.scala.semanticdb' doesn't exist. There can be many reasons for this error. 
2020.11.11 17:45:37 ERROR code navigation does not work for the file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\Main.scala' because the SemanticDB file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\.bloop\task1-scala\bloop-bsp-clients-classes\classes-Metals-RGQzRbmbTNCFBMwKzF92fg==\META-INF\semanticdb\src\main\scala\Main.scala.semanticdb' doesn't exist. There can be many reasons for this error. 
2020.11.11 17:45:37 ERROR code navigation does not work for the file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\Main.scala' because the SemanticDB file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\.bloop\task1-scala\bloop-bsp-clients-classes\classes-Metals-RGQzRbmbTNCFBMwKzF92fg==\META-INF\semanticdb\src\main\scala\Main.scala.semanticdb' doesn't exist. There can be many reasons for this error. 
2020.11.11 17:45:38 INFO  compiling task1-scala (2 scala sources)
2020.11.11 17:45:38 INFO  time: compiled task1-scala in 53ms
something's wrong: no file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/Main.scala in Array[String]RangePosition(file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/Main.scala, 44, 44, 57)
2020.11.11 17:45:43 INFO  compiling task1-scala (2 scala sources)
2020.11.11 17:45:43 INFO  time: compiled task1-scala in 54ms
2020.11.11 17:45:58 INFO  compiling task1-scala (2 scala sources)
2020.11.11 17:45:58 INFO  time: compiled task1-scala in 51ms
2020.11.11 17:46:09 INFO  compiling task1-scala (2 scala sources)
2020.11.11 17:46:09 INFO  time: compiled task1-scala in 57ms
2020.11.11 17:46:11 INFO  compiling task1-scala (2 scala sources)
2020.11.11 17:46:11 INFO  time: compiled task1-scala in 60ms
2020.11.11 17:46:16 INFO  compiling task1-scala (1 scala source)
2020.11.11 17:46:16 INFO  time: compiled task1-scala in 82ms
2020.11.11 17:46:38 INFO  compiling task1-scala (1 scala source)
2020.11.11 17:46:38 INFO  time: compiled task1-scala in 91ms
2020.11.11 17:46:50 INFO  compiling task1-scala (1 scala source)
2020.11.11 17:46:50 INFO  time: compiled task1-scala in 70ms
2020.11.11 17:48:52 INFO  compiling task1-scala (1 scala source)
2020.11.11 17:48:52 INFO  time: compiled task1-scala in 8ms
Nov 11, 2020 5:49:18 PM scala.meta.internal.metals.Docstrings indexSymbol
SEVERE: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/task1.scala
java.nio.file.NoSuchFileException: C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\task1.scala
	at sun.nio.fs.WindowsException.translateToIOException(Unknown Source)
	at sun.nio.fs.WindowsException.rethrowAsIOException(Unknown Source)
	at sun.nio.fs.WindowsException.rethrowAsIOException(Unknown Source)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(Unknown Source)
	at java.nio.file.Files.newByteChannel(Unknown Source)
	at java.nio.file.Files.newByteChannel(Unknown Source)
	at java.nio.file.Files.readAllBytes(Unknown Source)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.CommonMtagsEnrichments$XtensionAbsolutePath.toInput(CommonMtagsEnrichments.scala:395)
	at scala.meta.internal.metals.Docstrings.indexSymbolDefinition(Docstrings.scala:89)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:73)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:38)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:37)
	at scala.meta.internal.pc.MetalsGlobal.symbolDocumentation(MetalsGlobal.scala:161)
	at scala.meta.internal.pc.Signatures$SignaturePrinter.<init>(Signatures.scala:239)
	at scala.meta.internal.pc.HoverProvider.toHover(HoverProvider.scala:199)
	at scala.meta.internal.pc.HoverProvider.hover(HoverProvider.scala:82)
	at scala.meta.internal.pc.ScalaPresentationCompiler.$anonfun$hover$1(ScalaPresentationCompiler.scala:235)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:137)
	at scala.meta.internal.pc.CompilerAccess.$anonfun$withNonInterruptableCompiler$1(CompilerAccess.scala:125)
	at scala.meta.internal.pc.CompilerAccess.$anonfun$onCompilerJobQueue$1(CompilerAccess.scala:197)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:103)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)

2020.11.11 17:52:25 INFO  compiling task1-scala (1 scala source)
2020.11.11 17:52:25 INFO  time: compiled task1-scala in 62ms
something's wrong: no file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala in Array[Int]RangePosition(file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala, 192, 192, 202)
something's wrong: no file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala in Array[Int]RangePosition(file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala, 192, 192, 202)
2020.11.11 17:52:33 INFO  compiling task1-scala (1 scala source)
2020.11.11 17:52:33 INFO  time: compiled task1-scala in 73ms
2020.11.11 17:52:50 INFO  compiling task1-scala (1 scala source)
2020.11.11 17:52:50 INFO  time: compiled task1-scala in 49ms
2020.11.11 17:53:05 INFO  compiling task1-scala (1 scala source)
2020.11.11 17:53:05 INFO  time: compiled task1-scala in 81ms
something's wrong: no file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala in Array[Int]RangePosition(file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala, 229, 229, 239)
2020.11.11 17:54:10 INFO  compiling task1-scala (1 scala source)
2020.11.11 17:54:10 INFO  time: compiled task1-scala in 83ms
2020.11.11 17:54:37 INFO  compiling task1-scala (1 scala source)
2020.11.11 17:54:37 INFO  time: compiled task1-scala in 89ms
2020.11.11 17:54:54 INFO  C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\task1.scala:10:9: stale bloop error: type mismatch;
 found   : Unit
 required: Array[Int]
> for (i <- 1 to number)
>         {
>             arr :+ i
2020.11.11 17:54:54 INFO  C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\task1.scala:10:9: stale bloop error: type mismatch;
 found   : Unit
 required: Array[Int]
> for (i <- 1 to number)
>         {
>             arr :+ i
2020.11.11 17:54:54 INFO  C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\task1.scala:10:9: stale bloop error: type mismatch;
 found   : Unit
 required: Array[Int]
> for (i <- 1 to number)
>         {
>             arr :+ i
2020.11.11 17:54:54 INFO  C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\task1.scala:10:9: stale bloop error: type mismatch;
 found   : Unit
 required: Array[Int]
> for (i <- 1 to number)
>         {
>             arr :+ i
2020.11.11 17:54:54 INFO  C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\task1.scala:10:9: stale bloop error: type mismatch;
 found   : Unit
 required: Array[Int]
> for (i <- 1 to number)
>         {
>             arr :+ i
2020.11.11 17:54:54 INFO  C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\task1.scala:10:9: stale bloop error: type mismatch;
 found   : Unit
 required: Array[Int]
> for (i <- 1 to number)
>         {
>             arr :+ i
2020.11.11 17:54:55 INFO  C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\task1.scala:10:9: stale bloop error: type mismatch;
 found   : Unit
 required: Array[Int]
> for (i <- 1 to number)
>         {
>             arr :+ i
2020.11.11 17:54:55 INFO  C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\task1.scala:10:9: stale bloop error: type mismatch;
 found   : Unit
 required: Array[Int]
> for (i <- 1 to number)
>         {
>             arr :+ i
2020.11.11 17:55:02 INFO  compiling task1-scala (1 scala source)
2020.11.11 17:55:02 INFO  time: compiled task1-scala in 98ms
2020.11.11 17:55:18 ERROR code navigation does not work for the file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\task1.scala' because the SemanticDB file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\.bloop\task1-scala\bloop-bsp-clients-classes\classes-Metals-RGQzRbmbTNCFBMwKzF92fg==\META-INF\semanticdb\src\main\scala\task1.scala.semanticdb' doesn't exist. There can be many reasons for this error. 
2020.11.11 17:55:18 ERROR code navigation does not work for the file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\task1.scala' because the build target task1-scala is being compiled. Wait until compilation is finished and try again.
2020.11.11 17:55:18 INFO  compiling task1-scala (1 scala source)
2020.11.11 17:55:18 INFO  time: compiled task1-scala in 52ms
2020.11.11 17:55:25 INFO  compiling task1-scala (1 scala source)
2020.11.11 17:55:25 INFO  time: compiled task1-scala in 76ms
Nov 11, 2020 5:56:36 PM scala.meta.internal.metals.Docstrings indexSymbol
SEVERE: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/task1.scala
java.nio.file.NoSuchFileException: C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\task1.scala
	at sun.nio.fs.WindowsException.translateToIOException(Unknown Source)
	at sun.nio.fs.WindowsException.rethrowAsIOException(Unknown Source)
	at sun.nio.fs.WindowsException.rethrowAsIOException(Unknown Source)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(Unknown Source)
	at java.nio.file.Files.newByteChannel(Unknown Source)
	at java.nio.file.Files.newByteChannel(Unknown Source)
	at java.nio.file.Files.readAllBytes(Unknown Source)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.CommonMtagsEnrichments$XtensionAbsolutePath.toInput(CommonMtagsEnrichments.scala:395)
	at scala.meta.internal.metals.Docstrings.indexSymbolDefinition(Docstrings.scala:89)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:73)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:38)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:37)
	at scala.meta.internal.pc.MetalsGlobal.symbolDocumentation(MetalsGlobal.scala:161)
	at scala.meta.internal.pc.Signatures$SignaturePrinter.<init>(Signatures.scala:239)
	at scala.meta.internal.pc.HoverProvider.toHover(HoverProvider.scala:199)
	at scala.meta.internal.pc.HoverProvider.hover(HoverProvider.scala:50)
	at scala.meta.internal.pc.ScalaPresentationCompiler.$anonfun$hover$1(ScalaPresentationCompiler.scala:235)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:137)
	at scala.meta.internal.pc.CompilerAccess.$anonfun$withNonInterruptableCompiler$1(CompilerAccess.scala:125)
	at scala.meta.internal.pc.CompilerAccess.$anonfun$onCompilerJobQueue$1(CompilerAccess.scala:197)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:103)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)

2020.11.11 17:56:37 ERROR code navigation does not work for the file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\task1.scala' because the SemanticDB file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\.bloop\task1-scala\bloop-bsp-clients-classes\classes-Metals-RGQzRbmbTNCFBMwKzF92fg==\META-INF\semanticdb\src\main\scala\task1.scala.semanticdb' doesn't exist. There can be many reasons for this error. 
2020.11.11 17:56:37 ERROR code navigation does not work for the file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\task1.scala' because the SemanticDB file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\.bloop\task1-scala\bloop-bsp-clients-classes\classes-Metals-RGQzRbmbTNCFBMwKzF92fg==\META-INF\semanticdb\src\main\scala\task1.scala.semanticdb' doesn't exist. There can be many reasons for this error. 
2020.11.11 17:56:37 ERROR code navigation does not work for the file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\task1.scala' because the SemanticDB file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\.bloop\task1-scala\bloop-bsp-clients-classes\classes-Metals-RGQzRbmbTNCFBMwKzF92fg==\META-INF\semanticdb\src\main\scala\task1.scala.semanticdb' doesn't exist. There can be many reasons for this error. 
2020.11.11 17:56:43 ERROR code navigation does not work for the file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\task1.scala' because the SemanticDB file 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\.bloop\task1-scala\bloop-bsp-clients-classes\classes-Metals-RGQzRbmbTNCFBMwKzF92fg==\META-INF\semanticdb\src\main\scala\task1.scala.semanticdb' doesn't exist. There can be many reasons for this error. 
2020.11.11 17:56:44 INFO  compiling task1-scala (1 scala source)
2020.11.11 17:56:44 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 17:56:44 INFO  time: compiled task1-scala in 0.88s
2020.11.11 17:59:46 INFO  shutting down Metals
2020.11.11 17:59:46 INFO  Shut down connection with build server.
2020.11.11 17:59:46 INFO  Shut down connection with build server.
No more data in the client stdin, exiting...
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
No more data in the server stdin, exiting...
2020.11.11 17:59:59 INFO  Started: Metals version 0.9.5 in workspace 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala' for client vscode.
2020.11.11 17:59:59 INFO  time: initialize in 0.38s
2020.11.11 17:59:59 INFO  Attempting to connect to the build server...
2020.11.11 18:00:00 WARN  no build target for: C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\task1.scala
2020.11.11 17:59:59 INFO  skipping build import with status 'Installed'
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 25275'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:25275...
The server is listening for incoming connections at tcp://127.0.0.1:25275...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
2020.11.11 18:00:01 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\aleks\AppData\Local\scalameta\metals\cache\bsp.trace.json
2020.11.11 18:00:01 INFO  Attempting to connect to the build server...
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 11725'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:11725...
The server is listening for incoming connections at tcp://127.0.0.1:11725...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
2020.11.11 18:00:02 INFO  no build target: using presentation compiler with only scala-library
Nov 11, 2020 6:00:02 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5
2020.11.11 18:00:02 WARN  no build target for: C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\task1.scala
2020.11.11 18:00:03 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\aleks\AppData\Local\scalameta\metals\cache\bsp.trace.json
2020.11.11 18:00:03 INFO  time: connected to build server in 2.75s
2020.11.11 18:00:03 INFO  Connected to Build server v1.4.5-2-eb51d668
2020.11.11 18:00:04 WARN  Could not find java sources in None. Java symbols will not be available.
2020.11.11 18:00:04 INFO  time: indexed workspace in 1.4s
Nov 11, 2020 6:14:00 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 16 more

Nov 11, 2020 6:15:22 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 16 more

Nov 11, 2020 6:19:07 PM org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTraceNotification
Nov 11, 2020 6:19:32 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 16 more

Nov 11, 2020 6:19:51 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 16 more

Nov 11, 2020 6:19:52 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 16 more

Nov 11, 2020 6:20:00 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 16 more

Nov 11, 2020 6:20:06 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 16 more

Nov 11, 2020 6:20:14 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 16 more

Nov 11, 2020 6:20:34 PM org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTraceNotification
Nov 11, 2020 6:20:35 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 15 more

scala.MatchError: scala.MatchError: scala.meta.internal.metals.debug.BuildTargetNotFoundException: Build target not found: root (of class scala.meta.internal.metals.debug.BuildTargetNotFoundException) (of class scala.MatchError)
	at scala.PartialFunction$$anon$1.apply(PartialFunction.scala:259)
	at scala.PartialFunction$$anon$1.apply(PartialFunction.scala:257)
	at scala.meta.internal.metals.debug.DebugProvider$$anonfun$1.applyOrElse(DebugProvider.scala:237)
	at scala.meta.internal.metals.debug.DebugProvider$$anonfun$1.applyOrElse(DebugProvider.scala:237)
	at scala.runtime.AbstractPartialFunction.apply(AbstractPartialFunction.scala:38)
	at scala.util.Success.foreach(Try.scala:253)
	at scala.concurrent.Future.$anonfun$foreach$1$adapted(Future.scala:229)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Nov 11, 2020 6:20:38 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: scala.MatchError: scala.meta.internal.metals.debug.BuildTargetNotFoundException: Build target not found: root (of class scala.meta.internal.metals.debug.BuildTargetNotFoundException)
java.util.concurrent.CompletionException: scala.MatchError: scala.meta.internal.metals.debug.BuildTargetNotFoundException: Build target not found: root (of class scala.meta.internal.metals.debug.BuildTargetNotFoundException)
	at java.util.concurrent.CompletableFuture.encodeThrowable(Unknown Source)
	at java.util.concurrent.CompletableFuture.completeThrowable(Unknown Source)
	at java.util.concurrent.CompletableFuture.uniAccept(Unknown Source)
	at java.util.concurrent.CompletableFuture$UniAccept.tryFire(Unknown Source)
	at java.util.concurrent.CompletableFuture.postComplete(Unknown Source)
	at java.util.concurrent.CompletableFuture.completeExceptionally(Unknown Source)
	at scala.concurrent.java8.FuturesConvertersImpl$CF.apply(FutureConvertersImpl.scala:29)
	at scala.concurrent.java8.FuturesConvertersImpl$CF.apply(FutureConvertersImpl.scala:26)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at scala.concurrent.BatchingExecutor$Batch.processBatch$1(BatchingExecutor.scala:67)
	at scala.concurrent.BatchingExecutor$Batch.$anonfun$run$1(BatchingExecutor.scala:82)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:85)
	at scala.concurrent.BatchingExecutor$Batch.run(BatchingExecutor.scala:59)
	at scala.concurrent.Future$InternalCallbackExecutor$.unbatchedExecute(Future.scala:875)
	at scala.concurrent.BatchingExecutor.execute(BatchingExecutor.scala:110)
	at scala.concurrent.BatchingExecutor.execute$(BatchingExecutor.scala:107)
	at scala.concurrent.Future$InternalCallbackExecutor$.execute(Future.scala:873)
	at scala.concurrent.impl.CallbackRunnable.executeWithValue(Promise.scala:72)
	at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1(Promise.scala:288)
	at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1$adapted(Promise.scala:288)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete(Promise.scala:288)
	at scala.concurrent.Promise.complete(Promise.scala:53)
	at scala.concurrent.Promise.complete$(Promise.scala:52)
	at scala.concurrent.impl.Promise$DefaultPromise.complete(Promise.scala:187)
	at scala.concurrent.impl.Promise.$anonfun$transformWith$1(Promise.scala:42)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: scala.MatchError: scala.meta.internal.metals.debug.BuildTargetNotFoundException: Build target not found: root (of class scala.meta.internal.metals.debug.BuildTargetNotFoundException)
	at scala.meta.internal.metals.debug.BuildTargetClassesFinder$$anonfun$findMainClassAndItsBuildTarget$4.applyOrElse(BuildTargetClassesFinder.scala:38)
	at scala.meta.internal.metals.debug.BuildTargetClassesFinder$$anonfun$findMainClassAndItsBuildTarget$4.applyOrElse(BuildTargetClassesFinder.scala:37)
	at scala.runtime.AbstractPartialFunction.apply(AbstractPartialFunction.scala:38)
	at scala.util.Failure.recoverWith(Try.scala:236)
	at scala.meta.internal.metals.debug.BuildTargetClassesFinder.findMainClassAndItsBuildTarget(BuildTargetClassesFinder.scala:37)
	at scala.meta.internal.metals.debug.DebugProvider.$anonfun$resolveMainClassParams$1(DebugProvider.scala:133)
	at scala.meta.internal.metals.debug.DebugProvider.withRebuildRetry(DebugProvider.scala:319)
	at scala.meta.internal.metals.debug.DebugProvider.resolveMainClassParams(DebugProvider.scala:129)
	at scala.meta.internal.metals.MetalsLanguageServer.executeCommand(MetalsLanguageServer.scala:1527)
	at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	... 3 more

Nov 11, 2020 6:20:47 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 15 more

Nov 11, 2020 6:23:51 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala",
      "languageId": "scala",
      "version": 1,
      "text": "object Main {\r\n  def main(args: Array[String]) \r\n    { \r\n        println(GenerateArray(50)); \r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number)\r\n        {\r\n            arr :+ i\r\n        }\r\n        return arr\r\n\r\n    }\r\n}"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

Nov 11, 2020 6:26:47 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 2,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala"
    },
    "contentChanges": [
      {
        "text": "object Main {\r\n  def main(args: Array[String]) \r\n    { \r\n        println(GenerateArray(50)mkString(\" \")); \r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number)\r\n        {\r\n            arr :+ i\r\n        }\r\n        return arr\r\n\r\n    }\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 16 more

2020.11.11 18:26:48 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:26:48 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:26:48 INFO  time: compiled task1-scala in 0.97s
2020.11.11 18:27:14 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:27:14 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:27:14 INFO  time: compiled task1-scala in 0.8s
2020.11.11 18:31:28 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:31:28 INFO  time: compiled task1-scala in 0.19s
2020.11.11 18:32:24 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:32:24 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:32:24 INFO  time: compiled task1-scala in 0.65s
2020.11.11 18:38:40 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:38:40 INFO  time: compiled task1-scala in 0.1s
2020.11.11 18:39:27 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:39:27 INFO  time: compiled task1-scala in 0.12s
2020.11.11 18:39:40 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:39:40 INFO  time: compiled task1-scala in 56ms
2020.11.11 18:39:49 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:39:49 INFO  time: compiled task1-scala in 0.11s
2020.11.11 18:39:59 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:39:59 INFO  time: compiled task1-scala in 55ms
2020.11.11 18:41:23 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:41:23 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:41:23 INFO  time: compiled task1-scala in 0.62s
2020.11.11 18:41:47 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:41:47 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:41:47 INFO  time: compiled task1-scala in 0.62s
2020.11.11 18:41:53 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:41:53 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:41:53 INFO  time: compiled task1-scala in 0.6s
2020.11.11 18:42:16 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:42:16 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:42:16 INFO  time: compiled task1-scala in 0.6s
2020.11.11 18:42:33 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:42:33 INFO  time: compiled task1-scala in 0.11s
something's wrong: no file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala in Array[<error>]RangePosition(file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala, 321, 321, 336)
something's wrong: no file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala in Array[<error>]RangePosition(file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala, 321, 321, 329)
something's wrong: no file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala in Array[<error>]RangePosition(file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala, 321, 321, 330)
something's wrong: no file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala in Array[Int]RangePosition(file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala, 321, 321, 331)
2020.11.11 18:42:40 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:42:40 INFO  time: compiled task1-scala in 0.1s
2020.11.11 18:42:48 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:42:48 INFO  time: compiled task1-scala in 0.11s
Nov 11, 2020 6:43:20 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 712
Nov 11, 2020 6:43:20 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 713
2020.11.11 18:43:23 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:43:23 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:43:23 INFO  time: compiled task1-scala in 0.62s
2020.11.11 18:43:41 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:43:41 INFO  time: compiled task1-scala in 0.15s
2020.11.11 18:43:47 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:43:47 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:43:47 INFO  time: compiled task1-scala in 0.68s
Nov 11, 2020 6:46:25 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 849
Nov 11, 2020 6:46:25 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 850
Nov 11, 2020 6:46:25 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 851
2020.11.11 18:46:25 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:46:25 INFO  time: compiled task1-scala in 0.11s
2020.11.11 18:46:42 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:46:42 INFO  time: compiled task1-scala in 51ms
2020.11.11 18:46:57 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:46:57 INFO  time: compiled task1-scala in 98ms
2020.11.11 18:47:02 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:47:02 INFO  time: compiled task1-scala in 94ms
2020.11.11 18:47:16 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:47:16 INFO  time: compiled task1-scala in 50ms
Nov 11, 2020 6:47:17 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1034
2020.11.11 18:47:19 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:47:19 INFO  time: compiled task1-scala in 97ms
2020.11.11 18:48:55 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:48:55 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:48:55 INFO  time: compiled task1-scala in 0.59s
Nov 11, 2020 6:51:05 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Predef.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\npackage scala\n\nimport scala.language.implicitConversions\n\nimport scala.collection.{ mutable, immutable, generic }\nimport immutable.StringOps\nimport mutable.ArrayOps\nimport generic.CanBuildFrom\nimport scala.annotation.{ elidable, implicitNotFound }\nimport scala.annotation.elidable.ASSERTION\nimport scala.io.StdIn\n\n/** The `Predef` object provides definitions that are accessible in all Scala\n *  compilation units without explicit qualification.\n *\n *  \u003d\u003d\u003d Commonly Used Types \u003d\u003d\u003d\n *  Predef provides type aliases for types which are commonly used, such as\n *  the immutable collection types [[scala.collection.immutable.Map]],\n *  [[scala.collection.immutable.Set]], and the [[scala.collection.immutable.List]]\n *  constructors ([[scala.collection.immutable.::]] and\n *  [[scala.collection.immutable.Nil]]).\n *\n *  \u003d\u003d\u003d Console Output \u003d\u003d\u003d\n *  For basic console output, `Predef` provides convenience methods [[print(x:Any* print]] and [[println(x:Any* println]],\n *  which are aliases of the methods in the object [[scala.Console]].\n *\n *  \u003d\u003d\u003d Assertions \u003d\u003d\u003d\n *  A set of `assert` functions are provided for use as a way to document\n *  and dynamically check invariants in code. Invocations of `assert` can be elided\n *  at compile time by providing the command line option `-Xdisable-assertions`,\n *  which raises `-Xelide-below` above `elidable.ASSERTION`, to the `scalac` command.\n *\n *  Variants of `assert` intended for use with static analysis tools are also\n *  provided: `assume`, `require` and `ensuring`. `require` and `ensuring` are\n *  intended for use as a means of design-by-contract style specification\n *  of pre- and post-conditions on functions, with the intention that these\n *  specifications could be consumed by a static analysis tool. For instance,\n *\n *  {{{\n *  def addNaturals(nats: List[Int]): Int \u003d {\n *    require(nats forall (_ \u003e\u003d 0), \"List contains negative numbers\")\n *    nats.foldLeft(0)(_ + _)\n *  } ensuring(_ \u003e\u003d 0)\n *  }}}\n *\n *  The declaration of `addNaturals` states that the list of integers passed should\n *  only contain natural numbers (i.e. non-negative), and that the result returned\n *  will also be natural. `require` is distinct from `assert` in that if the\n *  condition fails, then the caller of the function is to blame rather than a\n *  logical error having been made within `addNaturals` itself. `ensuring` is a\n *  form of `assert` that declares the guarantee the function is providing with\n *  regards to its return value.\n *\n *  \u003d\u003d\u003d Implicit Conversions \u003d\u003d\u003d\n *  A number of commonly applied implicit conversions are also defined here, and\n *  in the parent type [[scala.LowPriorityImplicits]]. Implicit conversions\n *  are provided for the \"widening\" of numeric values, for instance, converting a\n *  Short value to a Long value as required, and to add additional higher-order\n *  functions to Array values. These are described in more detail in the documentation of [[scala.Array]].\n *\n * @groupname utilities Utility Methods\n * @groupprio utilities 10\n *\n * @groupname assertions Assertions\n * @groupprio assertions 20\n * @groupdesc assertions These methods support program verification and runtime correctness.\n *\n * @groupname console-output Console Output\n * @groupprio console-output 30\n * @groupdesc console-output These methods provide output via the console.\n *\n * @groupname type-constraints Type Constraints\n * @groupprio type-constraints 40\n * @groupdesc type-constraints These entities allows constraints between types to be stipulated.\n *\n * @groupname aliases Aliases\n * @groupprio aliases 50\n * @groupdesc aliases These aliases bring selected immutable types into scope without any imports.\n *\n * @groupname conversions-string String Conversions\n * @groupprio conversions-string 60\n * @groupdesc conversions-string Conversions to and from String and StringOps.\n *\n * @groupname implicit-classes-any Implicit Classes\n * @groupprio implicit-classes-any 70\n * @groupdesc implicit-classes-any These implicit classes add useful extension methods to every type.\n *\n * @groupname implicit-classes-char CharSequence Conversions\n * @groupprio implicit-classes-char 80\n * @groupdesc implicit-classes-char These implicit classes add CharSequence methods to Array[Char] and IndexedSeq[Char] instances.\n *\n * @groupname conversions-java-to-anyval Java to Scala\n * @groupprio conversions-java-to-anyval 90\n * @groupdesc conversions-java-to-anyval Implicit conversion from Java primitive wrapper types to Scala equivalents.\n *\n * @groupname conversions-anyval-to-java Scala to Java\n * @groupprio conversions-anyval-to-java 100\n * @groupdesc conversions-anyval-to-java Implicit conversion from Scala AnyVals to Java primitive wrapper types equivalents.\n *\n * @groupname conversions-array-to-wrapped-array Array to WrappedArray\n * @groupprio conversions-array-to-wrapped-array 110\n * @groupdesc conversions-array-to-wrapped-array Conversions from Arrays to WrappedArrays.\n */\nobject Predef extends LowPriorityImplicits with DeprecatedPredef {\n  /**\n   * Retrieve the runtime representation of a class type. `classOf[T]` is equivalent to\n   * the class literal `T.class` in Java.\n   *\n   * @example {{{\n   * val listClass \u003d classOf[List[_]]\n   * // listClass is java.lang.Class[List[_]] \u003d class scala.collection.immutable.List\n   *\n   * val mapIntString \u003d classOf[Map[Int,String]]\n   * // mapIntString is java.lang.Class[Map[Int,String]] \u003d interface scala.collection.immutable.Map\n   * }}}\n   * @group utilities\n   */\n  def classOf[T]: Class[T] \u003d null // This is a stub method. The actual implementation is filled in by the compiler.\n\n  /** The `String` type in Scala has methods that come either from the underlying\n   *  Java String (see the documentation corresponding to your Java version, for\n   *  example [[http://docs.oracle.com/javase/8/docs/api/java/lang/String.html]]) or\n   *  are added implicitly through [[scala.collection.immutable.StringOps]].\n   *  @group aliases\n   */\n  type String        \u003d java.lang.String\n  /**  @group aliases */\n  type Class[T]      \u003d java.lang.Class[T]\n\n  // miscellaneous -----------------------------------------------------\n  scala.`package`                         // to force scala package object to be seen.\n  scala.collection.immutable.List         // to force Nil, :: to be seen.\n\n  /**  @group aliases */\n  type Function[-A, +B] \u003d Function1[A, B]\n\n  /**  @group aliases */\n  type Map[A, +B] \u003d immutable.Map[A, B]\n  /**  @group aliases */\n  type Set[A]     \u003d immutable.Set[A]\n  /**  @group aliases */\n  val Map         \u003d immutable.Map\n  /**  @group aliases */\n  val Set         \u003d immutable.Set\n\n  // Manifest types, companions, and incantations for summoning\n  @annotation.implicitNotFound(msg \u003d \"No ClassManifest available for ${T}.\")\n  @deprecated(\"use `scala.reflect.ClassTag` instead\", \"2.10.0\")\n  type ClassManifest[T] \u003d scala.reflect.ClassManifest[T]\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"this notion doesn\u0027t have a corresponding concept in 2.10, because scala.reflect.runtime.universe.TypeTag can capture arbitrary types. Use type tags instead of manifests, and there will be no need in opt manifests.\", \"2.10.0\")\n  type OptManifest[T]   \u003d scala.reflect.OptManifest[T]\n  @annotation.implicitNotFound(msg \u003d \"No Manifest available for ${T}.\")\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"use `scala.reflect.ClassTag` (to capture erasures) or scala.reflect.runtime.universe.TypeTag (to capture types) or both instead\", \"2.10.0\")\n  type Manifest[T]      \u003d scala.reflect.Manifest[T]\n  @deprecated(\"use `scala.reflect.ClassTag` instead\", \"2.10.0\")\n  val ClassManifest     \u003d scala.reflect.ClassManifest\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"use `scala.reflect.ClassTag` (to capture erasures) or scala.reflect.runtime.universe.TypeTag (to capture types) or both instead\", \"2.10.0\")\n  val Manifest          \u003d scala.reflect.Manifest\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"this notion doesn\u0027t have a corresponding concept in 2.10, because scala.reflect.runtime.universe.TypeTag can capture arbitrary types. Use type tags instead of manifests, and there will be no need in opt manifests.\", \"2.10.0\")\n  val NoManifest        \u003d scala.reflect.NoManifest\n\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"use scala.reflect.classTag[T] and scala.reflect.runtime.universe.typeTag[T] instead\", \"2.10.0\")\n  def manifest[T](implicit m: Manifest[T])           \u003d m\n  @deprecated(\"use scala.reflect.classTag[T] instead\", \"2.10.0\")\n  def classManifest[T](implicit m: ClassManifest[T]) \u003d m\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"this notion doesn\u0027t have a corresponding concept in 2.10, because scala.reflect.runtime.universe.TypeTag can capture arbitrary types. Use type tags instead of manifests, and there will be no need in opt manifests.\", \"2.10.0\")\n  def optManifest[T](implicit m: OptManifest[T])     \u003d m\n\n  // Minor variations on identity functions\n  /** @group utilities */\n  @inline def identity[A](x: A): A         \u003d x    // @see `conforms` for the implicit version\n  /** @group utilities */\n  @inline def implicitly[T](implicit e: T) \u003d e    // for summoning implicit values from the nether world -- TODO: when dependent method types are on by default, give this result type `e.type`, so that inliner has better chance of knowing which method to inline in calls like `implicitly[MatchingStrategy[Option]].zero`\n  /** @group utilities */\n  @inline def locally[T](x: T): T  \u003d x    // to communicate intent and avoid unmoored statements\n\n  // assertions ---------------------------------------------------------\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  Calls to this method will not be generated if `-Xelide-below`\n   *  is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assertion   the expression to test\n   *  @group assertions\n   */\n  @elidable(ASSERTION)\n  def assert(assertion: Boolean) {\n    if (!assertion)\n      throw new java.lang.AssertionError(\"assertion failed\")\n  }\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  Calls to this method will not be generated if `-Xelide-below`\n   *  is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assertion   the expression to test\n   *  @param message     a String to include in the failure message\n   *  @group assertions\n   */\n  @elidable(ASSERTION) @inline\n  final def assert(assertion: Boolean, message: \u003d\u003e Any) {\n    if (!assertion)\n      throw new java.lang.AssertionError(\"assertion failed: \"+ message)\n  }\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  This method differs from assert only in the intent expressed:\n   *  assert contains a predicate which needs to be proven, while\n   *  assume contains an axiom for a static checker.  Calls to this method\n   *  will not be generated if `-Xelide-below` is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assumption   the expression to test\n   *  @group assertions\n   */\n  @elidable(ASSERTION)\n  def assume(assumption: Boolean) {\n    if (!assumption)\n      throw new java.lang.AssertionError(\"assumption failed\")\n  }\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  This method differs from assert only in the intent expressed:\n   *  assert contains a predicate which needs to be proven, while\n   *  assume contains an axiom for a static checker.  Calls to this method\n   *  will not be generated if `-Xelide-below` is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assumption   the expression to test\n   *  @param message      a String to include in the failure message\n   *  @group assertions\n   */\n  @elidable(ASSERTION) @inline\n  final def assume(assumption: Boolean, message: \u003d\u003e Any) {\n    if (!assumption)\n      throw new java.lang.AssertionError(\"assumption failed: \"+ message)\n  }\n\n  /** Tests an expression, throwing an `IllegalArgumentException` if false.\n   *  This method is similar to `assert`, but blames the caller of the method\n   *  for violating the condition.\n   *\n   *  @param requirement   the expression to test\n   *  @group assertions\n   */\n  def require(requirement: Boolean) {\n    if (!requirement)\n      throw new IllegalArgumentException(\"requirement failed\")\n  }\n\n  /** Tests an expression, throwing an `IllegalArgumentException` if false.\n   *  This method is similar to `assert`, but blames the caller of the method\n   *  for violating the condition.\n   *\n   *  @param requirement   the expression to test\n   *  @param message       a String to include in the failure message\n   *  @group assertions\n   */\n  @inline final def require(requirement: Boolean, message: \u003d\u003e Any) {\n    if (!requirement)\n      throw new IllegalArgumentException(\"requirement failed: \"+ message)\n  }\n\n  /** `???` can be used for marking methods that remain to be implemented.\n   *  @throws NotImplementedError\n   *  @group utilities\n   */\n  def ??? : Nothing \u003d throw new NotImplementedError\n\n  // tupling ------------------------------------------------------------\n\n  @deprecated(\"use built-in tuple syntax or Tuple2 instead\", \"2.11.0\")\n  type Pair[+A, +B] \u003d Tuple2[A, B]\n  @deprecated(\"use built-in tuple syntax or Tuple2 instead\", \"2.11.0\")\n  object Pair {\n    def apply[A, B](x: A, y: B) \u003d Tuple2(x, y)\n    def unapply[A, B](x: Tuple2[A, B]): Option[Tuple2[A, B]] \u003d Some(x)\n  }\n\n  @deprecated(\"use built-in tuple syntax or Tuple3 instead\", \"2.11.0\")\n  type Triple[+A, +B, +C] \u003d Tuple3[A, B, C]\n  @deprecated(\"use built-in tuple syntax or Tuple3 instead\", \"2.11.0\")\n  object Triple {\n    def apply[A, B, C](x: A, y: B, z: C) \u003d Tuple3(x, y, z)\n    def unapply[A, B, C](x: Tuple3[A, B, C]): Option[Tuple3[A, B, C]] \u003d Some(x)\n  }\n\n  // implicit classes -----------------------------------------------------\n\n  /** @group implicit-classes-any */\n  implicit final class ArrowAssoc[A](private val self: A) extends AnyVal {\n    @inline def -\u003e [B](y: B): Tuple2[A, B] \u003d Tuple2(self, y)\n    def ?[B](y: B): Tuple2[A, B] \u003d -\u003e(y)\n  }\n\n  /** @group implicit-classes-any */\n  implicit final class Ensuring[A](private val self: A) extends AnyVal {\n    def ensuring(cond: Boolean): A \u003d { assert(cond); self }\n    def ensuring(cond: Boolean, msg: \u003d\u003e Any): A \u003d { assert(cond, msg); self }\n    def ensuring(cond: A \u003d\u003e Boolean): A \u003d { assert(cond(self)); self }\n    def ensuring(cond: A \u003d\u003e Boolean, msg: \u003d\u003e Any): A \u003d { assert(cond(self), msg); self }\n  }\n\n  /** @group implicit-classes-any */\n  implicit final class StringFormat[A](private val self: A) extends AnyVal {\n    /** Returns string formatted according to given `format` string.\n     *  Format strings are as for `String.format`\n     *  (@see java.lang.String.format).\n     */\n    @inline def formatted(fmtstr: String): String \u003d fmtstr format self\n  }\n\n  // scala/bug#8229 retaining the pre 2.11 name for source compatibility in shadowing this implicit\n  /** @group implicit-classes-any */\n  implicit final class any2stringadd[A](private val self: A) extends AnyVal {\n    def +(other: String): String \u003d String.valueOf(self) + other\n  }\n\n  implicit final class RichException(private val self: Throwable) extends AnyVal {\n    import scala.compat.Platform.EOL\n    @deprecated(\"use Throwable#getStackTrace\", \"2.11.0\") def getStackTraceString \u003d self.getStackTrace().mkString(\"\", EOL, EOL)\n  }\n\n  // Sadly we have to do `@deprecatedName(null, \"2.12.0\")` because\n  // `@deprecatedName(since\u003d\"2.12.0\")` incurs a warning about\n  //   Usage of named or default arguments transformed this annotation constructor call into a block.\n  //   The corresponding AnnotationInfo will contain references to local values and default getters\n  //   instead of the actual argument trees\n  // and `@deprecatedName(Symbol(\"\u003cnone\u003e\"), \"2.12.0\")` crashes scalac with\n  //   scala.reflect.internal.Symbols$CyclicReference: illegal cyclic reference involving object Symbol\n  // in run/repl-no-imports-no-predef-power.scala.\n  /** @group implicit-classes-char */\n  implicit final class SeqCharSequence(@deprecated(\"will be made private\", \"2.12.0\") @deprecatedName(null, \"2.12.0\") val __sequenceOfChars: scala.collection.IndexedSeq[Char]) extends CharSequence {\n    def length: Int                                     \u003d __sequenceOfChars.length\n    def charAt(index: Int): Char                        \u003d __sequenceOfChars(index)\n    def subSequence(start: Int, end: Int): CharSequence \u003d new SeqCharSequence(__sequenceOfChars.slice(start, end))\n    override def toString                               \u003d __sequenceOfChars mkString \"\"\n  }\n\n  /** @group implicit-classes-char */\n  implicit final class ArrayCharSequence(@deprecated(\"will be made private\", \"2.12.0\") @deprecatedName(null, \"2.12.0\") val __arrayOfChars: Array[Char]) extends CharSequence {\n    def length: Int                                     \u003d __arrayOfChars.length\n    def charAt(index: Int): Char                        \u003d __arrayOfChars(index)\n    def subSequence(start: Int, end: Int): CharSequence \u003d new runtime.ArrayCharSequence(__arrayOfChars, start, end)\n    override def toString                               \u003d __arrayOfChars mkString \"\"\n  }\n\n  implicit val StringCanBuildFrom: CanBuildFrom[String, Char, String] \u003d new CanBuildFrom[String, Char, String] {\n    def apply(from: String) \u003d apply()\n    def apply()             \u003d mutable.StringBuilder.newBuilder\n  }\n\n  /** @group conversions-string */\n  @inline implicit def augmentString(x: String): StringOps \u003d new StringOps(x)\n  /** @group conversions-string */\n  @inline implicit def unaugmentString(x: StringOps): String \u003d x.repr\n\n  // printing -----------------------------------------------------------\n\n  /** Prints an object to `out` using its `toString` method.\n   *\n   *  @param x the object to print; may be null.\n   *  @group console-output\n   */\n  def print(x: Any) \u003d Console.print(x)\n\n  /** Prints a newline character on the default output.\n   *  @group console-output\n   */\n  def println() \u003d Console.println()\n\n  /** Prints out an object to the default output, followed by a newline character.\n   *\n   *  @param x the object to print.\n   *  @group console-output\n   */\n  def println(x: Any) \u003d Console.println(x)\n\n  /** Prints its arguments as a formatted string to the default output,\n   *  based on a string pattern (in a fashion similar to printf in C).\n   *\n   *  The interpretation of the formatting patterns is described in\n   *  [[java.util.Formatter]].\n   *\n   *  Consider using the [[scala.StringContext.f f interpolator]] as more type safe and idiomatic.\n   *\n   *  @param text the pattern for formatting the arguments.\n   *  @param args the arguments used to instantiating the pattern.\n   *  @throws java.lang.IllegalArgumentException if there was a problem with the format string or arguments\n   *\n   *  @see [[scala.StringContext.f StringContext.f]]\n   *  @group console-output\n   */\n  def printf(text: String, xs: Any*) \u003d Console.print(text.format(xs: _*))\n\n  // views --------------------------------------------------------------\n\n  implicit def tuple2ToZippedOps[T1, T2](x: (T1, T2))                           \u003d new runtime.Tuple2Zipped.Ops(x)\n  implicit def tuple3ToZippedOps[T1, T2, T3](x: (T1, T2, T3))                   \u003d new runtime.Tuple3Zipped.Ops(x)\n\n  implicit def genericArrayOps[T](xs: Array[T]): ArrayOps[T] \u003d (xs match {\n    case x: Array[AnyRef]  \u003d\u003e refArrayOps[AnyRef](x)\n    case x: Array[Boolean] \u003d\u003e booleanArrayOps(x)\n    case x: Array[Byte]    \u003d\u003e byteArrayOps(x)\n    case x: Array[Char]    \u003d\u003e charArrayOps(x)\n    case x: Array[Double]  \u003d\u003e doubleArrayOps(x)\n    case x: Array[Float]   \u003d\u003e floatArrayOps(x)\n    case x: Array[Int]     \u003d\u003e intArrayOps(x)\n    case x: Array[Long]    \u003d\u003e longArrayOps(x)\n    case x: Array[Short]   \u003d\u003e shortArrayOps(x)\n    case x: Array[Unit]    \u003d\u003e unitArrayOps(x)\n    case null              \u003d\u003e null\n  }).asInstanceOf[ArrayOps[T]]\n\n  implicit def booleanArrayOps(xs: Array[Boolean]): ArrayOps.ofBoolean   \u003d new ArrayOps.ofBoolean(xs)\n  implicit def byteArrayOps(xs: Array[Byte]): ArrayOps.ofByte            \u003d new ArrayOps.ofByte(xs)\n  implicit def charArrayOps(xs: Array[Char]): ArrayOps.ofChar            \u003d new ArrayOps.ofChar(xs)\n  implicit def doubleArrayOps(xs: Array[Double]): ArrayOps.ofDouble      \u003d new ArrayOps.ofDouble(xs)\n  implicit def floatArrayOps(xs: Array[Float]): ArrayOps.ofFloat         \u003d new ArrayOps.ofFloat(xs)\n  implicit def intArrayOps(xs: Array[Int]): ArrayOps.ofInt               \u003d new ArrayOps.ofInt(xs)\n  implicit def longArrayOps(xs: Array[Long]): ArrayOps.ofLong            \u003d new ArrayOps.ofLong(xs)\n  implicit def refArrayOps[T \u003c: AnyRef](xs: Array[T]): ArrayOps.ofRef[T] \u003d new ArrayOps.ofRef[T](xs)\n  implicit def shortArrayOps(xs: Array[Short]): ArrayOps.ofShort         \u003d new ArrayOps.ofShort(xs)\n  implicit def unitArrayOps(xs: Array[Unit]): ArrayOps.ofUnit            \u003d new ArrayOps.ofUnit(xs)\n\n  // \"Autoboxing\" and \"Autounboxing\" ---------------------------------------------------\n\n  /** @group conversions-anyval-to-java */\n  implicit def byte2Byte(x: Byte): java.lang.Byte             \u003d x.asInstanceOf[java.lang.Byte]\n  /** @group conversions-anyval-to-java */\n  implicit def short2Short(x: Short): java.lang.Short         \u003d x.asInstanceOf[java.lang.Short]\n  /** @group conversions-anyval-to-java */\n  implicit def char2Character(x: Char): java.lang.Character   \u003d x.asInstanceOf[java.lang.Character]\n  /** @group conversions-anyval-to-java */\n  implicit def int2Integer(x: Int): java.lang.Integer         \u003d x.asInstanceOf[java.lang.Integer]\n  /** @group conversions-anyval-to-java */\n  implicit def long2Long(x: Long): java.lang.Long             \u003d x.asInstanceOf[java.lang.Long]\n  /** @group conversions-anyval-to-java */\n  implicit def float2Float(x: Float): java.lang.Float         \u003d x.asInstanceOf[java.lang.Float]\n  /** @group conversions-anyval-to-java */\n  implicit def double2Double(x: Double): java.lang.Double     \u003d x.asInstanceOf[java.lang.Double]\n  /** @group conversions-anyval-to-java */\n  implicit def boolean2Boolean(x: Boolean): java.lang.Boolean \u003d x.asInstanceOf[java.lang.Boolean]\n\n  /** @group conversions-java-to-anyval */\n  implicit def Byte2byte(x: java.lang.Byte): Byte             \u003d x.asInstanceOf[Byte]\n  /** @group conversions-java-to-anyval */\n  implicit def Short2short(x: java.lang.Short): Short         \u003d x.asInstanceOf[Short]\n  /** @group conversions-java-to-anyval */\n  implicit def Character2char(x: java.lang.Character): Char   \u003d x.asInstanceOf[Char]\n  /** @group conversions-java-to-anyval */\n  implicit def Integer2int(x: java.lang.Integer): Int         \u003d x.asInstanceOf[Int]\n  /** @group conversions-java-to-anyval */\n  implicit def Long2long(x: java.lang.Long): Long             \u003d x.asInstanceOf[Long]\n  /** @group conversions-java-to-anyval */\n  implicit def Float2float(x: java.lang.Float): Float         \u003d x.asInstanceOf[Float]\n  /** @group conversions-java-to-anyval */\n  implicit def Double2double(x: java.lang.Double): Double     \u003d x.asInstanceOf[Double]\n  /** @group conversions-java-to-anyval */\n  implicit def Boolean2boolean(x: java.lang.Boolean): Boolean \u003d x.asInstanceOf[Boolean]\n\n  // Type Constraints --------------------------------------------------------------\n\n  /**\n   * An instance of `A \u003c:\u003c B` witnesses that `A` is a subtype of `B`.\n   * Requiring an implicit argument of the type `A \u003c:\u003c B` encodes\n   * the generalized constraint `A \u003c: B`.\n   *\n   * @note we need a new type constructor `\u003c:\u003c` and evidence `conforms`,\n   * as reusing `Function1` and `identity` leads to ambiguities in\n   * case of type errors (`any2stringadd` is inferred)\n   *\n   * To constrain any abstract type T that\u0027s in scope in a method\u0027s\n   * argument list (not just the method\u0027s own type parameters) simply\n   * add an implicit argument of type `T \u003c:\u003c U`, where `U` is the required\n   * upper bound; or for lower-bounds, use: `L \u003c:\u003c T`, where `L` is the\n   * required lower bound.\n   *\n   * In part contributed by Jason Zaugg.\n   * @group type-constraints\n   */\n  @implicitNotFound(msg \u003d \"Cannot prove that ${From} \u003c:\u003c ${To}.\")\n  sealed abstract class \u003c:\u003c[-From, +To] extends (From \u003d\u003e To) with Serializable\n  private[this] final val singleton_\u003c:\u003c \u003d new \u003c:\u003c[Any,Any] { def apply(x: Any): Any \u003d x }\n  // The dollar prefix is to dodge accidental shadowing of this method\n  // by a user-defined method of the same name (scala/bug#7788).\n  // The collections rely on this method.\n  /** @group type-constraints */\n  implicit def $conforms[A]: A \u003c:\u003c A \u003d singleton_\u003c:\u003c.asInstanceOf[A \u003c:\u003c A]\n\n  @deprecated(\"use `implicitly[T \u003c:\u003c U]` or `identity` instead.\", \"2.11.0\")\n  def conforms[A]: A \u003c:\u003c A \u003d $conforms[A]\n\n  /** An instance of `A \u003d:\u003d B` witnesses that the types `A` and `B` are equal.\n   *\n   * @see `\u003c:\u003c` for expressing subtyping constraints\n   * @group type-constraints\n   */\n  @implicitNotFound(msg \u003d \"Cannot prove that ${From} \u003d:\u003d ${To}.\")\n  sealed abstract class \u003d:\u003d[From, To] extends (From \u003d\u003e To) with Serializable\n  private[this] final val singleton_\u003d:\u003d \u003d new \u003d:\u003d[Any,Any] { def apply(x: Any): Any \u003d x }\n  /** @group type-constraints */\n  object \u003d:\u003d {\n     implicit def tpEquals[A]: A \u003d:\u003d A \u003d singleton_\u003d:\u003d.asInstanceOf[A \u003d:\u003d A]\n  }\n\n  /** A type for which there is always an implicit value.\n   *  @see [[scala.Array$]], method `fallbackCanBuildFrom`\n   */\n  class DummyImplicit\n\n  object DummyImplicit {\n\n    /** An implicit value yielding a `DummyImplicit`.\n     *   @see [[scala.Array$]], method `fallbackCanBuildFrom`\n     */\n    implicit def dummyImplicit: DummyImplicit \u003d new DummyImplicit\n  }\n}\n\nprivate[scala] trait DeprecatedPredef {\n  self: Predef.type \u003d\u003e\n\n  // Deprecated stubs for any who may have been calling these methods directly.\n  @deprecated(\"use `ArrowAssoc`\", \"2.11.0\") def any2ArrowAssoc[A](x: A): ArrowAssoc[A]                                      \u003d new ArrowAssoc(x)\n  @deprecated(\"use `Ensuring`\", \"2.11.0\") def any2Ensuring[A](x: A): Ensuring[A]                                            \u003d new Ensuring(x)\n  @deprecated(\"use `StringFormat`\", \"2.11.0\") def any2stringfmt(x: Any): StringFormat[Any]                                  \u003d new StringFormat(x)\n  @deprecated(\"use `Throwable` directly\", \"2.11.0\") def exceptionWrapper(exc: Throwable)                                    \u003d new RichException(exc)\n  @deprecated(\"use `SeqCharSequence`\", \"2.11.0\") def seqToCharSequence(xs: scala.collection.IndexedSeq[Char]): CharSequence \u003d new SeqCharSequence(xs)\n  @deprecated(\"use `ArrayCharSequence`\", \"2.11.0\") def arrayToCharSequence(xs: Array[Char]): CharSequence                   \u003d new ArrayCharSequence(xs)\n\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readLine(): String                 \u003d StdIn.readLine()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readLine(text: String, args: Any*) \u003d StdIn.readLine(text, args: _*)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readBoolean()                      \u003d StdIn.readBoolean()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readByte()                         \u003d StdIn.readByte()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readShort()                        \u003d StdIn.readShort()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readChar()                         \u003d StdIn.readChar()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readInt()                          \u003d StdIn.readInt()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readLong()                         \u003d StdIn.readLong()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readFloat()                        \u003d StdIn.readFloat()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readDouble()                       \u003d StdIn.readDouble()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf(format: String)              \u003d StdIn.readf(format)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf1(format: String)             \u003d StdIn.readf1(format)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf2(format: String)             \u003d StdIn.readf2(format)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf3(format: String)             \u003d StdIn.readf3(format)\n}\n\n/** The `LowPriorityImplicits` class provides implicit values that\n*  are valid in all Scala compilation units without explicit qualification,\n*  but that are partially overridden by higher-priority conversions in object\n*  `Predef`.\n*\n*  @author  Martin Odersky\n*  @since 2.8\n*/\n// scala/bug#7335 Parents of Predef are defined in the same compilation unit to avoid\n// cyclic reference errors compiling the standard library *without* a previously\n// compiled copy on the classpath.\nprivate[scala] abstract class LowPriorityImplicits {\n  import mutable.WrappedArray\n  import immutable.WrappedString\n\n  /** We prefer the java.lang.* boxed types to these wrappers in\n   *  any potential conflicts.  Conflicts do exist because the wrappers\n   *  need to implement ScalaNumber in order to have a symmetric equals\n   *  method, but that implies implementing java.lang.Number as well.\n   *\n   *  Note - these are inlined because they are value classes, but\n   *  the call to xxxWrapper is not eliminated even though it does nothing.\n   *  Even inlined, every call site does a no-op retrieval of Predef\u0027s MODULE$\n   *  because maybe loading Predef has side effects!\n   */\n  @inline implicit def byteWrapper(x: Byte)       \u003d new runtime.RichByte(x)\n  @inline implicit def shortWrapper(x: Short)     \u003d new runtime.RichShort(x)\n  @inline implicit def intWrapper(x: Int)         \u003d new runtime.RichInt(x)\n  @inline implicit def charWrapper(c: Char)       \u003d new runtime.RichChar(c)\n  @inline implicit def longWrapper(x: Long)       \u003d new runtime.RichLong(x)\n  @inline implicit def floatWrapper(x: Float)     \u003d new runtime.RichFloat(x)\n  @inline implicit def doubleWrapper(x: Double)   \u003d new runtime.RichDouble(x)\n  @inline implicit def booleanWrapper(x: Boolean) \u003d new runtime.RichBoolean(x)\n\n  /** @group conversions-array-to-wrapped-array */\n  implicit def genericWrapArray[T](xs: Array[T]): WrappedArray[T] \u003d\n    if (xs eq null) null\n    else WrappedArray.make(xs)\n\n  // Since the JVM thinks arrays are covariant, one 0-length Array[AnyRef]\n  // is as good as another for all T \u003c: AnyRef.  Instead of creating 100,000,000\n  // unique ones by way of this implicit, let\u0027s share one.\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapRefArray[T \u003c: AnyRef](xs: Array[T]): WrappedArray[T] \u003d {\n    if (xs eq null) null\n    else if (xs.length \u003d\u003d 0) WrappedArray.empty[T]\n    else new WrappedArray.ofRef[T](xs)\n  }\n\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapIntArray(xs: Array[Int]): WrappedArray[Int] \u003d if (xs ne null) new WrappedArray.ofInt(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapDoubleArray(xs: Array[Double]): WrappedArray[Double] \u003d if (xs ne null) new WrappedArray.ofDouble(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapLongArray(xs: Array[Long]): WrappedArray[Long] \u003d if (xs ne null) new WrappedArray.ofLong(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapFloatArray(xs: Array[Float]): WrappedArray[Float] \u003d if (xs ne null) new WrappedArray.ofFloat(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapCharArray(xs: Array[Char]): WrappedArray[Char] \u003d if (xs ne null) new WrappedArray.ofChar(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapByteArray(xs: Array[Byte]): WrappedArray[Byte] \u003d if (xs ne null) new WrappedArray.ofByte(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapShortArray(xs: Array[Short]): WrappedArray[Short] \u003d if (xs ne null) new WrappedArray.ofShort(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapBooleanArray(xs: Array[Boolean]): WrappedArray[Boolean] \u003d if (xs ne null) new WrappedArray.ofBoolean(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapUnitArray(xs: Array[Unit]): WrappedArray[Unit] \u003d if (xs ne null) new WrappedArray.ofUnit(xs) else null\n\n  /** @group conversions-string */\n  implicit def wrapString(s: String): WrappedString \u003d if (s ne null) new WrappedString(s) else null\n  /** @group conversions-string */\n  implicit def unwrapString(ws: WrappedString): String \u003d if (ws ne null) ws.self else null\n\n  implicit def fallbackStringCanBuildFrom[T]: CanBuildFrom[String, T, immutable.IndexedSeq[T]] \u003d\n    new CanBuildFrom[String, T, immutable.IndexedSeq[T]] {\n      def apply(from: String) \u003d immutable.IndexedSeq.newBuilder[T]\n      def apply() \u003d immutable.IndexedSeq.newBuilder[T]\n    }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

2020.11.11 18:51:10 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:51:10 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:51:10 INFO  time: compiled task1-scala in 0.87s
2020.11.11 18:51:17 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:51:17 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:51:17 INFO  time: compiled task1-scala in 0.72s
something's wrong: no file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala in Array[Int]RangePosition(file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala, 368, 368, 378)
2020.11.11 18:51:46 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:51:46 INFO  time: compiled task1-scala in 0.11s
Nov 11, 2020 6:51:57 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Array.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\npackage scala\n\nimport scala.collection.generic._\nimport scala.collection.{ mutable, immutable }\nimport mutable.{ ArrayBuilder, ArraySeq }\nimport scala.reflect.ClassTag\nimport scala.runtime.ScalaRunTime.{ array_apply, array_update }\n\n/** Contains a fallback builder for arrays when the element type\n *  does not have a class tag. In that case a generic array is built.\n */\nclass FallbackArrayBuilding {\n\n  /** A builder factory that generates a generic array.\n   *  Called instead of `Array.newBuilder` if the element type of an array\n   *  does not have a class tag. Note that fallbackBuilder factory\n   *  needs an implicit parameter (otherwise it would not be dominated in\n   *  implicit search by `Array.canBuildFrom`). We make sure that\n   *  implicit search is always successful.\n   */\n  implicit def fallbackCanBuildFrom[T](implicit m: DummyImplicit): CanBuildFrom[Array[_], T, ArraySeq[T]] \u003d\n    new CanBuildFrom[Array[_], T, ArraySeq[T]] {\n      def apply(from: Array[_]) \u003d ArraySeq.newBuilder[T]\n      def apply() \u003d ArraySeq.newBuilder[T]\n    }\n}\n\n/** Utility methods for operating on arrays.\n *  For example:\n *  {{{\n *  val a \u003d Array(1, 2)\n *  val b \u003d Array.ofDim[Int](2)\n *  val c \u003d Array.concat(a, b)\n *  }}}\n *  where the array objects `a`, `b` and `c` have respectively the values\n *  `Array(1, 2)`, `Array(0, 0)` and `Array(1, 2, 0, 0)`.\n *\n *  @author Martin Odersky\n *  @since  1.0\n */\nobject Array extends FallbackArrayBuilding {\n  val emptyBooleanArray \u003d new Array[Boolean](0)\n  val emptyByteArray    \u003d new Array[Byte](0)\n  val emptyCharArray    \u003d new Array[Char](0)\n  val emptyDoubleArray  \u003d new Array[Double](0)\n  val emptyFloatArray   \u003d new Array[Float](0)\n  val emptyIntArray     \u003d new Array[Int](0)\n  val emptyLongArray    \u003d new Array[Long](0)\n  val emptyShortArray   \u003d new Array[Short](0)\n  val emptyObjectArray  \u003d new Array[Object](0)\n\n  implicit def canBuildFrom[T](implicit tag: ClassTag[T]): CanBuildFrom[Array[_], T, Array[T]] \u003d {\n    val cls \u003d tag.runtimeClass\n    (if (cls.isPrimitive) {\n      cls match {\n        case java.lang.Integer.TYPE   \u003d\u003e cbfIntArray\n        case java.lang.Double.TYPE    \u003d\u003e cbfDoubleArray\n        case java.lang.Long.TYPE      \u003d\u003e cbfLongArray\n        case java.lang.Float.TYPE     \u003d\u003e cbfFloatArray\n        case java.lang.Character.TYPE \u003d\u003e cbfCharArray\n        case java.lang.Byte.TYPE      \u003d\u003e cbfByteArray\n        case java.lang.Short.TYPE     \u003d\u003e cbfShortArray\n        case java.lang.Boolean.TYPE   \u003d\u003e cbfBooleanArray\n        case java.lang.Void.TYPE      \u003d\u003e cbfUnitArray\n      }\n    } else if (cls \u003d\u003d ObjectClass) {\n      cbfObjectArray\n    } else {\n      refCBF[T with AnyRef](tag.asInstanceOf[ClassTag[T with AnyRef]])\n    }).asInstanceOf[CanBuildFrom[Array[_], T, Array[T]]]\n  }\n  private[this] val ObjectClass \u003d classOf[Object]\n\n  private[this] val cbfBooleanArray \u003d new CanBuildFrom[Array[_], Boolean, Array[Boolean]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofBoolean()\n    def apply() \u003d new ArrayBuilder.ofBoolean()\n  }\n\n  private[this] val cbfByteArray    \u003d new CanBuildFrom[Array[_], Byte, Array[Byte]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofByte()\n    def apply() \u003d new ArrayBuilder.ofByte()\n  }\n\n  private[this] val cbfCharArray    \u003d new CanBuildFrom[Array[_], Char, Array[Char]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofChar()\n    def apply() \u003d new ArrayBuilder.ofChar()\n  }\n\n  private[this] val cbfDoubleArray  \u003d new CanBuildFrom[Array[_], Double, Array[Double]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofDouble()\n    def apply() \u003d new ArrayBuilder.ofDouble()\n  }\n\n  private[this] val cbfFloatArray   \u003d new CanBuildFrom[Array[_], Float, Array[Float]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofFloat()\n    def apply() \u003d new ArrayBuilder.ofFloat()\n  }\n\n  private[this] val cbfIntArray     \u003d new CanBuildFrom[Array[_], Int, Array[Int]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofInt()\n    def apply() \u003d new ArrayBuilder.ofInt()\n  }\n\n  private[this] val cbfLongArray    \u003d new CanBuildFrom[Array[_], Long, Array[Long]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofLong()\n    def apply() \u003d new ArrayBuilder.ofLong()\n  }\n\n  private[this] val cbfShortArray   \u003d new CanBuildFrom[Array[_], Short, Array[Short]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofShort()\n    def apply() \u003d new ArrayBuilder.ofShort()\n  }\n\n  private[this] val cbfUnitArray    \u003d new CanBuildFrom[Array[_], Unit, Array[Unit]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofUnit()\n    def apply() \u003d new ArrayBuilder.ofUnit()\n  }\n\n  private[this] val cbfObjectArray  \u003d refCBF[Object]\n  private[this] def refCBF[T \u003c: AnyRef](implicit t: ClassTag[T]): CanBuildFrom[Array[_], T, Array[T]] \u003d\n    new CanBuildFrom[Array[_], T, Array[T]] {\n      def apply(from: Array[_]) \u003d new ArrayBuilder.ofRef[T]()(t)\n      def apply() \u003d new ArrayBuilder.ofRef[T]()(t)\n    }\n\n  /**\n   * Returns a new [[scala.collection.mutable.ArrayBuilder]].\n   */\n  def newBuilder[T](implicit t: ClassTag[T]): ArrayBuilder[T] \u003d ArrayBuilder.make[T]()(t)\n\n  private def slowcopy(src : AnyRef,\n                       srcPos : Int,\n                       dest : AnyRef,\n                       destPos : Int,\n                       length : Int) {\n    var i \u003d srcPos\n    var j \u003d destPos\n    val srcUntil \u003d srcPos + length\n    while (i \u003c srcUntil) {\n      array_update(dest, j, array_apply(src, i))\n      i +\u003d 1\n      j +\u003d 1\n    }\n  }\n\n  /** Copy one array to another.\n   *  Equivalent to Java\u0027s\n   *    `System.arraycopy(src, srcPos, dest, destPos, length)`,\n   *  except that this also works for polymorphic and boxed arrays.\n   *\n   *  Note that the passed-in `dest` array will be modified by this call.\n   *\n   *  @param src the source array.\n   *  @param srcPos  starting position in the source array.\n   *  @param dest destination array.\n   *  @param destPos starting position in the destination array.\n   *  @param length the number of array elements to be copied.\n   *\n   *  @see `java.lang.System#arraycopy`\n   */\n  def copy(src: AnyRef, srcPos: Int, dest: AnyRef, destPos: Int, length: Int) {\n    val srcClass \u003d src.getClass\n    if (srcClass.isArray \u0026\u0026 dest.getClass.isAssignableFrom(srcClass))\n      java.lang.System.arraycopy(src, srcPos, dest, destPos, length)\n    else\n      slowcopy(src, srcPos, dest, destPos, length)\n  }\n\n  /** Returns an array of length 0 */\n  def empty[T: ClassTag]: Array[T] \u003d new Array[T](0)\n\n  /** Creates an array with given elements.\n   *\n   *  @param xs the elements to put in the array\n   *  @return an array containing all elements from xs.\n   */\n  // Subject to a compiler optimization in Cleanup.\n  // Array(e0, ..., en) is translated to { val a \u003d new Array(3); a(i) \u003d ei; a }\n  def apply[T: ClassTag](xs: T*): Array[T] \u003d {\n    val array \u003d new Array[T](xs.length)\n    var i \u003d 0\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Boolean` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Boolean, xs: Boolean*): Array[Boolean] \u003d {\n    val array \u003d new Array[Boolean](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Byte` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Byte, xs: Byte*): Array[Byte] \u003d {\n    val array \u003d new Array[Byte](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Short` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Short, xs: Short*): Array[Short] \u003d {\n    val array \u003d new Array[Short](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Char` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Char, xs: Char*): Array[Char] \u003d {\n    val array \u003d new Array[Char](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Int` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Int, xs: Int*): Array[Int] \u003d {\n    val array \u003d new Array[Int](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Long` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Long, xs: Long*): Array[Long] \u003d {\n    val array \u003d new Array[Long](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Float` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Float, xs: Float*): Array[Float] \u003d {\n    val array \u003d new Array[Float](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Double` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Double, xs: Double*): Array[Double] \u003d {\n    val array \u003d new Array[Double](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Unit` objects */\n  def apply(x: Unit, xs: Unit*): Array[Unit] \u003d {\n    val array \u003d new Array[Unit](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates array with given dimensions */\n  def ofDim[T: ClassTag](n1: Int): Array[T] \u003d\n    new Array[T](n1)\n  /** Creates a 2-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int): Array[Array[T]] \u003d {\n    val arr: Array[Array[T]] \u003d (new Array[Array[T]](n1): Array[Array[T]])\n    for (i \u003c- 0 until n1) arr(i) \u003d new Array[T](n2)\n    arr\n    // tabulate(n1)(_ \u003d\u003e ofDim[T](n2))\n  }\n  /** Creates a 3-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int): Array[Array[Array[T]]] \u003d\n    tabulate(n1)(_ \u003d\u003e ofDim[T](n2, n3))\n  /** Creates a 4-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int): Array[Array[Array[Array[T]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e ofDim[T](n2, n3, n4))\n  /** Creates a 5-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int): Array[Array[Array[Array[Array[T]]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e ofDim[T](n2, n3, n4, n5))\n\n  /** Concatenates all arrays into a single array.\n   *\n   *  @param xss the given arrays\n   *  @return   the array created from concatenating `xss`\n   */\n  def concat[T: ClassTag](xss: Array[T]*): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n    b.sizeHint(xss.map(_.length).sum)\n    for (xs \u003c- xss) b ++\u003d xs\n    b.result()\n  }\n\n  /** Returns an array that contains the results of some element computation a number\n   *  of times.\n   *\n   *  Note that this means that `elem` is computed a total of n times:\n   *  {{{\n   * scala\u003e Array.fill(3){ math.random }\n   * res3: Array[Double] \u003d Array(0.365461167592537, 1.550395944913685E-4, 0.7907242137333306)\n   *  }}}\n   *\n   *  @param   n  the number of elements desired\n   *  @param   elem the element computation\n   *  @return an Array of size n, where each element contains the result of computing\n   *  `elem`.\n   */\n  def fill[T: ClassTag](n: Int)(elem: \u003d\u003e T): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n    b.sizeHint(n)\n    var i \u003d 0\n    while (i \u003c n) {\n      b +\u003d elem\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  /** Returns a two-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int)(elem: \u003d\u003e T): Array[Array[T]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2)(elem))\n\n  /** Returns a three-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3nd dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int)(elem: \u003d\u003e T): Array[Array[Array[T]]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2, n3)(elem))\n\n  /** Returns a four-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3nd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int)(elem: \u003d\u003e T): Array[Array[Array[Array[T]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2, n3, n4)(elem))\n\n  /** Returns a five-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3nd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   n5  the number of elements in the 5th dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(elem: \u003d\u003e T): Array[Array[Array[Array[Array[T]]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2, n3, n4, n5)(elem))\n\n  /** Returns an array containing values of a given function over a range of integer\n   *  values starting from 0.\n   *\n   *  @param  n   The number of elements in the array\n   *  @param  f   The function computing element values\n   *  @return A traversable consisting of elements `f(0),f(1), ..., f(n - 1)`\n   */\n  def tabulate[T: ClassTag](n: Int)(f: Int \u003d\u003e T): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n    b.sizeHint(n)\n    var i \u003d 0\n    while (i \u003c n) {\n      b +\u003d f(i)\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  /** Returns a two-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int)(f: (Int, Int) \u003d\u003e T): Array[Array[T]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2)(f(i1, _)))\n\n  /** Returns a three-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3rd dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int)(f: (Int, Int, Int) \u003d\u003e T): Array[Array[Array[T]]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2, n3)(f(i1, _, _)))\n\n  /** Returns a four-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3rd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int)(f: (Int, Int, Int, Int) \u003d\u003e T): Array[Array[Array[Array[T]]]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2, n3, n4)(f(i1, _, _, _)))\n\n  /** Returns a five-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3rd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   n5  the number of elements in the 5th dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(f: (Int, Int, Int, Int, Int) \u003d\u003e T): Array[Array[Array[Array[Array[T]]]]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2, n3, n4, n5)(f(i1, _, _, _, _)))\n\n  /** Returns an array containing a sequence of increasing integers in a range.\n   *\n   *  @param start  the start value of the array\n   *  @param end    the end value of the array, exclusive (in other words, this is the first value \u0027\u0027\u0027not\u0027\u0027\u0027 returned)\n   *  @return  the array with values in range `start, start + 1, ..., end - 1`\n   *  up to, but excluding, `end`.\n   */\n  def range(start: Int, end: Int): Array[Int] \u003d range(start, end, 1)\n\n  /** Returns an array containing equally spaced values in some integer interval.\n   *\n   *  @param start the start value of the array\n   *  @param end   the end value of the array, exclusive (in other words, this is the first value \u0027\u0027\u0027not\u0027\u0027\u0027 returned)\n   *  @param step  the increment value of the array (may not be zero)\n   *  @return      the array with values in `start, start + step, ...` up to, but excluding `end`\n   */\n  def range(start: Int, end: Int, step: Int): Array[Int] \u003d {\n    if (step \u003d\u003d 0) throw new IllegalArgumentException(\"zero step\")\n    val b \u003d newBuilder[Int]\n    b.sizeHint(immutable.Range.count(start, end, step, isInclusive \u003d false))\n\n    var i \u003d start\n    while (if (step \u003c 0) end \u003c i else i \u003c end) {\n      b +\u003d i\n      i +\u003d step\n    }\n    b.result()\n  }\n\n  /** Returns an array containing repeated applications of a function to a start value.\n   *\n   *  @param start the start value of the array\n   *  @param len   the number of elements returned by the array\n   *  @param f     the function that is repeatedly applied\n   *  @return      the array returning `len` values in the sequence `start, f(start), f(f(start)), ...`\n   */\n  def iterate[T: ClassTag](start: T, len: Int)(f: T \u003d\u003e T): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n\n    if (len \u003e 0) {\n      b.sizeHint(len)\n      var acc \u003d start\n      var i \u003d 1\n      b +\u003d acc\n\n      while (i \u003c len) {\n        acc \u003d f(acc)\n        i +\u003d 1\n        b +\u003d acc\n      }\n    }\n    b.result()\n  }\n\n  /** Called in a pattern match like `{ case Array(x,y,z) \u003d\u003e println(\u00273 elements\u0027)}`.\n   *\n   *  @param x the selector value\n   *  @return  sequence wrapped in a [[scala.Some]], if `x` is a Seq, otherwise `None`\n   */\n  def unapplySeq[T](x: Array[T]): Option[IndexedSeq[T]] \u003d\n    if (x \u003d\u003d null) None else Some(x.toIndexedSeq)\n    // !!! the null check should to be necessary, but without it 2241 fails. Seems to be a bug\n    // in pattern matcher.  @PP: I noted in #4364 I think the behavior is correct.\n}\n\n/** Arrays are mutable, indexed collections of values. `Array[T]` is Scala\u0027s representation\n *  for Java\u0027s `T[]`.\n *\n *  {{{\n *  val numbers \u003d Array(1, 2, 3, 4)\n *  val first \u003d numbers(0) // read the first element\n *  numbers(3) \u003d 100 // replace the 4th array element with 100\n *  val biggerNumbers \u003d numbers.map(_ * 2) // multiply all numbers by two\n *  }}}\n *\n *  Arrays make use of two common pieces of Scala syntactic sugar, shown on lines 2 and 3 of the above\n *  example code.\n *  Line 2 is translated into a call to `apply(Int)`, while line 3 is translated into a call to\n *  `update(Int, T)`.\n *\n *  Two implicit conversions exist in [[scala.Predef]] that are frequently applied to arrays: a conversion\n *  to [[scala.collection.mutable.ArrayOps]] (shown on line 4 of the example above) and a conversion\n *  to [[scala.collection.mutable.WrappedArray]] (a subtype of [[scala.collection.Seq]]).\n *  Both types make available many of the standard operations found in the Scala collections API.\n *  The conversion to `ArrayOps` is temporary, as all operations defined on `ArrayOps` return an `Array`,\n *  while the conversion to `WrappedArray` is permanent as all operations return a `WrappedArray`.\n *\n *  The conversion to `ArrayOps` takes priority over the conversion to `WrappedArray`. For instance,\n *  consider the following code:\n *\n *  {{{\n *  val arr \u003d Array(1, 2, 3)\n *  val arrReversed \u003d arr.reverse\n *  val seqReversed : Seq[Int] \u003d arr.reverse\n *  }}}\n *\n *  Value `arrReversed` will be of type `Array[Int]`, with an implicit conversion to `ArrayOps` occurring\n *  to perform the `reverse` operation. The value of `seqReversed`, on the other hand, will be computed\n *  by converting to `WrappedArray` first and invoking the variant of `reverse` that returns another\n *  `WrappedArray`.\n *\n *  @author Martin Odersky\n *  @since  1.0\n *  @see [[http://www.scala-lang.org/files/archive/spec/2.12/ Scala Language Specification]], for in-depth information on the transformations the Scala compiler makes on Arrays (Sections 6.6 and 6.15 respectively.)\n *  @see [[http://docs.scala-lang.org/sips/completed/scala-2-8-arrays.html \"Scala 2.8 Arrays\"]] the Scala Improvement Document detailing arrays since Scala 2.8.\n *  @see [[http://docs.scala-lang.org/overviews/collections/arrays.html \"The Scala 2.8 Collections\u0027 API\"]] section on `Array` by Martin Odersky for more information.\n *  @hideImplicitConversion scala.Predef.booleanArrayOps\n *  @hideImplicitConversion scala.Predef.byteArrayOps\n *  @hideImplicitConversion scala.Predef.charArrayOps\n *  @hideImplicitConversion scala.Predef.doubleArrayOps\n *  @hideImplicitConversion scala.Predef.floatArrayOps\n *  @hideImplicitConversion scala.Predef.intArrayOps\n *  @hideImplicitConversion scala.Predef.longArrayOps\n *  @hideImplicitConversion scala.Predef.refArrayOps\n *  @hideImplicitConversion scala.Predef.shortArrayOps\n *  @hideImplicitConversion scala.Predef.unitArrayOps\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapRefArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapIntArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapDoubleArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapLongArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapFloatArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapCharArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapByteArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapShortArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapBooleanArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapUnitArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.genericWrapArray\n *  @define coll array\n *  @define Coll `Array`\n *  @define orderDependent\n *  @define orderDependentFold\n *  @define mayNotTerminateInf\n *  @define willNotTerminateInf\n *  @define collectExample\n *  @define undefinedorder\n *  @define thatinfo the class of the returned collection. In the standard library configuration,\n *    `That` is either `Array[B]` if an ClassTag is available for B or `ArraySeq[B]` otherwise.\n *  @define zipthatinfo $thatinfo\n *  @define bfinfo an implicit value of class `CanBuildFrom` which determines the result class `That` from the current\n *    representation type `Repr` and the new element type `B`.\n */\nfinal class Array[T](_length: Int) extends java.io.Serializable with java.lang.Cloneable {\n\n  /** The length of the array */\n  def length: Int \u003d throw new Error()\n\n  /** The element at given index.\n   *\n   *  Indices start at `0`; `xs.apply(0)` is the first element of array `xs`.\n   *  Note the indexing syntax `xs(i)` is a shorthand for `xs.apply(i)`.\n   *\n   *  @param    i   the index\n   *  @return       the element at the given index\n   *  @throws       ArrayIndexOutOfBoundsException if `i \u003c 0` or `length \u003c\u003d i`\n   */\n  def apply(i: Int): T \u003d throw new Error()\n\n  /** Update the element at given index.\n   *\n   *  Indices start at `0`; `xs.update(i, x)` replaces the i^th^ element in the array.\n   *  Note the syntax `xs(i) \u003d x` is a shorthand for `xs.update(i, x)`.\n   *\n   *  @param    i   the index\n   *  @param    x   the value to be written at index `i`\n   *  @throws       ArrayIndexOutOfBoundsException if `i \u003c 0` or `length \u003c\u003d i`\n   */\n  def update(i: Int, x: T) { throw new Error() }\n\n  /** Clone the Array.\n   *\n   *  @return A clone of the Array.\n   */\n  override def clone(): Array[T] \u003d throw new Error()\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

2020.11.11 18:51:58 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:51:58 INFO  time: compiled task1-scala in 93ms
2020.11.11 18:52:10 INFO  C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\task1.scala:19:19: stale bloop error: value foreach is not a member of Int
        for (i <- arr.length) sum + arr(i-1)
                  ^^^^^^^^^^
2020.11.11 18:52:10 INFO  C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\task1.scala:19:19: stale bloop error: value foreach is not a member of Int
        for (i <- arr.length) sum + arr(i-1)
                  ^^^^^^^^^^
2020.11.11 18:52:16 INFO  compiling task1-scala (1 scala source)
Nov 11, 2020 6:52:17 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\n// DO NOT EDIT, CHANGES WILL BE LOST\n// This auto-generated code can be modified in \"project/GenerateAnyVals.scala\".\n// Afterwards, running \"sbt generateSources\" regenerates this source file.\n\npackage scala\n\n/** `Int`, a 32-bit signed integer (equivalent to Java\u0027s `int` primitive type) is a\n *  subtype of [[scala.AnyVal]]. Instances of `Int` are not\n *  represented by an object in the underlying runtime system.\n *\n *  There is an implicit conversion from [[scala.Int]] \u003d\u003e [[scala.runtime.RichInt]]\n *  which provides useful non-primitive operations.\n */\nfinal abstract class Int private extends AnyVal {\n  def toByte: Byte\n  def toShort: Short\n  def toChar: Char\n  def toInt: Int\n  def toLong: Long\n  def toFloat: Float\n  def toDouble: Double\n\n  /**\n * Returns the bitwise negation of this value.\n * @example {{{\n * ~5 \u003d\u003d -6\n * // in binary: ~00000101 \u003d\u003d\n * //             11111010\n * }}}\n */\n  def unary_~ : Int\n  /** Returns this value, unmodified. */\n  def unary_+ : Int\n  /** Returns the negation of this value. */\n  def unary_- : Int\n\n  def +(x: String): String\n\n  /**\n  * Returns this value bit-shifted left by the specified number of bits,\n  *         filling in the new right bits with zeroes.\n  * @example {{{ 6 \u003c\u003c 3 \u003d\u003d 48 // in binary: 0110 \u003c\u003c 3 \u003d\u003d 0110000 }}}\n  */\n  def \u003c\u003c(x: Int): Int\n  /**\n  * Returns this value bit-shifted left by the specified number of bits,\n  *         filling in the new right bits with zeroes.\n  * @example {{{ 6 \u003c\u003c 3 \u003d\u003d 48 // in binary: 0110 \u003c\u003c 3 \u003d\u003d 0110000 }}}\n  */\n  @deprecated(\"shifting a value by a `Long` argument is deprecated (except when the value is a `Long`).\\nCall `toInt` on the argument to maintain the current behavior and avoid the deprecation warning.\", \"2.12.7\")\n  def \u003c\u003c(x: Long): Int\n  /**\n  * Returns this value bit-shifted right by the specified number of bits,\n  *         filling the new left bits with zeroes.\n  * @example {{{ 21 \u003e\u003e\u003e 3 \u003d\u003d 2 // in binary: 010101 \u003e\u003e\u003e 3 \u003d\u003d 010 }}}\n  * @example {{{\n  * -21 \u003e\u003e\u003e 3 \u003d\u003d 536870909\n  * // in binary: 11111111 11111111 11111111 11101011 \u003e\u003e\u003e 3 \u003d\u003d\n  * //            00011111 11111111 11111111 11111101\n  * }}}\n  */\n  def \u003e\u003e\u003e(x: Int): Int\n  /**\n  * Returns this value bit-shifted right by the specified number of bits,\n  *         filling the new left bits with zeroes.\n  * @example {{{ 21 \u003e\u003e\u003e 3 \u003d\u003d 2 // in binary: 010101 \u003e\u003e\u003e 3 \u003d\u003d 010 }}}\n  * @example {{{\n  * -21 \u003e\u003e\u003e 3 \u003d\u003d 536870909\n  * // in binary: 11111111 11111111 11111111 11101011 \u003e\u003e\u003e 3 \u003d\u003d\n  * //            00011111 11111111 11111111 11111101\n  * }}}\n  */\n  @deprecated(\"shifting a value by a `Long` argument is deprecated (except when the value is a `Long`).\\nCall `toInt` on the argument to maintain the current behavior and avoid the deprecation warning.\", \"2.12.7\")\n  def \u003e\u003e\u003e(x: Long): Int\n  /**\n  * Returns this value bit-shifted right by the specified number of bits,\n  *         filling in the left bits with the same value as the left-most bit of this.\n  *         The effect of this is to retain the sign of the value.\n  * @example {{{\n  * -21 \u003e\u003e 3 \u003d\u003d -3\n  * // in binary: 11111111 11111111 11111111 11101011 \u003e\u003e 3 \u003d\u003d\n  * //            11111111 11111111 11111111 11111101\n  * }}}\n  */\n  def \u003e\u003e(x: Int): Int\n  /**\n  * Returns this value bit-shifted right by the specified number of bits,\n  *         filling in the left bits with the same value as the left-most bit of this.\n  *         The effect of this is to retain the sign of the value.\n  * @example {{{\n  * -21 \u003e\u003e 3 \u003d\u003d -3\n  * // in binary: 11111111 11111111 11111111 11101011 \u003e\u003e 3 \u003d\u003d\n  * //            11111111 11111111 11111111 11111101\n  * }}}\n  */\n  @deprecated(\"shifting a value by a `Long` argument is deprecated (except when the value is a `Long`).\\nCall `toInt` on the argument to maintain the current behavior and avoid the deprecation warning.\", \"2.12.7\")\n  def \u003e\u003e(x: Long): Int\n\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Byte): Boolean\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Short): Boolean\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Char): Boolean\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Int): Boolean\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Long): Boolean\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Float): Boolean\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Double): Boolean\n\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Byte): Boolean\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Short): Boolean\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Char): Boolean\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Int): Boolean\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Long): Boolean\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Float): Boolean\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Double): Boolean\n\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Byte): Boolean\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Short): Boolean\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Char): Boolean\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Int): Boolean\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Long): Boolean\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Float): Boolean\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Double): Boolean\n\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Byte): Boolean\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Short): Boolean\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Char): Boolean\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Int): Boolean\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Long): Boolean\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Float): Boolean\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Double): Boolean\n\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Byte): Boolean\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Short): Boolean\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Char): Boolean\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Int): Boolean\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Long): Boolean\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Float): Boolean\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Double): Boolean\n\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Byte): Boolean\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Short): Boolean\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Char): Boolean\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Int): Boolean\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Long): Boolean\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Float): Boolean\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Double): Boolean\n\n  /**\n  * Returns the bitwise OR of this value and `x`.\n  * @example {{{\n  * (0xf0 | 0xaa) \u003d\u003d 0xfa\n  * // in binary:   11110000\n  * //            | 10101010\n  * //              --------\n  * //              11111010\n  * }}}\n  */\n  def |(x: Byte): Int\n  /**\n  * Returns the bitwise OR of this value and `x`.\n  * @example {{{\n  * (0xf0 | 0xaa) \u003d\u003d 0xfa\n  * // in binary:   11110000\n  * //            | 10101010\n  * //              --------\n  * //              11111010\n  * }}}\n  */\n  def |(x: Short): Int\n  /**\n  * Returns the bitwise OR of this value and `x`.\n  * @example {{{\n  * (0xf0 | 0xaa) \u003d\u003d 0xfa\n  * // in binary:   11110000\n  * //            | 10101010\n  * //              --------\n  * //              11111010\n  * }}}\n  */\n  def |(x: Char): Int\n  /**\n  * Returns the bitwise OR of this value and `x`.\n  * @example {{{\n  * (0xf0 | 0xaa) \u003d\u003d 0xfa\n  * // in binary:   11110000\n  * //            | 10101010\n  * //              --------\n  * //              11111010\n  * }}}\n  */\n  def |(x: Int): Int\n  /**\n  * Returns the bitwise OR of this value and `x`.\n  * @example {{{\n  * (0xf0 | 0xaa) \u003d\u003d 0xfa\n  * // in binary:   11110000\n  * //            | 10101010\n  * //              --------\n  * //              11111010\n  * }}}\n  */\n  def |(x: Long): Long\n\n  /**\n  * Returns the bitwise AND of this value and `x`.\n  * @example {{{\n  * (0xf0 \u0026 0xaa) \u003d\u003d 0xa0\n  * // in binary:   11110000\n  * //            \u0026 10101010\n  * //              --------\n  * //              10100000\n  * }}}\n  */\n  def \u0026(x: Byte): Int\n  /**\n  * Returns the bitwise AND of this value and `x`.\n  * @example {{{\n  * (0xf0 \u0026 0xaa) \u003d\u003d 0xa0\n  * // in binary:   11110000\n  * //            \u0026 10101010\n  * //              --------\n  * //              10100000\n  * }}}\n  */\n  def \u0026(x: Short): Int\n  /**\n  * Returns the bitwise AND of this value and `x`.\n  * @example {{{\n  * (0xf0 \u0026 0xaa) \u003d\u003d 0xa0\n  * // in binary:   11110000\n  * //            \u0026 10101010\n  * //              --------\n  * //              10100000\n  * }}}\n  */\n  def \u0026(x: Char): Int\n  /**\n  * Returns the bitwise AND of this value and `x`.\n  * @example {{{\n  * (0xf0 \u0026 0xaa) \u003d\u003d 0xa0\n  * // in binary:   11110000\n  * //            \u0026 10101010\n  * //              --------\n  * //              10100000\n  * }}}\n  */\n  def \u0026(x: Int): Int\n  /**\n  * Returns the bitwise AND of this value and `x`.\n  * @example {{{\n  * (0xf0 \u0026 0xaa) \u003d\u003d 0xa0\n  * // in binary:   11110000\n  * //            \u0026 10101010\n  * //              --------\n  * //              10100000\n  * }}}\n  */\n  def \u0026(x: Long): Long\n\n  /**\n  * Returns the bitwise XOR of this value and `x`.\n  * @example {{{\n  * (0xf0 ^ 0xaa) \u003d\u003d 0x5a\n  * // in binary:   11110000\n  * //            ^ 10101010\n  * //              --------\n  * //              01011010\n  * }}}\n  */\n  def ^(x: Byte): Int\n  /**\n  * Returns the bitwise XOR of this value and `x`.\n  * @example {{{\n  * (0xf0 ^ 0xaa) \u003d\u003d 0x5a\n  * // in binary:   11110000\n  * //            ^ 10101010\n  * //              --------\n  * //              01011010\n  * }}}\n  */\n  def ^(x: Short): Int\n  /**\n  * Returns the bitwise XOR of this value and `x`.\n  * @example {{{\n  * (0xf0 ^ 0xaa) \u003d\u003d 0x5a\n  * // in binary:   11110000\n  * //            ^ 10101010\n  * //              --------\n  * //              01011010\n  * }}}\n  */\n  def ^(x: Char): Int\n  /**\n  * Returns the bitwise XOR of this value and `x`.\n  * @example {{{\n  * (0xf0 ^ 0xaa) \u003d\u003d 0x5a\n  * // in binary:   11110000\n  * //            ^ 10101010\n  * //              --------\n  * //              01011010\n  * }}}\n  */\n  def ^(x: Int): Int\n  /**\n  * Returns the bitwise XOR of this value and `x`.\n  * @example {{{\n  * (0xf0 ^ 0xaa) \u003d\u003d 0x5a\n  * // in binary:   11110000\n  * //            ^ 10101010\n  * //              --------\n  * //              01011010\n  * }}}\n  */\n  def ^(x: Long): Long\n\n  /** Returns the sum of this value and `x`. */\n  def +(x: Byte): Int\n  /** Returns the sum of this value and `x`. */\n  def +(x: Short): Int\n  /** Returns the sum of this value and `x`. */\n  def +(x: Char): Int\n  /** Returns the sum of this value and `x`. */\n  def +(x: Int): Int\n  /** Returns the sum of this value and `x`. */\n  def +(x: Long): Long\n  /** Returns the sum of this value and `x`. */\n  def +(x: Float): Float\n  /** Returns the sum of this value and `x`. */\n  def +(x: Double): Double\n\n  /** Returns the difference of this value and `x`. */\n  def -(x: Byte): Int\n  /** Returns the difference of this value and `x`. */\n  def -(x: Short): Int\n  /** Returns the difference of this value and `x`. */\n  def -(x: Char): Int\n  /** Returns the difference of this value and `x`. */\n  def -(x: Int): Int\n  /** Returns the difference of this value and `x`. */\n  def -(x: Long): Long\n  /** Returns the difference of this value and `x`. */\n  def -(x: Float): Float\n  /** Returns the difference of this value and `x`. */\n  def -(x: Double): Double\n\n  /** Returns the product of this value and `x`. */\n  def *(x: Byte): Int\n  /** Returns the product of this value and `x`. */\n  def *(x: Short): Int\n  /** Returns the product of this value and `x`. */\n  def *(x: Char): Int\n  /** Returns the product of this value and `x`. */\n  def *(x: Int): Int\n  /** Returns the product of this value and `x`. */\n  def *(x: Long): Long\n  /** Returns the product of this value and `x`. */\n  def *(x: Float): Float\n  /** Returns the product of this value and `x`. */\n  def *(x: Double): Double\n\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Byte): Int\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Short): Int\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Char): Int\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Int): Int\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Long): Long\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Float): Float\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Double): Double\n\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Byte): Int\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Short): Int\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Char): Int\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Int): Int\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Long): Long\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Float): Float\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Double): Double\n\n  // Provide a more specific return type for Scaladoc\n  override def getClass(): Class[Int] \u003d ???\n}\n\nobject Int extends AnyValCompanion {\n  /** The smallest value representable as an Int. */\n  final val MinValue \u003d java.lang.Integer.MIN_VALUE\n\n  /** The largest value representable as an Int. */\n  final val MaxValue \u003d java.lang.Integer.MAX_VALUE\n\n  /** Transform a value type into a boxed reference type.\n   *\n   *  Runtime implementation determined by `scala.runtime.BoxesRunTime.boxToInteger`. See [[https://github.com/scala/scala src/library/scala/runtime/BoxesRunTime.java]].\n   *\n   *  @param  x   the Int to be boxed\n   *  @return     a java.lang.Integer offering `x` as its underlying value.\n   */\n  def box(x: Int): java.lang.Integer \u003d ???\n\n  /** Transform a boxed type into a value type.  Note that this\n   *  method is not typesafe: it accepts any Object, but will throw\n   *  an exception if the argument is not a java.lang.Integer.\n   *\n   *  Runtime implementation determined by `scala.runtime.BoxesRunTime.unboxToInt`. See [[https://github.com/scala/scala src/library/scala/runtime/BoxesRunTime.java]].\n   *\n   *  @param  x   the java.lang.Integer to be unboxed.\n   *  @throws     ClassCastException  if the argument is not a java.lang.Integer\n   *  @return     the Int resulting from calling intValue() on `x`\n   */\n  def unbox(x: java.lang.Object): Int \u003d ???\n\n  /** The String representation of the scala.Int companion object. */\n  override def toString \u003d \"object scala.Int\"\n  /** Language mandated coercions from Int to \"wider\" types. */\n  import scala.language.implicitConversions\n  implicit def int2long(x: Int): Long \u003d x.toLong\n  implicit def int2float(x: Int): Float \u003d x.toFloat\n  implicit def int2double(x: Int): Double \u003d x.toDouble\n}\n\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

2020.11.11 18:52:16 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:52:16 INFO  time: compiled task1-scala in 0.6s
2020.11.11 18:52:23 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:52:23 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:52:23 INFO  time: compiled task1-scala in 0.6s
2020.11.11 18:52:29 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:52:29 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:52:29 INFO  time: compiled task1-scala in 0.6s
2020.11.11 18:53:06 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:53:06 INFO  time: compiled task1-scala in 96ms
2020.11.11 18:53:08 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:53:08 INFO  time: compiled task1-scala in 92ms
2020.11.11 18:53:33 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:53:33 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:53:33 INFO  time: compiled task1-scala in 0.61s
2020.11.11 18:53:53 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:53:53 INFO  time: compiled task1-scala in 0.12s
2020.11.11 18:54:02 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:54:02 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:54:02 INFO  time: compiled task1-scala in 0.62s
2020.11.11 18:54:10 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:54:10 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:54:10 INFO  time: compiled task1-scala in 0.6s
something's wrong: no file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala in Array[Int]RangePosition(file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala, 511, 511, 521)
2020.11.11 18:54:36 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:54:36 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:54:36 INFO  time: compiled task1-scala in 0.62s
2020.11.11 18:54:41 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:54:41 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:54:41 INFO  time: compiled task1-scala in 0.6s
2020.11.11 18:55:00 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:55:00 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:55:00 INFO  time: compiled task1-scala in 0.71s
Nov 11, 2020 6:55:08 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Array.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\npackage scala\n\nimport scala.collection.generic._\nimport scala.collection.{ mutable, immutable }\nimport mutable.{ ArrayBuilder, ArraySeq }\nimport scala.reflect.ClassTag\nimport scala.runtime.ScalaRunTime.{ array_apply, array_update }\n\n/** Contains a fallback builder for arrays when the element type\n *  does not have a class tag. In that case a generic array is built.\n */\nclass FallbackArrayBuilding {\n\n  /** A builder factory that generates a generic array.\n   *  Called instead of `Array.newBuilder` if the element type of an array\n   *  does not have a class tag. Note that fallbackBuilder factory\n   *  needs an implicit parameter (otherwise it would not be dominated in\n   *  implicit search by `Array.canBuildFrom`). We make sure that\n   *  implicit search is always successful.\n   */\n  implicit def fallbackCanBuildFrom[T](implicit m: DummyImplicit): CanBuildFrom[Array[_], T, ArraySeq[T]] \u003d\n    new CanBuildFrom[Array[_], T, ArraySeq[T]] {\n      def apply(from: Array[_]) \u003d ArraySeq.newBuilder[T]\n      def apply() \u003d ArraySeq.newBuilder[T]\n    }\n}\n\n/** Utility methods for operating on arrays.\n *  For example:\n *  {{{\n *  val a \u003d Array(1, 2)\n *  val b \u003d Array.ofDim[Int](2)\n *  val c \u003d Array.concat(a, b)\n *  }}}\n *  where the array objects `a`, `b` and `c` have respectively the values\n *  `Array(1, 2)`, `Array(0, 0)` and `Array(1, 2, 0, 0)`.\n *\n *  @author Martin Odersky\n *  @since  1.0\n */\nobject Array extends FallbackArrayBuilding {\n  val emptyBooleanArray \u003d new Array[Boolean](0)\n  val emptyByteArray    \u003d new Array[Byte](0)\n  val emptyCharArray    \u003d new Array[Char](0)\n  val emptyDoubleArray  \u003d new Array[Double](0)\n  val emptyFloatArray   \u003d new Array[Float](0)\n  val emptyIntArray     \u003d new Array[Int](0)\n  val emptyLongArray    \u003d new Array[Long](0)\n  val emptyShortArray   \u003d new Array[Short](0)\n  val emptyObjectArray  \u003d new Array[Object](0)\n\n  implicit def canBuildFrom[T](implicit tag: ClassTag[T]): CanBuildFrom[Array[_], T, Array[T]] \u003d {\n    val cls \u003d tag.runtimeClass\n    (if (cls.isPrimitive) {\n      cls match {\n        case java.lang.Integer.TYPE   \u003d\u003e cbfIntArray\n        case java.lang.Double.TYPE    \u003d\u003e cbfDoubleArray\n        case java.lang.Long.TYPE      \u003d\u003e cbfLongArray\n        case java.lang.Float.TYPE     \u003d\u003e cbfFloatArray\n        case java.lang.Character.TYPE \u003d\u003e cbfCharArray\n        case java.lang.Byte.TYPE      \u003d\u003e cbfByteArray\n        case java.lang.Short.TYPE     \u003d\u003e cbfShortArray\n        case java.lang.Boolean.TYPE   \u003d\u003e cbfBooleanArray\n        case java.lang.Void.TYPE      \u003d\u003e cbfUnitArray\n      }\n    } else if (cls \u003d\u003d ObjectClass) {\n      cbfObjectArray\n    } else {\n      refCBF[T with AnyRef](tag.asInstanceOf[ClassTag[T with AnyRef]])\n    }).asInstanceOf[CanBuildFrom[Array[_], T, Array[T]]]\n  }\n  private[this] val ObjectClass \u003d classOf[Object]\n\n  private[this] val cbfBooleanArray \u003d new CanBuildFrom[Array[_], Boolean, Array[Boolean]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofBoolean()\n    def apply() \u003d new ArrayBuilder.ofBoolean()\n  }\n\n  private[this] val cbfByteArray    \u003d new CanBuildFrom[Array[_], Byte, Array[Byte]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofByte()\n    def apply() \u003d new ArrayBuilder.ofByte()\n  }\n\n  private[this] val cbfCharArray    \u003d new CanBuildFrom[Array[_], Char, Array[Char]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofChar()\n    def apply() \u003d new ArrayBuilder.ofChar()\n  }\n\n  private[this] val cbfDoubleArray  \u003d new CanBuildFrom[Array[_], Double, Array[Double]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofDouble()\n    def apply() \u003d new ArrayBuilder.ofDouble()\n  }\n\n  private[this] val cbfFloatArray   \u003d new CanBuildFrom[Array[_], Float, Array[Float]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofFloat()\n    def apply() \u003d new ArrayBuilder.ofFloat()\n  }\n\n  private[this] val cbfIntArray     \u003d new CanBuildFrom[Array[_], Int, Array[Int]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofInt()\n    def apply() \u003d new ArrayBuilder.ofInt()\n  }\n\n  private[this] val cbfLongArray    \u003d new CanBuildFrom[Array[_], Long, Array[Long]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofLong()\n    def apply() \u003d new ArrayBuilder.ofLong()\n  }\n\n  private[this] val cbfShortArray   \u003d new CanBuildFrom[Array[_], Short, Array[Short]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofShort()\n    def apply() \u003d new ArrayBuilder.ofShort()\n  }\n\n  private[this] val cbfUnitArray    \u003d new CanBuildFrom[Array[_], Unit, Array[Unit]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofUnit()\n    def apply() \u003d new ArrayBuilder.ofUnit()\n  }\n\n  private[this] val cbfObjectArray  \u003d refCBF[Object]\n  private[this] def refCBF[T \u003c: AnyRef](implicit t: ClassTag[T]): CanBuildFrom[Array[_], T, Array[T]] \u003d\n    new CanBuildFrom[Array[_], T, Array[T]] {\n      def apply(from: Array[_]) \u003d new ArrayBuilder.ofRef[T]()(t)\n      def apply() \u003d new ArrayBuilder.ofRef[T]()(t)\n    }\n\n  /**\n   * Returns a new [[scala.collection.mutable.ArrayBuilder]].\n   */\n  def newBuilder[T](implicit t: ClassTag[T]): ArrayBuilder[T] \u003d ArrayBuilder.make[T]()(t)\n\n  private def slowcopy(src : AnyRef,\n                       srcPos : Int,\n                       dest : AnyRef,\n                       destPos : Int,\n                       length : Int) {\n    var i \u003d srcPos\n    var j \u003d destPos\n    val srcUntil \u003d srcPos + length\n    while (i \u003c srcUntil) {\n      array_update(dest, j, array_apply(src, i))\n      i +\u003d 1\n      j +\u003d 1\n    }\n  }\n\n  /** Copy one array to another.\n   *  Equivalent to Java\u0027s\n   *    `System.arraycopy(src, srcPos, dest, destPos, length)`,\n   *  except that this also works for polymorphic and boxed arrays.\n   *\n   *  Note that the passed-in `dest` array will be modified by this call.\n   *\n   *  @param src the source array.\n   *  @param srcPos  starting position in the source array.\n   *  @param dest destination array.\n   *  @param destPos starting position in the destination array.\n   *  @param length the number of array elements to be copied.\n   *\n   *  @see `java.lang.System#arraycopy`\n   */\n  def copy(src: AnyRef, srcPos: Int, dest: AnyRef, destPos: Int, length: Int) {\n    val srcClass \u003d src.getClass\n    if (srcClass.isArray \u0026\u0026 dest.getClass.isAssignableFrom(srcClass))\n      java.lang.System.arraycopy(src, srcPos, dest, destPos, length)\n    else\n      slowcopy(src, srcPos, dest, destPos, length)\n  }\n\n  /** Returns an array of length 0 */\n  def empty[T: ClassTag]: Array[T] \u003d new Array[T](0)\n\n  /** Creates an array with given elements.\n   *\n   *  @param xs the elements to put in the array\n   *  @return an array containing all elements from xs.\n   */\n  // Subject to a compiler optimization in Cleanup.\n  // Array(e0, ..., en) is translated to { val a \u003d new Array(3); a(i) \u003d ei; a }\n  def apply[T: ClassTag](xs: T*): Array[T] \u003d {\n    val array \u003d new Array[T](xs.length)\n    var i \u003d 0\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Boolean` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Boolean, xs: Boolean*): Array[Boolean] \u003d {\n    val array \u003d new Array[Boolean](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Byte` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Byte, xs: Byte*): Array[Byte] \u003d {\n    val array \u003d new Array[Byte](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Short` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Short, xs: Short*): Array[Short] \u003d {\n    val array \u003d new Array[Short](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Char` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Char, xs: Char*): Array[Char] \u003d {\n    val array \u003d new Array[Char](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Int` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Int, xs: Int*): Array[Int] \u003d {\n    val array \u003d new Array[Int](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Long` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Long, xs: Long*): Array[Long] \u003d {\n    val array \u003d new Array[Long](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Float` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Float, xs: Float*): Array[Float] \u003d {\n    val array \u003d new Array[Float](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Double` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Double, xs: Double*): Array[Double] \u003d {\n    val array \u003d new Array[Double](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Unit` objects */\n  def apply(x: Unit, xs: Unit*): Array[Unit] \u003d {\n    val array \u003d new Array[Unit](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates array with given dimensions */\n  def ofDim[T: ClassTag](n1: Int): Array[T] \u003d\n    new Array[T](n1)\n  /** Creates a 2-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int): Array[Array[T]] \u003d {\n    val arr: Array[Array[T]] \u003d (new Array[Array[T]](n1): Array[Array[T]])\n    for (i \u003c- 0 until n1) arr(i) \u003d new Array[T](n2)\n    arr\n    // tabulate(n1)(_ \u003d\u003e ofDim[T](n2))\n  }\n  /** Creates a 3-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int): Array[Array[Array[T]]] \u003d\n    tabulate(n1)(_ \u003d\u003e ofDim[T](n2, n3))\n  /** Creates a 4-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int): Array[Array[Array[Array[T]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e ofDim[T](n2, n3, n4))\n  /** Creates a 5-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int): Array[Array[Array[Array[Array[T]]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e ofDim[T](n2, n3, n4, n5))\n\n  /** Concatenates all arrays into a single array.\n   *\n   *  @param xss the given arrays\n   *  @return   the array created from concatenating `xss`\n   */\n  def concat[T: ClassTag](xss: Array[T]*): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n    b.sizeHint(xss.map(_.length).sum)\n    for (xs \u003c- xss) b ++\u003d xs\n    b.result()\n  }\n\n  /** Returns an array that contains the results of some element computation a number\n   *  of times.\n   *\n   *  Note that this means that `elem` is computed a total of n times:\n   *  {{{\n   * scala\u003e Array.fill(3){ math.random }\n   * res3: Array[Double] \u003d Array(0.365461167592537, 1.550395944913685E-4, 0.7907242137333306)\n   *  }}}\n   *\n   *  @param   n  the number of elements desired\n   *  @param   elem the element computation\n   *  @return an Array of size n, where each element contains the result of computing\n   *  `elem`.\n   */\n  def fill[T: ClassTag](n: Int)(elem: \u003d\u003e T): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n    b.sizeHint(n)\n    var i \u003d 0\n    while (i \u003c n) {\n      b +\u003d elem\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  /** Returns a two-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int)(elem: \u003d\u003e T): Array[Array[T]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2)(elem))\n\n  /** Returns a three-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3nd dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int)(elem: \u003d\u003e T): Array[Array[Array[T]]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2, n3)(elem))\n\n  /** Returns a four-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3nd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int)(elem: \u003d\u003e T): Array[Array[Array[Array[T]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2, n3, n4)(elem))\n\n  /** Returns a five-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3nd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   n5  the number of elements in the 5th dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(elem: \u003d\u003e T): Array[Array[Array[Array[Array[T]]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2, n3, n4, n5)(elem))\n\n  /** Returns an array containing values of a given function over a range of integer\n   *  values starting from 0.\n   *\n   *  @param  n   The number of elements in the array\n   *  @param  f   The function computing element values\n   *  @return A traversable consisting of elements `f(0),f(1), ..., f(n - 1)`\n   */\n  def tabulate[T: ClassTag](n: Int)(f: Int \u003d\u003e T): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n    b.sizeHint(n)\n    var i \u003d 0\n    while (i \u003c n) {\n      b +\u003d f(i)\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  /** Returns a two-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int)(f: (Int, Int) \u003d\u003e T): Array[Array[T]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2)(f(i1, _)))\n\n  /** Returns a three-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3rd dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int)(f: (Int, Int, Int) \u003d\u003e T): Array[Array[Array[T]]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2, n3)(f(i1, _, _)))\n\n  /** Returns a four-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3rd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int)(f: (Int, Int, Int, Int) \u003d\u003e T): Array[Array[Array[Array[T]]]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2, n3, n4)(f(i1, _, _, _)))\n\n  /** Returns a five-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3rd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   n5  the number of elements in the 5th dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(f: (Int, Int, Int, Int, Int) \u003d\u003e T): Array[Array[Array[Array[Array[T]]]]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2, n3, n4, n5)(f(i1, _, _, _, _)))\n\n  /** Returns an array containing a sequence of increasing integers in a range.\n   *\n   *  @param start  the start value of the array\n   *  @param end    the end value of the array, exclusive (in other words, this is the first value \u0027\u0027\u0027not\u0027\u0027\u0027 returned)\n   *  @return  the array with values in range `start, start + 1, ..., end - 1`\n   *  up to, but excluding, `end`.\n   */\n  def range(start: Int, end: Int): Array[Int] \u003d range(start, end, 1)\n\n  /** Returns an array containing equally spaced values in some integer interval.\n   *\n   *  @param start the start value of the array\n   *  @param end   the end value of the array, exclusive (in other words, this is the first value \u0027\u0027\u0027not\u0027\u0027\u0027 returned)\n   *  @param step  the increment value of the array (may not be zero)\n   *  @return      the array with values in `start, start + step, ...` up to, but excluding `end`\n   */\n  def range(start: Int, end: Int, step: Int): Array[Int] \u003d {\n    if (step \u003d\u003d 0) throw new IllegalArgumentException(\"zero step\")\n    val b \u003d newBuilder[Int]\n    b.sizeHint(immutable.Range.count(start, end, step, isInclusive \u003d false))\n\n    var i \u003d start\n    while (if (step \u003c 0) end \u003c i else i \u003c end) {\n      b +\u003d i\n      i +\u003d step\n    }\n    b.result()\n  }\n\n  /** Returns an array containing repeated applications of a function to a start value.\n   *\n   *  @param start the start value of the array\n   *  @param len   the number of elements returned by the array\n   *  @param f     the function that is repeatedly applied\n   *  @return      the array returning `len` values in the sequence `start, f(start), f(f(start)), ...`\n   */\n  def iterate[T: ClassTag](start: T, len: Int)(f: T \u003d\u003e T): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n\n    if (len \u003e 0) {\n      b.sizeHint(len)\n      var acc \u003d start\n      var i \u003d 1\n      b +\u003d acc\n\n      while (i \u003c len) {\n        acc \u003d f(acc)\n        i +\u003d 1\n        b +\u003d acc\n      }\n    }\n    b.result()\n  }\n\n  /** Called in a pattern match like `{ case Array(x,y,z) \u003d\u003e println(\u00273 elements\u0027)}`.\n   *\n   *  @param x the selector value\n   *  @return  sequence wrapped in a [[scala.Some]], if `x` is a Seq, otherwise `None`\n   */\n  def unapplySeq[T](x: Array[T]): Option[IndexedSeq[T]] \u003d\n    if (x \u003d\u003d null) None else Some(x.toIndexedSeq)\n    // !!! the null check should to be necessary, but without it 2241 fails. Seems to be a bug\n    // in pattern matcher.  @PP: I noted in #4364 I think the behavior is correct.\n}\n\n/** Arrays are mutable, indexed collections of values. `Array[T]` is Scala\u0027s representation\n *  for Java\u0027s `T[]`.\n *\n *  {{{\n *  val numbers \u003d Array(1, 2, 3, 4)\n *  val first \u003d numbers(0) // read the first element\n *  numbers(3) \u003d 100 // replace the 4th array element with 100\n *  val biggerNumbers \u003d numbers.map(_ * 2) // multiply all numbers by two\n *  }}}\n *\n *  Arrays make use of two common pieces of Scala syntactic sugar, shown on lines 2 and 3 of the above\n *  example code.\n *  Line 2 is translated into a call to `apply(Int)`, while line 3 is translated into a call to\n *  `update(Int, T)`.\n *\n *  Two implicit conversions exist in [[scala.Predef]] that are frequently applied to arrays: a conversion\n *  to [[scala.collection.mutable.ArrayOps]] (shown on line 4 of the example above) and a conversion\n *  to [[scala.collection.mutable.WrappedArray]] (a subtype of [[scala.collection.Seq]]).\n *  Both types make available many of the standard operations found in the Scala collections API.\n *  The conversion to `ArrayOps` is temporary, as all operations defined on `ArrayOps` return an `Array`,\n *  while the conversion to `WrappedArray` is permanent as all operations return a `WrappedArray`.\n *\n *  The conversion to `ArrayOps` takes priority over the conversion to `WrappedArray`. For instance,\n *  consider the following code:\n *\n *  {{{\n *  val arr \u003d Array(1, 2, 3)\n *  val arrReversed \u003d arr.reverse\n *  val seqReversed : Seq[Int] \u003d arr.reverse\n *  }}}\n *\n *  Value `arrReversed` will be of type `Array[Int]`, with an implicit conversion to `ArrayOps` occurring\n *  to perform the `reverse` operation. The value of `seqReversed`, on the other hand, will be computed\n *  by converting to `WrappedArray` first and invoking the variant of `reverse` that returns another\n *  `WrappedArray`.\n *\n *  @author Martin Odersky\n *  @since  1.0\n *  @see [[http://www.scala-lang.org/files/archive/spec/2.12/ Scala Language Specification]], for in-depth information on the transformations the Scala compiler makes on Arrays (Sections 6.6 and 6.15 respectively.)\n *  @see [[http://docs.scala-lang.org/sips/completed/scala-2-8-arrays.html \"Scala 2.8 Arrays\"]] the Scala Improvement Document detailing arrays since Scala 2.8.\n *  @see [[http://docs.scala-lang.org/overviews/collections/arrays.html \"The Scala 2.8 Collections\u0027 API\"]] section on `Array` by Martin Odersky for more information.\n *  @hideImplicitConversion scala.Predef.booleanArrayOps\n *  @hideImplicitConversion scala.Predef.byteArrayOps\n *  @hideImplicitConversion scala.Predef.charArrayOps\n *  @hideImplicitConversion scala.Predef.doubleArrayOps\n *  @hideImplicitConversion scala.Predef.floatArrayOps\n *  @hideImplicitConversion scala.Predef.intArrayOps\n *  @hideImplicitConversion scala.Predef.longArrayOps\n *  @hideImplicitConversion scala.Predef.refArrayOps\n *  @hideImplicitConversion scala.Predef.shortArrayOps\n *  @hideImplicitConversion scala.Predef.unitArrayOps\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapRefArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapIntArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapDoubleArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapLongArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapFloatArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapCharArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapByteArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapShortArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapBooleanArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapUnitArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.genericWrapArray\n *  @define coll array\n *  @define Coll `Array`\n *  @define orderDependent\n *  @define orderDependentFold\n *  @define mayNotTerminateInf\n *  @define willNotTerminateInf\n *  @define collectExample\n *  @define undefinedorder\n *  @define thatinfo the class of the returned collection. In the standard library configuration,\n *    `That` is either `Array[B]` if an ClassTag is available for B or `ArraySeq[B]` otherwise.\n *  @define zipthatinfo $thatinfo\n *  @define bfinfo an implicit value of class `CanBuildFrom` which determines the result class `That` from the current\n *    representation type `Repr` and the new element type `B`.\n */\nfinal class Array[T](_length: Int) extends java.io.Serializable with java.lang.Cloneable {\n\n  /** The length of the array */\n  def length: Int \u003d throw new Error()\n\n  /** The element at given index.\n   *\n   *  Indices start at `0`; `xs.apply(0)` is the first element of array `xs`.\n   *  Note the indexing syntax `xs(i)` is a shorthand for `xs.apply(i)`.\n   *\n   *  @param    i   the index\n   *  @return       the element at the given index\n   *  @throws       ArrayIndexOutOfBoundsException if `i \u003c 0` or `length \u003c\u003d i`\n   */\n  def apply(i: Int): T \u003d throw new Error()\n\n  /** Update the element at given index.\n   *\n   *  Indices start at `0`; `xs.update(i, x)` replaces the i^th^ element in the array.\n   *  Note the syntax `xs(i) \u003d x` is a shorthand for `xs.update(i, x)`.\n   *\n   *  @param    i   the index\n   *  @param    x   the value to be written at index `i`\n   *  @throws       ArrayIndexOutOfBoundsException if `i \u003c 0` or `length \u003c\u003d i`\n   */\n  def update(i: Int, x: T) { throw new Error() }\n\n  /** Clone the Array.\n   *\n   *  @return A clone of the Array.\n   */\n  override def clone(): Array[T] \u003d throw new Error()\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

2020.11.11 18:55:08 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:55:08 INFO  time: compiled task1-scala in 0.11s
2020.11.11 18:55:46 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:55:46 INFO  time: compiled task1-scala in 0.11s
2020.11.11 18:56:25 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:56:25 INFO  time: compiled task1-scala in 0.12s
2020.11.11 18:56:43 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:56:43 INFO  time: compiled task1-scala in 0.12s
2020.11.11 18:56:49 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:56:49 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:56:49 INFO  time: compiled task1-scala in 0.64s
Nov 11, 2020 6:57:06 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/ArrayOps.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\npackage scala\npackage collection\n\nimport java.lang.Math.{max, min}\nimport java.util.Arrays\n\nimport scala.Predef.{ // unimport all array-related implicit conversions to avoid triggering them accidentally\n  genericArrayOps \u003d\u003e _,\n  booleanArrayOps \u003d\u003e _,\n  byteArrayOps \u003d\u003e _,\n  charArrayOps \u003d\u003e _,\n  doubleArrayOps \u003d\u003e _,\n  floatArrayOps \u003d\u003e _,\n  intArrayOps \u003d\u003e _,\n  longArrayOps \u003d\u003e _,\n  refArrayOps \u003d\u003e _,\n  shortArrayOps \u003d\u003e _,\n  unitArrayOps \u003d\u003e _,\n  genericWrapArray \u003d\u003e _,\n  wrapRefArray \u003d\u003e _,\n  wrapIntArray \u003d\u003e _,\n  wrapDoubleArray \u003d\u003e _,\n  wrapLongArray \u003d\u003e _,\n  wrapFloatArray \u003d\u003e _,\n  wrapCharArray \u003d\u003e _,\n  wrapByteArray \u003d\u003e _,\n  wrapShortArray \u003d\u003e _,\n  wrapBooleanArray \u003d\u003e _,\n  wrapUnitArray \u003d\u003e _,\n  wrapString \u003d\u003e _,\n  copyArrayToImmutableIndexedSeq \u003d\u003e _,\n  _\n}\nimport scala.collection.Stepper.EfficientSplit\nimport scala.collection.immutable.Range\nimport scala.collection.mutable.ArrayBuilder\nimport scala.math.Ordering\nimport scala.reflect.ClassTag\nimport scala.util.Sorting\n\nobject ArrayOps {\n\n  @SerialVersionUID(3L)\n  private class ArrayView[A](xs: Array[A]) extends AbstractIndexedSeqView[A] {\n    def length \u003d xs.length\n    def apply(n: Int) \u003d xs(n)\n    override def toString: String \u003d immutable.ArraySeq.unsafeWrapArray(xs).mkString(\"ArrayView(\", \", \", \")\")\n  }\n\n  /** A lazy filtered array. No filtering is applied until one of `foreach`, `map` or `flatMap` is called. */\n  class WithFilter[A](p: A \u003d\u003e Boolean, xs: Array[A]) {\n\n    /** Apply `f` to each element for its side effects.\n      * Note: [U] parameter needed to help scalac\u0027s type inference.\n      */\n    def foreach[U](f: A \u003d\u003e U): Unit \u003d {\n      val len \u003d xs.length\n      var i \u003d 0\n      while(i \u003c len) {\n        val x \u003d xs(i)\n        if(p(x)) f(x)\n        i +\u003d 1\n      }\n    }\n\n    /** Builds a new array by applying a function to all elements of this array.\n      *\n      *  @param f      the function to apply to each element.\n      *  @tparam B     the element type of the returned array.\n      *  @return       a new array resulting from applying the given function\n      *                `f` to each element of this array and collecting the results.\n      */\n    def map[B: ClassTag](f: A \u003d\u003e B): Array[B] \u003d {\n      val b \u003d ArrayBuilder.make[B]\n      var i \u003d 0\n      while (i \u003c xs.length) {\n        val x \u003d xs(i)\n        if(p(x)) b +\u003d f(x)\n        i \u003d i + 1\n      }\n      b.result()\n    }\n\n    /** Builds a new array by applying a function to all elements of this array\n      * and using the elements of the resulting collections.\n      *\n      *  @param f      the function to apply to each element.\n      *  @tparam B     the element type of the returned array.\n      *  @return       a new array resulting from applying the given collection-valued function\n      *                `f` to each element of this array and concatenating the results.\n      */\n    def flatMap[B: ClassTag](f: A \u003d\u003e IterableOnce[B]): Array[B] \u003d {\n      val b \u003d ArrayBuilder.make[B]\n      var i \u003d 0\n      while(i \u003c xs.length) {\n        val x \u003d xs(i)\n        if(p(x)) b ++\u003d f(xs(i))\n        i +\u003d 1\n      }\n      b.result()\n    }\n\n    def flatMap[BS, B](f: A \u003d\u003e BS)(implicit asIterable: BS \u003d\u003e Iterable[B], m: ClassTag[B]): Array[B] \u003d\n      flatMap[B](x \u003d\u003e asIterable(f(x)))\n\n    /** Creates a new non-strict filter which combines this filter with the given predicate. */\n    def withFilter(q: A \u003d\u003e Boolean): WithFilter[A] \u003d new WithFilter[A](a \u003d\u003e p(a) \u0026\u0026 q(a), xs)\n  }\n\n  @SerialVersionUID(3L)\n  private[collection] final class ArrayIterator[@specialized(Specializable.Everything) A](xs: Array[A]) extends AbstractIterator[A] with Serializable {\n    private[this] var pos \u003d 0\n    private[this] val len \u003d xs.length\n    override def knownSize \u003d len - pos\n    def hasNext: Boolean \u003d pos \u003c len\n    def next(): A \u003d try {\n      val r \u003d xs(pos)\n      pos +\u003d 1\n      r\n    } catch { case _: ArrayIndexOutOfBoundsException \u003d\u003e Iterator.empty.next() }\n    override def drop(n: Int): Iterator[A] \u003d {\n      if (n \u003e 0) pos \u003d Math.min(xs.length, pos + n)\n      this\n    }\n  }\n\n  @SerialVersionUID(3L)\n  private final class ReverseIterator[@specialized(Specializable.Everything) A](xs: Array[A]) extends AbstractIterator[A] with Serializable {\n    private[this] var pos \u003d xs.length-1\n    def hasNext: Boolean \u003d pos \u003e\u003d 0\n    def next(): A \u003d try {\n      val r \u003d xs(pos)\n      pos -\u003d 1\n      r\n    } catch { case _: ArrayIndexOutOfBoundsException \u003d\u003e Iterator.empty.next() }\n\n    override def drop(n: Int): Iterator[A] \u003d {\n      if (n \u003e 0) pos \u003d Math.max( -1, pos - n)\n      this\n    }\n  }\n\n  @SerialVersionUID(3L)\n  private final class GroupedIterator[A](xs: Array[A], groupSize: Int) extends AbstractIterator[Array[A]] with Serializable {\n    private[this] var pos \u003d 0\n    def hasNext: Boolean \u003d pos \u003c xs.length\n    def next(): Array[A] \u003d {\n      if(pos \u003e\u003d xs.length) throw new NoSuchElementException\n      val r \u003d new ArrayOps(xs).slice(pos, pos+groupSize)\n      pos +\u003d groupSize\n      r\n    }\n  }\n\n  /** The cut-off point for the array size after which we switch from `Sorting.stableSort` to\n    * an implementation that copies the data to a boxed representation for use with `Arrays.sort`.\n    */\n  private final val MaxStableSortLength \u003d 300\n}\n\n/** This class serves as a wrapper for `Array`s with many of the operations found in\n  *  indexed sequences. Where needed, instances of arrays are implicitly converted\n  *  into this class. There is generally no reason to create an instance explicitly or use\n  *  an `ArrayOps` type. It is better to work with plain `Array` types instead and rely on\n  *  the implicit conversion to `ArrayOps` when calling a method (which does not actually\n  *  allocate an instance of `ArrayOps` because it is a value class).\n  *\n  *  Neither `Array` nor `ArrayOps` are proper collection types\n  *  (i.e. they do not extend `Iterable` or even `IterableOnce`). `mutable.ArraySeq` and\n  *  `immutable.ArraySeq` serve this purpose.\n  *\n  *  The difference between this class and `ArraySeq`s is that calling transformer methods such as\n  *  `filter` and `map` will yield an array, whereas an `ArraySeq` will remain an `ArraySeq`.\n  *\n  *  @tparam A   type of the elements contained in this array.\n  */\nfinal class ArrayOps[A](private val xs: Array[A]) extends AnyVal {\n\n  @`inline` private[this] implicit def elemTag: ClassTag[A] \u003d ClassTag(xs.getClass.getComponentType)\n\n  /** The size of this array.\n    *\n    *  @return    the number of elements in this array.\n    */\n  @`inline` def size: Int \u003d xs.length\n\n  /** The size of this array.\n    *\n    *  @return    the number of elements in this array.\n    */\n  @`inline` def knownSize: Int \u003d xs.length\n\n  /** Tests whether the array is empty.\n    *\n    *  @return    `true` if the array contains no elements, `false` otherwise.\n    */\n  @`inline` def isEmpty: Boolean \u003d xs.length \u003d\u003d 0\n\n  /** Tests whether the array is not empty.\n    *\n    *  @return    `true` if the array contains at least one element, `false` otherwise.\n    */\n  @`inline` def nonEmpty: Boolean \u003d xs.length !\u003d 0\n\n  /** Selects the first element of this array.\n    *\n    *  @return  the first element of this array.\n    *  @throws NoSuchElementException if the array is empty.\n    */\n  def head: A \u003d try xs.apply(0) catch { case _: ArrayIndexOutOfBoundsException \u003d\u003e throw new NoSuchElementException(\"head of empty array\") }\n\n  /** Selects the last element.\n    *\n    * @return The last element of this array.\n    * @throws NoSuchElementException If the array is empty.\n    */\n  def last: A \u003d try xs.apply(xs.length-1) catch { case _: ArrayIndexOutOfBoundsException \u003d\u003e throw new NoSuchElementException(\"last of empty array\") }\n\n  /** Optionally selects the first element.\n    *\n    *  @return  the first element of this array if it is nonempty,\n    *           `None` if it is empty.\n    */\n  def headOption: Option[A] \u003d if(isEmpty) None else Some(head)\n\n  /** Optionally selects the last element.\n    *\n    *  @return  the last element of this array$ if it is nonempty,\n    *           `None` if it is empty.\n    */\n  def lastOption: Option[A] \u003d if(isEmpty) None else Some(last)\n\n  /** Compares the size of this array to a test value.\n    *\n    *   @param   otherSize the test value that gets compared with the size.\n    *   @return  A value `x` where\n    *   {{{\n    *        x \u003c  0       if this.size \u003c  otherSize\n    *        x \u003d\u003d 0       if this.size \u003d\u003d otherSize\n    *        x \u003e  0       if this.size \u003e  otherSize\n    *   }}}\n    */\n  def sizeCompare(otherSize: Int): Int \u003d Integer.compare(xs.length, otherSize)\n\n  /** Compares the length of this array to a test value.\n    *\n    *   @param   len   the test value that gets compared with the length.\n    *   @return  A value `x` where\n    *   {{{\n    *        x \u003c  0       if this.length \u003c  len\n    *        x \u003d\u003d 0       if this.length \u003d\u003d len\n    *        x \u003e  0       if this.length \u003e  len\n    *   }}}\n    */\n  def lengthCompare(len: Int): Int \u003d Integer.compare(xs.length, len)\n\n  /** Method mirroring [[SeqOps.sizeIs]] for consistency, except it returns an `Int`\n    * because `size` is known and comparison is constant-time.\n    *\n    * These operations are equivalent to [[sizeCompare(Int) `sizeCompare(Int)`]], and\n    * allow the following more readable usages:\n    *\n    * {{{\n    * this.sizeIs \u003c size     // this.sizeCompare(size) \u003c 0\n    * this.sizeIs \u003c\u003d size    // this.sizeCompare(size) \u003c\u003d 0\n    * this.sizeIs \u003d\u003d size    // this.sizeCompare(size) \u003d\u003d 0\n    * this.sizeIs !\u003d size    // this.sizeCompare(size) !\u003d 0\n    * this.sizeIs \u003e\u003d size    // this.sizeCompare(size) \u003e\u003d 0\n    * this.sizeIs \u003e size     // this.sizeCompare(size) \u003e 0\n    * }}}\n    */\n  def sizeIs: Int \u003d xs.length\n\n  /** Method mirroring [[SeqOps.lengthIs]] for consistency, except it returns an `Int`\n    * because `length` is known and comparison is constant-time.\n    *\n    * These operations are equivalent to [[lengthCompare(Int) `lengthCompare(Int)`]], and\n    * allow the following more readable usages:\n    *\n    * {{{\n    * this.lengthIs \u003c len     // this.lengthCompare(len) \u003c 0\n    * this.lengthIs \u003c\u003d len    // this.lengthCompare(len) \u003c\u003d 0\n    * this.lengthIs \u003d\u003d len    // this.lengthCompare(len) \u003d\u003d 0\n    * this.lengthIs !\u003d len    // this.lengthCompare(len) !\u003d 0\n    * this.lengthIs \u003e\u003d len    // this.lengthCompare(len) \u003e\u003d 0\n    * this.lengthIs \u003e len     // this.lengthCompare(len) \u003e 0\n    * }}}\n    */\n  def lengthIs: Int \u003d xs.length\n\n  /** Selects an interval of elements. The returned array is made up\n    * of all elements `x` which satisfy the invariant:\n    * {{{\n    *   from \u003c\u003d indexOf(x) \u003c until\n    * }}}\n    *\n    *  @param from   the lowest index to include from this array.\n    *  @param until  the lowest index to EXCLUDE from this array.\n    *  @return  an array containing the elements greater than or equal to\n    *           index `from` extending up to (but not including) index `until`\n    *           of this array.\n    */\n  def slice(from: Int, until: Int): Array[A] \u003d {\n    import java.util.Arrays.copyOfRange\n    val lo \u003d max(from, 0)\n    val hi \u003d min(until, xs.length)\n    if (hi \u003e lo) {\n      ((xs: Array[_]) match {\n        case x: Array[AnyRef]     \u003d\u003e copyOfRange(x, lo, hi)\n        case x: Array[Int]        \u003d\u003e copyOfRange(x, lo, hi)\n        case x: Array[Double]     \u003d\u003e copyOfRange(x, lo, hi)\n        case x: Array[Long]       \u003d\u003e copyOfRange(x, lo, hi)\n        case x: Array[Float]      \u003d\u003e copyOfRange(x, lo, hi)\n        case x: Array[Char]       \u003d\u003e copyOfRange(x, lo, hi)\n        case x: Array[Byte]       \u003d\u003e copyOfRange(x, lo, hi)\n        case x: Array[Short]      \u003d\u003e copyOfRange(x, lo, hi)\n        case x: Array[Boolean]    \u003d\u003e copyOfRange(x, lo, hi)\n      }).asInstanceOf[Array[A]]\n    } else new Array[A](0)\n  }\n\n  /** The rest of the array without its first element. */\n  def tail: Array[A] \u003d\n    if(xs.length \u003d\u003d 0) throw new UnsupportedOperationException(\"tail of empty array\") else slice(1, xs.length)\n\n  /** The initial part of the array without its last element. */\n  def init: Array[A] \u003d\n    if(xs.length \u003d\u003d 0) throw new UnsupportedOperationException(\"init of empty array\") else slice(0, xs.length-1)\n\n  /** Iterates over the tails of this array. The first value will be this\n    * array and the final one will be an empty array, with the intervening\n    * values the results of successive applications of `tail`.\n    *\n    *  @return   an iterator over all the tails of this array\n    */\n  def tails: Iterator[Array[A]] \u003d iterateUntilEmpty(xs \u003d\u003e new ArrayOps(xs).tail)\n\n  /** Iterates over the inits of this array. The first value will be this\n    * array and the final one will be an empty array, with the intervening\n    * values the results of successive applications of `init`.\n    *\n    *  @return  an iterator over all the inits of this array\n    */\n  def inits: Iterator[Array[A]] \u003d iterateUntilEmpty(xs \u003d\u003e new ArrayOps(xs).init)\n\n  // A helper for tails and inits.\n  private[this] def iterateUntilEmpty(f: Array[A] \u003d\u003e Array[A]): Iterator[Array[A]] \u003d\n    Iterator.iterate(xs)(f).takeWhile(x \u003d\u003e x.length !\u003d 0) ++ Iterator.single(Array.empty[A])\n\n  /** An array containing the first `n` elements of this array. */\n  def take(n: Int): Array[A] \u003d slice(0, n)\n\n  /** The rest of the array without its `n` first elements. */\n  def drop(n: Int): Array[A] \u003d slice(n, xs.length)\n\n  /** An array containing the last `n` elements of this array. */\n  def takeRight(n: Int): Array[A] \u003d drop(xs.length - max(n, 0))\n\n  /** The rest of the array without its `n` last elements. */\n  def dropRight(n: Int): Array[A] \u003d take(xs.length - max(n, 0))\n\n  /** Takes longest prefix of elements that satisfy a predicate.\n    *\n    *  @param   p  The predicate used to test elements.\n    *  @return  the longest prefix of this array whose elements all satisfy\n    *           the predicate `p`.\n    */\n  def takeWhile(p: A \u003d\u003e Boolean): Array[A] \u003d {\n    val i \u003d indexWhere(x \u003d\u003e !p(x))\n    val hi \u003d if(i \u003c 0) xs.length else i\n    slice(0, hi)\n  }\n\n  /** Drops longest prefix of elements that satisfy a predicate.\n    *\n    *  @param   p  The predicate used to test elements.\n    *  @return  the longest suffix of this array whose first element\n    *           does not satisfy the predicate `p`.\n    */\n  def dropWhile(p: A \u003d\u003e Boolean): Array[A] \u003d {\n    val i \u003d indexWhere(x \u003d\u003e !p(x))\n    val lo \u003d if(i \u003c 0) xs.length else i\n    slice(lo, xs.length)\n  }\n\n  def iterator: Iterator[A] \u003d\n    ((xs: Any) match {\n      case xs: Array[AnyRef]  \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case xs: Array[Int]     \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case xs: Array[Double]  \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case xs: Array[Long]    \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case xs: Array[Float]   \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case xs: Array[Char]    \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case xs: Array[Byte]    \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case xs: Array[Short]   \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case xs: Array[Boolean] \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case xs: Array[Unit]    \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case null               \u003d\u003e throw new NullPointerException\n    }).asInstanceOf[Iterator[A]]\n\n  def stepper[S \u003c: Stepper[_]](implicit shape: StepperShape[A, S]): S with EfficientSplit \u003d {\n    import convert.impl._\n    val s \u003d shape.shape match {\n      case StepperShape.ReferenceShape \u003d\u003e (xs: Any) match {\n        case bs: Array[Boolean] \u003d\u003e new BoxedBooleanArrayStepper(bs, 0, xs.length)\n        case _ \u003d\u003e new ObjectArrayStepper[AnyRef](xs.asInstanceOf[Array[AnyRef ]], 0, xs.length)\n      }\n      case StepperShape.IntShape    \u003d\u003e new IntArrayStepper           (xs.asInstanceOf[Array[Int    ]], 0, xs.length)\n      case StepperShape.LongShape   \u003d\u003e new LongArrayStepper          (xs.asInstanceOf[Array[Long   ]], 0, xs.length)\n      case StepperShape.DoubleShape \u003d\u003e new DoubleArrayStepper        (xs.asInstanceOf[Array[Double ]], 0, xs.length)\n      case StepperShape.ByteShape   \u003d\u003e new WidenedByteArrayStepper   (xs.asInstanceOf[Array[Byte   ]], 0, xs.length)\n      case StepperShape.ShortShape  \u003d\u003e new WidenedShortArrayStepper  (xs.asInstanceOf[Array[Short  ]], 0, xs.length)\n      case StepperShape.CharShape   \u003d\u003e new WidenedCharArrayStepper   (xs.asInstanceOf[Array[Char   ]], 0, xs.length)\n      case StepperShape.FloatShape  \u003d\u003e new WidenedFloatArrayStepper  (xs.asInstanceOf[Array[Float  ]], 0, xs.length)\n    }\n    s.asInstanceOf[S with EfficientSplit]\n  }\n\n  /** Partitions elements in fixed size arrays.\n    *  @see [[scala.collection.Iterator]], method `grouped`\n    *\n    *  @param size the number of elements per group\n    *  @return An iterator producing arrays of size `size`, except the\n    *          last will be less than size `size` if the elements don\u0027t divide evenly.\n    */\n  def grouped(size: Int): Iterator[Array[A]] \u003d new ArrayOps.GroupedIterator[A](xs, size)\n\n  /** Splits this array into a prefix/suffix pair according to a predicate.\n    *\n    *  Note: `c span p`  is equivalent to (but more efficient than)\n    *  `(c takeWhile p, c dropWhile p)`, provided the evaluation of the\n    *  predicate `p` does not cause any side-effects.\n    *\n    *  @param p the test predicate\n    *  @return  a pair consisting of the longest prefix of this array whose\n    *           elements all satisfy `p`, and the rest of this array.\n    */\n  def span(p: A \u003d\u003e Boolean): (Array[A], Array[A]) \u003d {\n    val i \u003d indexWhere(x \u003d\u003e !p(x))\n    val idx \u003d if(i \u003c 0) xs.length else i\n    (slice(0, idx), slice(idx, xs.length))\n  }\n\n  /** Splits this array into two at a given position.\n    * Note: `c splitAt n` is equivalent to `(c take n, c drop n)`.\n    *\n    *  @param n the position at which to split.\n    *  @return  a pair of arrays consisting of the first `n`\n    *           elements of this array, and the other elements.\n    */\n  def splitAt(n: Int): (Array[A], Array[A]) \u003d (take(n), drop(n))\n\n  /** A pair of, first, all elements that satisfy predicate `p` and, second, all elements that do not. */\n  def partition(p: A \u003d\u003e Boolean): (Array[A], Array[A]) \u003d {\n    val res1, res2 \u003d ArrayBuilder.make[A]\n    var i \u003d 0\n    while(i \u003c xs.length) {\n      val x \u003d xs(i)\n      (if(p(x)) res1 else res2) +\u003d x\n      i +\u003d 1\n    }\n    (res1.result(), res2.result())\n  }\n\n  /** Applies a function `f` to each element of the array and returns a pair of arrays: the first one\n    *  made of those values returned by `f` that were wrapped in [[scala.util.Left]], and the second\n    *  one made of those wrapped in [[scala.util.Right]].\n    *\n    *  Example:\n    *  {{{\n    *    val xs \u003d Array(1, \"one\", 2, \"two\", 3, \"three\") partitionMap {\n    *     case i: Int \u003d\u003e Left(i)\n    *     case s: String \u003d\u003e Right(s)\n    *    }\n    *    // xs \u003d\u003d (Array(1, 2, 3),\n    *    //        Array(one, two, three))\n    *  }}}\n    *\n    *  @tparam A1  the element type of the first resulting collection\n    *  @tparam A2  the element type of the second resulting collection\n    *  @param f    the \u0027split function\u0027 mapping the elements of this array to an [[scala.util.Either]]\n    *\n    *  @return     a pair of arrays: the first one made of those values returned by `f` that were wrapped in [[scala.util.Left]], \n    *              and the second one made of those wrapped in [[scala.util.Right]]. */\n  def partitionMap[A1: ClassTag, A2: ClassTag](f: A \u003d\u003e Either[A1, A2]): (Array[A1], Array[A2]) \u003d {\n    val res1 \u003d ArrayBuilder.make[A1]\n    val res2 \u003d ArrayBuilder.make[A2]\n    var i \u003d 0\n    while(i \u003c xs.length) {\n      f(xs(i)) match {\n        case Left(x) \u003d\u003e res1 +\u003d x\n        case Right(x) \u003d\u003e res2 +\u003d x\n      }\n      i +\u003d 1\n    }\n    (res1.result(), res2.result())\n  }\n\n  /** Returns a new array with the elements in reversed order. */\n  @inline def reverse: Array[A] \u003d {\n    val len \u003d xs.length\n    val res \u003d new Array[A](len)\n    var i \u003d 0\n    while(i \u003c len) {\n      res(len-i-1) \u003d xs(i)\n      i +\u003d 1\n    }\n    res\n  }\n\n  /** An iterator yielding elements in reversed order.\n    *\n    * Note: `xs.reverseIterator` is the same as `xs.reverse.iterator` but implemented more efficiently.\n    *\n    *  @return  an iterator yielding the elements of this array in reversed order\n    */\n  def reverseIterator: Iterator[A] \u003d\n    ((xs: Any) match {\n      case xs: Array[AnyRef]  \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case xs: Array[Int]     \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case xs: Array[Double]  \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case xs: Array[Long]    \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case xs: Array[Float]   \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case xs: Array[Char]    \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case xs: Array[Byte]    \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case xs: Array[Short]   \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case xs: Array[Boolean] \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case xs: Array[Unit]    \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case null               \u003d\u003e throw new NullPointerException\n    }).asInstanceOf[Iterator[A]]\n\n  /** Selects all elements of this array which satisfy a predicate.\n    *\n    *  @param p  the predicate used to test elements.\n    *  @return   a new array consisting of all elements of this array that satisfy the given predicate `p`.\n    */\n  def filter(p: A \u003d\u003e Boolean): Array[A] \u003d {\n    val res \u003d ArrayBuilder.make[A]\n    var i \u003d 0\n    while(i \u003c xs.length) {\n      val x \u003d xs(i)\n      if(p(x)) res +\u003d x\n      i +\u003d 1\n    }\n    res.result()\n  }\n\n  /** Selects all elements of this array which do not satisfy a predicate.\n    *\n    *  @param p     the predicate used to test elements.\n    *  @return      a new array consisting of all elements of this array that do not satisfy the given predicate `p`.\n    */\n  def filterNot(p: A \u003d\u003e Boolean): Array[A] \u003d filter(x \u003d\u003e !p(x))\n\n  /** Sorts this array according to an Ordering.\n    *\n    *  The sort is stable. That is, elements that are equal (as determined by\n    *  `lt`) appear in the same order in the sorted sequence as in the original.\n    *\n    *  @see [[scala.math.Ordering]]\n    *\n    *  @param  ord the ordering to be used to compare elements.\n    *  @return     an array consisting of the elements of this array\n    *              sorted according to the ordering `ord`.\n    */\n  def sorted[B \u003e: A](implicit ord: Ordering[B]): Array[A] \u003d {\n    val len \u003d xs.length\n    def boxed \u003d if(len \u003c ArrayOps.MaxStableSortLength) {\n      val a \u003d xs.clone()\n      Sorting.stableSort(a)(ord.asInstanceOf[Ordering[A]])\n      a\n    } else {\n      val a \u003d Array.copyAs[AnyRef](xs, len)(ClassTag.AnyRef)\n      Arrays.sort(a, ord.asInstanceOf[Ordering[AnyRef]])\n      Array.copyAs[A](a, len)\n    }\n    if(len \u003c\u003d 1) xs.clone()\n    else ((xs: Array[_]) match {\n      case xs: Array[AnyRef] \u003d\u003e\n        val a \u003d Arrays.copyOf(xs, len); Arrays.sort(a, ord.asInstanceOf[Ordering[AnyRef]]); a\n      case xs: Array[Int] \u003d\u003e\n        if(ord eq Ordering.Int) { val a \u003d Arrays.copyOf(xs, len); Arrays.sort(a); a }\n        else boxed\n      case xs: Array[Long] \u003d\u003e\n        if(ord eq Ordering.Long) { val a \u003d Arrays.copyOf(xs, len); Arrays.sort(a); a }\n        else boxed\n      case xs: Array[Char] \u003d\u003e\n        if(ord eq Ordering.Char) { val a \u003d Arrays.copyOf(xs, len); Arrays.sort(a); a }\n        else boxed\n      case xs: Array[Byte] \u003d\u003e\n        if(ord eq Ordering.Byte) { val a \u003d Arrays.copyOf(xs, len); Arrays.sort(a); a }\n        else boxed\n      case xs: Array[Short] \u003d\u003e\n        if(ord eq Ordering.Short) { val a \u003d Arrays.copyOf(xs, len); Arrays.sort(a); a }\n        else boxed\n      case xs: Array[Boolean] \u003d\u003e\n        if(ord eq Ordering.Boolean) { val a \u003d Arrays.copyOf(xs, len); Sorting.stableSort(a); a }\n        else boxed\n      case xs \u003d\u003e boxed\n    }).asInstanceOf[Array[A]]\n  }\n\n  /** Sorts this array according to a comparison function.\n    *\n    *  The sort is stable. That is, elements that are equal (as determined by\n    *  `lt`) appear in the same order in the sorted sequence as in the original.\n    *\n    *  @param  lt  the comparison function which tests whether\n    *              its first argument precedes its second argument in\n    *              the desired ordering.\n    *  @return     an array consisting of the elements of this array\n    *              sorted according to the comparison function `lt`.\n    */\n  def sortWith(lt: (A, A) \u003d\u003e Boolean): Array[A] \u003d sorted(Ordering.fromLessThan(lt))\n\n  /** Sorts this array according to the Ordering which results from transforming\n    *  an implicitly given Ordering with a transformation function.\n    *\n    *  @see [[scala.math.Ordering]]\n    *  @param   f the transformation function mapping elements\n    *           to some other domain `B`.\n    *  @param   ord the ordering assumed on domain `B`.\n    *  @tparam  B the target type of the transformation `f`, and the type where\n    *           the ordering `ord` is defined.\n    *  @return  an array consisting of the elements of this array\n    *           sorted according to the ordering where `x \u003c y` if\n    *           `ord.lt(f(x), f(y))`.\n    */\n  def sortBy[B](f: A \u003d\u003e B)(implicit ord: Ordering[B]): Array[A] \u003d sorted(ord on f)\n\n  /** Creates a non-strict filter of this array.\n    *\n    *  Note: the difference between `c filter p` and `c withFilter p` is that\n    *        the former creates a new array, whereas the latter only\n    *        restricts the domain of subsequent `map`, `flatMap`, `foreach`,\n    *        and `withFilter` operations.\n    *\n    *  @param p   the predicate used to test elements.\n    *  @return    an object of class `ArrayOps.WithFilter`, which supports\n    *             `map`, `flatMap`, `foreach`, and `withFilter` operations.\n    *             All these operations apply to those elements of this array\n    *             which satisfy the predicate `p`.\n    */\n  def withFilter(p: A \u003d\u003e Boolean): ArrayOps.WithFilter[A] \u003d new ArrayOps.WithFilter[A](p, xs)\n\n  /** Finds index of first occurrence of some value in this array after or at some start index.\n    *\n    *  @param   elem   the element value to search for.\n    *  @param   from   the start index\n    *  @return  the index `\u003e\u003d from` of the first element of this array that is equal (as determined by `\u003d\u003d`)\n    *           to `elem`, or `-1`, if none exists.\n    */\n  def indexOf(elem: A, from: Int \u003d 0): Int \u003d {\n    var i \u003d from\n    while(i \u003c xs.length) {\n      if(elem \u003d\u003d xs(i)) return i\n      i +\u003d 1\n    }\n    -1\n  }\n\n  /** Finds index of the first element satisfying some predicate after or at some start index.\n    *\n    *  @param   p     the predicate used to test elements.\n    *  @param   from  the start index\n    *  @return  the index `\u003e\u003d from` of the first element of this array that satisfies the predicate `p`,\n    *           or `-1`, if none exists.\n    */\n  def indexWhere(@deprecatedName(\"f\", \"2.13.3\") p: A \u003d\u003e Boolean, from: Int \u003d 0): Int \u003d {\n    var i \u003d from\n    while(i \u003c xs.length) {\n      if(p(xs(i))) return i\n      i +\u003d 1\n    }\n    -1\n  }\n\n  /** Finds index of last occurrence of some value in this array before or at a given end index.\n    *\n    *  @param   elem   the element value to search for.\n    *  @param   end    the end index.\n    *  @return  the index `\u003c\u003d end` of the last element of this array that is equal (as determined by `\u003d\u003d`)\n    *           to `elem`, or `-1`, if none exists.\n    */\n  def lastIndexOf(elem: A, end: Int \u003d xs.length - 1): Int \u003d {\n    var i \u003d min(end, xs.length-1)\n    while(i \u003e\u003d 0) {\n      if(elem \u003d\u003d xs(i)) return i\n      i -\u003d 1\n    }\n    -1\n  }\n\n  /** Finds index of last element satisfying some predicate before or at given end index.\n    *\n    *  @param   p     the predicate used to test elements.\n    *  @return  the index `\u003c\u003d end` of the last element of this array that satisfies the predicate `p`,\n    *           or `-1`, if none exists.\n    */\n  def lastIndexWhere(p: A \u003d\u003e Boolean, end: Int \u003d xs.length - 1): Int \u003d {\n    var i \u003d min(end, xs.length-1)\n    while(i \u003e\u003d 0) {\n      if(p(xs(i))) return i\n      i -\u003d 1\n    }\n    -1\n  }\n\n  /** Finds the first element of the array satisfying a predicate, if any.\n    *\n    *  @param p       the predicate used to test elements.\n    *  @return        an option value containing the first element in the array\n    *                 that satisfies `p`, or `None` if none exists.\n    */\n  def find(@deprecatedName(\"f\", \"2.13.3\") p: A \u003d\u003e Boolean): Option[A] \u003d {\n    val idx \u003d indexWhere(p)\n    if(idx \u003d\u003d -1) None else Some(xs(idx))\n  }\n\n  /** Tests whether a predicate holds for at least one element of this array.\n    *\n    *  @param   p     the predicate used to test elements.\n    *  @return        `true` if the given predicate `p` is satisfied by at least one element of this array, otherwise `false`\n    */\n  def exists(@deprecatedName(\"f\", \"2.13.3\") p: A \u003d\u003e Boolean): Boolean \u003d indexWhere(p) \u003e\u003d 0\n\n  /** Tests whether a predicate holds for all elements of this array.\n    *\n    *  @param   p     the predicate used to test elements.\n    *  @return        `true` if this array is empty or the given predicate `p`\n    *                 holds for all elements of this array, otherwise `false`.\n    */\n  def forall(@deprecatedName(\"f\", \"2.13.3\") p: A \u003d\u003e Boolean): Boolean \u003d {\n    var i \u003d 0\n    while(i \u003c xs.length) {\n      if(!p(xs(i))) return false\n      i +\u003d 1\n    }\n    true\n  }\n\n  /** Applies a binary operator to a start value and all elements of this array,\n    * going left to right.\n    *\n    *  @param   z    the start value.\n    *  @param   op   the binary operator.\n    *  @tparam  B    the result type of the binary operator.\n    *  @return  the result of inserting `op` between consecutive elements of this array,\n    *           going left to right with the start value `z` on the left:\n    *           {{{\n    *             op(...op(z, x_1), x_2, ..., x_n)\n    *           }}}\n    *           where `x,,1,,, ..., x,,n,,` are the elements of this array.\n    *           Returns `z` if this array is empty.\n    */\n  def foldLeft[B](z: B)(op: (B, A) \u003d\u003e B): B \u003d {\n    def f[@specialized(Specializable.Everything) T](xs: Array[T], op: (Any, Any) \u003d\u003e Any, z: Any): Any \u003d {\n      val length \u003d xs.length\n      var v: Any \u003d z\n      var i \u003d 0\n      while(i \u003c length) {\n        v \u003d op(v, xs(i))\n        i +\u003d 1\n      }\n      v\n    }\n    ((xs: Any) match {\n      case null \u003d\u003e throw new NullPointerException // null-check first helps static analysis of instanceOf\n      case xs: Array[AnyRef]  \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Int]     \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Double]  \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Long]    \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Float]   \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Char]    \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Byte]    \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Short]   \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Boolean] \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Unit]    \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n    }).asInstanceOf[B]\n  }\n\n   /** Produces an array containing cumulative results of applying the binary\n    *  operator going left to right.\n    *\n    *  @param   z    the start value.\n    *  @param   op   the binary operator.\n    *  @tparam  B    the result type of the binary operator.\n    *  @return  array with intermediate values.\n    *\n    *  Example:\n    *  {{{\n    *    Array(1, 2, 3, 4).scanLeft(0)(_ + _) \u003d\u003d Array(0, 1, 3, 6, 10)\n    *  }}}\n    *\n    */\n  def scanLeft[ B : ClassTag ](z: B)(op: (B, A) \u003d\u003e B): Array[B] \u003d {\n    var v \u003d z\n    var i \u003d 0\n    val res \u003d new Array[B](xs.length + 1)\n    while(i \u003c xs.length) {\n      res(i) \u003d v\n      v \u003d op(v, xs(i))\n      i +\u003d 1\n    }\n    res(i) \u003d v\n    res\n  }\n\n  /** Computes a prefix scan of the elements of the array.\n    *\n    *  Note: The neutral element `z` may be applied more than once.\n    *\n    *  @tparam B         element type of the resulting array\n    *  @param z          neutral element for the operator `op`\n    *  @param op         the associative operator for the scan\n    *\n    *  @return           a new array containing the prefix scan of the elements in this array\n    */\n  def scan[B \u003e: A : ClassTag](z: B)(op: (B, B) \u003d\u003e B): Array[B] \u003d scanLeft(z)(op)\n\n   /** Produces an array containing cumulative results of applying the binary\n    *  operator going right to left.\n    *\n    *  @param   z    the start value.\n    *  @param   op   the binary operator.\n    *  @tparam  B    the result type of the binary operator.\n    *  @return  array with intermediate values.\n    *\n    *  Example:\n    *  {{{\n    *    Array(4, 3, 2, 1).scanRight(0)(_ + _) \u003d\u003d Array(10, 6, 3, 1, 0)\n    *  }}}\n    *\n    */\n  def scanRight[ B : ClassTag ](z: B)(op: (A, B) \u003d\u003e B): Array[B] \u003d {\n    var v \u003d z\n    var i \u003d xs.length - 1\n    val res \u003d new Array[B](xs.length + 1)\n    res(xs.length) \u003d z\n    while(i \u003e\u003d 0) {\n      v \u003d op(xs(i), v)\n      res(i) \u003d v\n      i -\u003d 1\n    }\n    res\n  }\n\n  /** Applies a binary operator to all elements of this array and a start value,\n    * going right to left.\n    *\n    *  @param   z    the start value.\n    *  @param   op   the binary operator.\n    *  @tparam  B    the result type of the binary operator.\n    *  @return  the result of inserting `op` between consecutive elements of this array,\n    *           going right to left with the start value `z` on the right:\n    *           {{{\n    *             op(x_1, op(x_2, ... op(x_n, z)...))\n    *           }}}\n    *           where `x,,1,,, ..., x,,n,,` are the elements of this array.\n    *           Returns `z` if this array is empty.\n    */\n  def foldRight[B](z: B)(op: (A, B) \u003d\u003e B): B \u003d {\n    def f[@specialized(Specializable.Everything) T](xs: Array[T], op: (Any, Any) \u003d\u003e Any, z: Any): Any \u003d {\n      var v \u003d z\n      var i \u003d xs.length - 1\n      while(i \u003e\u003d 0) {\n        v \u003d op(xs(i), v)\n        i -\u003d 1\n      }\n      v\n    }\n    ((xs: Any) match {\n      case null \u003d\u003e throw new NullPointerException\n      case xs: Array[AnyRef]  \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Int]     \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Double]  \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Long]    \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Float]   \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Char]    \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Byte]    \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Short]   \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Boolean] \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Unit]    \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n    }).asInstanceOf[B]\n\n  }\n\n  /** Folds the elements of this array using the specified associative binary operator.\n    *\n    *  @tparam A1     a type parameter for the binary operator, a supertype of `A`.\n    *  @param z       a neutral element for the fold operation; may be added to the result\n    *                 an arbitrary number of times, and must not change the result (e.g., `Nil` for list concatenation,\n    *                 0 for addition, or 1 for multiplication).\n    *  @param op      a binary operator that must be associative.\n    *  @return        the result of applying the fold operator `op` between all the elements, or `z` if this array is empty.\n    */\n  def fold[A1 \u003e: A](z: A1)(op: (A1, A1) \u003d\u003e A1): A1 \u003d foldLeft(z)(op)\n\n  /** Builds a new array by applying a function to all elements of this array.\n    *\n    *  @param f      the function to apply to each element.\n    *  @tparam B     the element type of the returned array.\n    *  @return       a new array resulting from applying the given function\n    *                `f` to each element of this array and collecting the results.\n    */\n  def map[B](f: A \u003d\u003e B)(implicit ct: ClassTag[B]): Array[B] \u003d {\n    val len \u003d xs.length\n    val ys \u003d new Array[B](len)\n    if(len \u003e 0) {\n      var i \u003d 0\n      (xs: Any) match {\n        case xs: Array[AnyRef]  \u003d\u003e while (i \u003c len) { ys(i) \u003d f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n        case xs: Array[Int]     \u003d\u003e while (i \u003c len) { ys(i) \u003d f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n        case xs: Array[Double]  \u003d\u003e while (i \u003c len) { ys(i) \u003d f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n        case xs: Array[Long]    \u003d\u003e while (i \u003c len) { ys(i) \u003d f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n        case xs: Array[Float]   \u003d\u003e while (i \u003c len) { ys(i) \u003d f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n        case xs: Array[Char]    \u003d\u003e while (i \u003c len) { ys(i) \u003d f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n        case xs: Array[Byte]    \u003d\u003e while (i \u003c len) { ys(i) \u003d f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n        case xs: Array[Short]   \u003d\u003e while (i \u003c len) { ys(i) \u003d f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n        case xs: Array[Boolean] \u003d\u003e while (i \u003c len) { ys(i) \u003d f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n      }\n    }\n    ys\n  }\n\n  def mapInPlace(f: A \u003d\u003e A): Array[A] \u003d {\n    var i \u003d 0\n    while (i \u003c xs.length) {\n      xs.update(i, f(xs(i)))\n      i \u003d i + 1\n    }\n    xs\n  }\n\n  /** Builds a new array by applying a function to all elements of this array\n    * and using the elements of the resulting collections.\n    *\n    *  @param f      the function to apply to each element.\n    *  @tparam B     the element type of the returned array.\n    *  @return       a new array resulting from applying the given collection-valued function\n    *                `f` to each element of this array and concatenating the results.\n    */\n  def flatMap[B : ClassTag](f: A \u003d\u003e IterableOnce[B]): Array[B] \u003d {\n    val b \u003d ArrayBuilder.make[B]\n    var i \u003d 0\n    while(i \u003c xs.length) {\n      b ++\u003d f(xs(i))\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  def flatMap[BS, B](f: A \u003d\u003e BS)(implicit asIterable: BS \u003d\u003e Iterable[B], m: ClassTag[B]): Array[B] \u003d\n    flatMap[B](x \u003d\u003e asIterable(f(x)))\n\n  /** Flattens a two-dimensional array by concatenating all its rows\n    *  into a single array.\n    *\n    *  @tparam B         Type of row elements.\n    *  @param asIterable A function that converts elements of this array to rows - Iterables of type `B`.\n    *  @return           An array obtained by concatenating rows of this array.\n    */\n  def flatten[B](implicit asIterable: A \u003d\u003e IterableOnce[B], m: ClassTag[B]): Array[B] \u003d {\n    val b \u003d ArrayBuilder.make[B]\n    val len \u003d xs.length\n    var size \u003d 0\n    var i \u003d 0\n    while(i \u003c len) {\n      xs(i) match {\n        case it: IterableOnce[_] \u003d\u003e\n          val k \u003d it.knownSize\n          if(k \u003e 0) size +\u003d k\n        case a: Array[_] \u003d\u003e size +\u003d a.length\n        case _ \u003d\u003e\n      }\n      i +\u003d 1\n    }\n    if(size \u003e 0) b.sizeHint(size)\n    i \u003d 0\n    while(i \u003c len) {\n      b ++\u003d asIterable(xs(i))\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  /** Builds a new array by applying a partial function to all elements of this array\n    * on which the function is defined.\n    *\n    *  @param pf     the partial function which filters and maps the array.\n    *  @tparam B     the element type of the returned array.\n    *  @return       a new array resulting from applying the given partial function\n    *                `pf` to each element on which it is defined and collecting the results.\n    *                The order of the elements is preserved.\n    */\n  def collect[B : ClassTag](pf: PartialFunction[A, B]): Array[B] \u003d {\n    var i \u003d 0\n    var matched \u003d true\n    def d(x: A): B \u003d {\n      matched \u003d false\n      null.asInstanceOf[B]\n    }\n    val b \u003d ArrayBuilder.make[B]\n    while(i \u003c xs.length) {\n      matched \u003d true\n      val v \u003d pf.applyOrElse(xs(i), d)\n      if(matched) b +\u003d v\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  /** Finds the first element of the array for which the given partial function is defined, and applies the\n    * partial function to it. */\n  def collectFirst[B](f: PartialFunction[A, B]): Option[B] \u003d {\n    var i \u003d 0\n    var matched \u003d true\n    def d(x: A): B \u003d {\n      matched \u003d false\n      null.asInstanceOf[B]\n    }\n    while(i \u003c xs.length) {\n      matched \u003d true\n      val v \u003d f.applyOrElse(xs(i), d)\n      if(matched) return Some(v)\n      i +\u003d 1\n    }\n    None\n  }\n\n  /** Returns an array formed from this array and another iterable collection\n    * by combining corresponding elements in pairs.\n    * If one of the two collections is longer than the other, its remaining elements are ignored.\n    *\n    *  @param   that  The iterable providing the second half of each result pair\n    *  @tparam  B     the type of the second half of the returned pairs\n    *  @return        a new array containing pairs consisting of corresponding elements of this array and `that`.\n    *                 The length of the returned array is the minimum of the lengths of this array and `that`.\n    */\n  def zip[B](that: IterableOnce[B]): Array[(A, B)] \u003d {\n    val b \u003d new ArrayBuilder.ofRef[(A, B)]()\n    val k \u003d that.knownSize\n    b.sizeHint(if(k \u003e\u003d 0) min(k, xs.length) else xs.length)\n    var i \u003d 0\n    val it \u003d that.iterator\n    while(i \u003c xs.length \u0026\u0026 it.hasNext) {\n      b +\u003d ((xs(i), it.next()))\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  /** Analogous to `zip` except that the elements in each collection are not consumed until a strict operation is\n    * invoked on the returned `LazyZip2` decorator.\n    *\n    * Calls to `lazyZip` can be chained to support higher arities (up to 4) without incurring the expense of\n    * constructing and deconstructing intermediary tuples.\n    *\n    * {{{\n    *    val xs \u003d List(1, 2, 3)\n    *    val res \u003d (xs lazyZip xs lazyZip xs lazyZip xs).map((a, b, c, d) \u003d\u003e a + b + c + d)\n    *    // res \u003d\u003d List(4, 8, 12)\n    * }}}\n    *\n    * @param that the iterable providing the second element of each eventual pair\n    * @tparam B   the type of the second element in each eventual pair\n    * @return a decorator `LazyZip2` that allows strict operations to be performed on the lazily evaluated pairs\n    *         or chained calls to `lazyZip`. Implicit conversion to `Iterable[(A, B)]` is also supported.\n    */\n  def lazyZip[B](that: Iterable[B]): LazyZip2[A, B, Array[A]] \u003d new LazyZip2(xs, immutable.ArraySeq.unsafeWrapArray(xs), that)\n\n  /** Returns an array formed from this array and another iterable collection\n    *  by combining corresponding elements in pairs.\n    *  If one of the two collections is shorter than the other,\n    *  placeholder elements are used to extend the shorter collection to the length of the longer.\n    *\n    *  @param that     the iterable providing the second half of each result pair\n    *  @param thisElem the element to be used to fill up the result if this array is shorter than `that`.\n    *  @param thatElem the element to be used to fill up the result if `that` is shorter than this array.\n    *  @return        a new array containing pairs consisting of corresponding elements of this array and `that`.\n    *                 The length of the returned array is the maximum of the lengths of this array and `that`.\n    *                 If this array is shorter than `that`, `thisElem` values are used to pad the result.\n    *                 If `that` is shorter than this array, `thatElem` values are used to pad the result.\n    */\n  def zipAll[A1 \u003e: A, B](that: Iterable[B], thisElem: A1, thatElem: B): Array[(A1, B)] \u003d {\n    val b \u003d new ArrayBuilder.ofRef[(A1, B)]()\n    val k \u003d that.knownSize\n    b.sizeHint(max(k, xs.length))\n    var i \u003d 0\n    val it \u003d that.iterator\n    while(i \u003c xs.length \u0026\u0026 it.hasNext) {\n      b +\u003d ((xs(i), it.next()))\n      i +\u003d 1\n    }\n    while(it.hasNext) {\n      b +\u003d ((thisElem, it.next()))\n      i +\u003d 1\n    }\n    while(i \u003c xs.length) {\n      b +\u003d ((xs(i), thatElem))\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  /** Zips this array with its indices.\n    *\n    *  @return   A new array containing pairs consisting of all elements of this array paired with their index.\n    *            Indices start at `0`.\n    */\n  def zipWithIndex: Array[(A, Int)] \u003d {\n    val b \u003d new Array[(A, Int)](xs.length)\n    var i \u003d 0\n    while(i \u003c xs.length) {\n      b(i) \u003d ((xs(i), i))\n      i +\u003d 1\n    }\n    b\n  }\n\n  /** A copy of this array with an element appended. */\n  def appended[B \u003e: A : ClassTag](x: B): Array[B] \u003d {\n    val dest \u003d Array.copyAs[B](xs, xs.length+1)\n    dest(xs.length) \u003d x\n    dest\n  }\n\n  @`inline` final def :+ [B \u003e: A : ClassTag](x: B): Array[B] \u003d appended(x)\n\n  /** A copy of this array with an element prepended. */\n  def prepended[B \u003e: A : ClassTag](x: B): Array[B] \u003d {\n    val dest \u003d new Array[B](xs.length + 1)\n    dest(0) \u003d x\n    Array.copy(xs, 0, dest, 1, xs.length)\n    dest\n  }\n\n  @`inline` final def +: [B \u003e: A : ClassTag](x: B): Array[B] \u003d prepended(x)\n\n  /** A copy of this array with all elements of a collection prepended. */\n  def prependedAll[B \u003e: A : ClassTag](prefix: IterableOnce[B]): Array[B] \u003d {\n    val b \u003d ArrayBuilder.make[B]\n    val k \u003d prefix.knownSize\n    if(k \u003e\u003d 0) b.sizeHint(k + xs.length)\n    b.addAll(prefix)\n    if(k \u003c 0) b.sizeHint(b.length + xs.length)\n    b.addAll(xs)\n    b.result()\n  }\n\n  /** A copy of this array with all elements of an array prepended. */\n  def prependedAll[B \u003e: A : ClassTag](prefix: Array[_ \u003c: B]): Array[B] \u003d {\n    val dest \u003d Array.copyAs[B](prefix, prefix.length+xs.length)\n    Array.copy(xs, 0, dest, prefix.length, xs.length)\n    dest\n  }\n\n  @`inline` final def ++: [B \u003e: A : ClassTag](prefix: IterableOnce[B]): Array[B] \u003d prependedAll(prefix)\n\n  @`inline` final def ++: [B \u003e: A : ClassTag](prefix: Array[_ \u003c: B]): Array[B] \u003d prependedAll(prefix)\n\n  /** A copy of this array with all elements of a collection appended. */\n  def appendedAll[B \u003e: A : ClassTag](suffix: IterableOnce[B]): Array[B] \u003d {\n    val b \u003d ArrayBuilder.make[B]\n    val k \u003d suffix.knownSize\n    if(k \u003e\u003d 0) b.sizeHint(k + xs.length)\n    b.addAll(xs)\n    b.addAll(suffix)\n    b.result()\n  }\n\n  /** A copy of this array with all elements of an array appended. */\n  def appendedAll[B \u003e: A : ClassTag](suffix: Array[_ \u003c: B]): Array[B] \u003d {\n    val dest \u003d Array.copyAs[B](xs, xs.length+suffix.length)\n    Array.copy(suffix, 0, dest, xs.length, suffix.length)\n    dest\n  }\n\n  @`inline` final def :++ [B \u003e: A : ClassTag](suffix: IterableOnce[B]): Array[B] \u003d appendedAll(suffix)\n\n  @`inline` final def :++ [B \u003e: A : ClassTag](suffix: Array[_ \u003c: B]): Array[B] \u003d appendedAll(suffix)\n\n  @`inline` final def concat[B \u003e: A : ClassTag](suffix: IterableOnce[B]): Array[B] \u003d appendedAll(suffix)\n\n  @`inline` final def concat[B \u003e: A : ClassTag](suffix: Array[_ \u003c: B]): Array[B] \u003d appendedAll(suffix)\n\n  @`inline` final def ++[B \u003e: A : ClassTag](xs: IterableOnce[B]): Array[B] \u003d appendedAll(xs)\n\n  @`inline` final def ++[B \u003e: A : ClassTag](xs: Array[_ \u003c: B]): Array[B] \u003d appendedAll(xs)\n\n  /** Tests whether this array contains a given value as an element.\n    *\n    *  @param elem  the element to test.\n    *  @return     `true` if this array has an element that is equal (as\n    *              determined by `\u003d\u003d`) to `elem`, `false` otherwise.\n    */\n  def contains(elem: A): Boolean \u003d exists (_ \u003d\u003d elem)\n\n  /** Returns a copy of this array with patched values.\n    * Patching at negative indices is the same as patching starting at 0.\n    * Patching at indices at or larger than the length of the original array appends the patch to the end.\n    * If more values are replaced than actually exist, the excess is ignored.\n    *\n    *  @param from       The start index from which to patch\n    *  @param other      The patch values\n    *  @param replaced   The number of values in the original array that are replaced by the patch.\n    */\n  def patch[B \u003e: A : ClassTag](from: Int, other: IterableOnce[B], replaced: Int): Array[B] \u003d {\n    val b \u003d ArrayBuilder.make[B]\n    val k \u003d other.knownSize\n    val r \u003d if(replaced \u003c 0) 0 else replaced\n    if(k \u003e\u003d 0) b.sizeHint(xs.length + k - r)\n    val chunk1 \u003d if(from \u003e 0) min(from, xs.length) else 0\n    if(chunk1 \u003e 0) b.addAll(xs, 0, chunk1)\n    b ++\u003d other\n    val remaining \u003d xs.length - chunk1 - r\n    if(remaining \u003e 0) b.addAll(xs, xs.length - remaining, remaining)\n    b.result()\n  }\n\n  /** Converts an array of pairs into an array of first elements and an array of second elements.\n    *\n    *  @tparam A1    the type of the first half of the element pairs\n    *  @tparam A2    the type of the second half of the element pairs\n    *  @param asPair an implicit conversion which asserts that the element type\n    *                of this Array is a pair.\n    *  @param ct1    a class tag for `A1` type parameter that is required to create an instance\n    *                of `Array[A1]`\n    *  @param ct2    a class tag for `A2` type parameter that is required to create an instance\n    *                of `Array[A2]`\n    *  @return       a pair of Arrays, containing, respectively, the first and second half\n    *                of each element pair of this Array.\n    */\n  def unzip[A1, A2](implicit asPair: A \u003d\u003e (A1, A2), ct1: ClassTag[A1], ct2: ClassTag[A2]): (Array[A1], Array[A2]) \u003d {\n    val a1 \u003d new Array[A1](xs.length)\n    val a2 \u003d new Array[A2](xs.length)\n    var i \u003d 0\n    while (i \u003c xs.length) {\n      val e \u003d asPair(xs(i))\n      a1(i) \u003d e._1\n      a2(i) \u003d e._2\n      i +\u003d 1\n    }\n    (a1, a2)\n  }\n\n  /** Converts an array of triples into three arrays, one containing the elements from each position of the triple.\n    *\n    *  @tparam A1      the type of the first of three elements in the triple\n    *  @tparam A2      the type of the second of three elements in the triple\n    *  @tparam A3      the type of the third of three elements in the triple\n    *  @param asTriple an implicit conversion which asserts that the element type\n    *                  of this Array is a triple.\n    *  @param ct1      a class tag for T1 type parameter that is required to create an instance\n    *                  of Array[T1]\n    *  @param ct2      a class tag for T2 type parameter that is required to create an instance\n    *                  of Array[T2]\n    *  @param ct3      a class tag for T3 type parameter that is required to create an instance\n    *                  of Array[T3]\n    *  @return         a triple of Arrays, containing, respectively, the first, second, and third\n    *                  elements from each element triple of this Array.\n    */\n  def unzip3[A1, A2, A3](implicit asTriple: A \u003d\u003e (A1, A2, A3), ct1: ClassTag[A1], ct2: ClassTag[A2],\n                         ct3: ClassTag[A3]): (Array[A1], Array[A2], Array[A3]) \u003d {\n    val a1 \u003d new Array[A1](xs.length)\n    val a2 \u003d new Array[A2](xs.length)\n    val a3 \u003d new Array[A3](xs.length)\n    var i \u003d 0\n    while (i \u003c xs.length) {\n      val e \u003d asTriple(xs(i))\n      a1(i) \u003d e._1\n      a2(i) \u003d e._2\n      a3(i) \u003d e._3\n      i +\u003d 1\n    }\n    (a1, a2, a3)\n  }\n\n  /** Transposes a two dimensional array.\n    *\n    *  @tparam B       Type of row elements.\n    *  @param asArray  A function that converts elements of this array to rows - arrays of type `B`.\n    *  @return         An array obtained by replacing elements of this arrays with rows the represent.\n    */\n  def transpose[B](implicit asArray: A \u003d\u003e Array[B]): Array[Array[B]] \u003d {\n    val aClass \u003d xs.getClass.getComponentType\n    val bb \u003d new ArrayBuilder.ofRef[Array[B]]()(ClassTag[Array[B]](aClass))\n    if (xs.length \u003d\u003d 0) bb.result()\n    else {\n      def mkRowBuilder() \u003d ArrayBuilder.make[B](ClassTag[B](aClass.getComponentType))\n      val bs \u003d new ArrayOps(asArray(xs(0))).map((x: B) \u003d\u003e mkRowBuilder())\n      for (xs \u003c- this) {\n        var i \u003d 0\n        for (x \u003c- new ArrayOps(asArray(xs))) {\n          bs(i) +\u003d x\n          i +\u003d 1\n        }\n      }\n      for (b \u003c- new ArrayOps(bs)) bb +\u003d b.result()\n      bb.result()\n    }\n  }\n\n  /** Apply `f` to each element for its side effects.\n    * Note: [U] parameter needed to help scalac\u0027s type inference.\n    */\n  def foreach[U](f: A \u003d\u003e U): Unit \u003d {\n    val len \u003d xs.length\n    var i \u003d 0\n    (xs: Any) match {\n      case xs: Array[AnyRef]  \u003d\u003e while (i \u003c len) { f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n      case xs: Array[Int]     \u003d\u003e while (i \u003c len) { f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n      case xs: Array[Double]  \u003d\u003e while (i \u003c len) { f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n      case xs: Array[Long]    \u003d\u003e while (i \u003c len) { f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n      case xs: Array[Float]   \u003d\u003e while (i \u003c len) { f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n      case xs: Array[Char]    \u003d\u003e while (i \u003c len) { f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n      case xs: Array[Byte]    \u003d\u003e while (i \u003c len) { f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n      case xs: Array[Short]   \u003d\u003e while (i \u003c len) { f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n      case xs: Array[Boolean] \u003d\u003e while (i \u003c len) { f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n    }\n  }\n\n  /** Selects all the elements of this array ignoring the duplicates.\n    *\n    * @return a new array consisting of all the elements of this array without duplicates.\n    */\n  def distinct: Array[A] \u003d distinctBy(identity)\n\n  /** Selects all the elements of this array ignoring the duplicates as determined by `\u003d\u003d` after applying\n    * the transforming function `f`.\n    *\n    * @param f The transforming function whose result is used to determine the uniqueness of each element\n    * @tparam B the type of the elements after being transformed by `f`\n    * @return a new array consisting of all the elements of this array without duplicates.\n    */\n  def distinctBy[B](f: A \u003d\u003e B): Array[A] \u003d\n    ArrayBuilder.make[A].addAll(iterator.distinctBy(f)).result()\n\n  /** A copy of this array with an element value appended until a given target length is reached.\n    *\n    *  @param   len   the target length\n    *  @param   elem  the padding value\n    *  @tparam B      the element type of the returned array.\n    *  @return a new array consisting of\n    *          all elements of this array followed by the minimal number of occurrences of `elem` so\n    *          that the resulting collection has a length of at least `len`.\n    */\n  def padTo[B \u003e: A : ClassTag](len: Int, elem: B): Array[B] \u003d {\n    var i \u003d xs.length\n    val newlen \u003d max(i, len)\n    val dest \u003d Array.copyAs[B](xs, newlen)\n    while(i \u003c newlen) {\n      dest(i) \u003d elem\n      i +\u003d 1\n    }\n    dest\n  }\n\n  /** Produces the range of all indices of this sequence.\n    *\n    *  @return  a `Range` value from `0` to one less than the length of this array.\n    */\n  def indices: Range \u003d Range(0, xs.length)\n\n  /** Partitions this array into a map of arrays according to some discriminator function.\n    *\n    *  @param f     the discriminator function.\n    *  @tparam K    the type of keys returned by the discriminator function.\n    *  @return      A map from keys to arrays such that the following invariant holds:\n    *               {{{\n    *                 (xs groupBy f)(k) \u003d xs filter (x \u003d\u003e f(x) \u003d\u003d k)\n    *               }}}\n    *               That is, every key `k` is bound to an array of those elements `x`\n    *               for which `f(x)` equals `k`.\n    */\n  def groupBy[K](f: A \u003d\u003e K): immutable.Map[K, Array[A]] \u003d {\n    val m \u003d mutable.Map.empty[K, ArrayBuilder[A]]\n    val len \u003d xs.length\n    var i \u003d 0\n    while(i \u003c len) {\n      val elem \u003d xs(i)\n      val key \u003d f(elem)\n      val bldr \u003d m.getOrElseUpdate(key, ArrayBuilder.make[A])\n      bldr +\u003d elem\n      i +\u003d 1\n    }\n    m.view.mapValues(_.result()).toMap\n  }\n\n  /**\n    * Partitions this array into a map of arrays according to a discriminator function `key`.\n    * Each element in a group is transformed into a value of type `B` using the `value` function.\n    *\n    * It is equivalent to `groupBy(key).mapValues(_.map(f))`, but more efficient.\n    *\n    * {{{\n    *   case class User(name: String, age: Int)\n    *\n    *   def namesByAge(users: Array[User]): Map[Int, Array[String]] \u003d\n    *     users.groupMap(_.age)(_.name)\n    * }}}\n    *\n    * @param key the discriminator function\n    * @param f the element transformation function\n    * @tparam K the type of keys returned by the discriminator function\n    * @tparam B the type of values returned by the transformation function\n    */\n  def groupMap[K, B : ClassTag](key: A \u003d\u003e K)(f: A \u003d\u003e B): immutable.Map[K, Array[B]] \u003d {\n    val m \u003d mutable.Map.empty[K, ArrayBuilder[B]]\n    val len \u003d xs.length\n    var i \u003d 0\n    while(i \u003c len) {\n      val elem \u003d xs(i)\n      val k \u003d key(elem)\n      val bldr \u003d m.getOrElseUpdate(k, ArrayBuilder.make[B])\n      bldr +\u003d f(elem)\n      i +\u003d 1\n    }\n    m.view.mapValues(_.result()).toMap\n  }\n\n  @`inline` final def toSeq: immutable.Seq[A] \u003d toIndexedSeq\n\n  def toIndexedSeq: immutable.IndexedSeq[A] \u003d\n    immutable.ArraySeq.unsafeWrapArray(Array.copyOf(xs, xs.length))\n\n  /** Copy elements of this array to another array.\n    *  Fills the given array `xs` starting at index 0.\n    *  Copying will stop once either all the elements of this array have been copied,\n    *  or the end of the array is reached.\n    *\n    *  @param  xs   the array to fill.\n    *  @tparam B      the type of the elements of the array.\n    */\n  def copyToArray[B \u003e: A](xs: Array[B]): Int \u003d copyToArray(xs, 0)\n\n  /** Copy elements of this array to another array.\n    *  Fills the given array `xs` starting at index `start`.\n    *  Copying will stop once either all the elements of this array have been copied,\n    *  or the end of the array is reached.\n    *\n    *  @param  xs   the array to fill.\n    *  @param  start  the starting index within the destination array.\n    *  @tparam B      the type of the elements of the array.\n    */\n  def copyToArray[B \u003e: A](xs: Array[B], start: Int): Int \u003d copyToArray(xs, start, Int.MaxValue)\n\n  /** Copy elements of this array to another array.\n    *  Fills the given array `xs` starting at index `start` with at most `len` values.\n    *  Copying will stop once either all the elements of this array have been copied,\n    *  or the end of the array is reached, or `len` elements have been copied.\n    *\n    *  @param  xs   the array to fill.\n    *  @param  start  the starting index within the destination array.\n    *  @param  len    the maximal number of elements to copy.\n    *  @tparam B      the type of the elements of the array.\n    */\n  def copyToArray[B \u003e: A](xs: Array[B], start: Int, len: Int): Int \u003d {\n    val copied \u003d IterableOnce.elemsToCopyToArray(this.xs.length, xs.length, start, len)\n    if (copied \u003e 0) {\n      Array.copy(this.xs, 0, xs, start, copied)\n    }\n    copied\n  }\n\n  /** Create a copy of this array with the specified element type. */\n  def toArray[B \u003e: A: ClassTag]: Array[B] \u003d {\n    val destination \u003d new Array[B](xs.length)\n    copyToArray(destination, 0)\n    destination\n  }\n\n  /** Counts the number of elements in this array which satisfy a predicate */\n  def count(p: A \u003d\u003e Boolean): Int \u003d {\n    var i, res \u003d 0\n    val len \u003d xs.length\n    while(i \u003c len) {\n      if(p(xs(i))) res +\u003d 1\n      i +\u003d 1\n    }\n    res\n  }\n\n  // can\u0027t use a default arg because we already have another overload with a default arg\n  /** Tests whether this array starts with the given array. */\n  @`inline` def startsWith[B \u003e: A](that: Array[B]): Boolean \u003d startsWith(that, 0)\n\n  /** Tests whether this array contains the given array at a given index.\n    *\n    * @param  that    the array to test\n    * @param  offset  the index where the array is searched.\n    * @return `true` if the array `that` is contained in this array at\n    *         index `offset`, otherwise `false`.\n    */\n  def startsWith[B \u003e: A](that: Array[B], offset: Int): Boolean \u003d {\n    val safeOffset \u003d offset.max(0)\n    val thatl \u003d that.length\n    if(thatl \u003e xs.length-safeOffset) thatl \u003d\u003d 0\n    else {\n      var i \u003d 0\n      while(i \u003c thatl) {\n        if(xs(i+safeOffset) !\u003d that(i)) return false\n        i +\u003d 1\n      }\n      true\n    }\n  }\n\n  /** Tests whether this array ends with the given array.\n    *\n    *  @param  that    the array to test\n    *  @return `true` if this array has `that` as a suffix, `false` otherwise.\n    */\n  def endsWith[B \u003e: A](that: Array[B]): Boolean \u003d {\n    val thatl \u003d that.length\n    val off \u003d xs.length - thatl\n    if(off \u003c 0) false\n    else {\n      var i \u003d 0\n      while(i \u003c thatl) {\n        if(xs(i+off) !\u003d that(i)) return false\n        i +\u003d 1\n      }\n      true\n    }\n  }\n\n  /** A copy of this array with one single replaced element.\n    *  @param  index  the position of the replacement\n    *  @param  elem   the replacing element\n    *  @return a new array which is a copy of this array with the element at position `index` replaced by `elem`.\n    *  @throws IndexOutOfBoundsException if `index` does not satisfy `0 \u003c\u003d index \u003c length`.\n    */\n  def updated[B \u003e: A : ClassTag](index: Int, elem: B): Array[B] \u003d {\n    if(index \u003c 0 || index \u003e\u003d xs.length) throw new IndexOutOfBoundsException(s\"$index is out of bounds (min 0, max ${xs.length-1})\")\n    val dest \u003d toArray[B]\n    dest(index) \u003d elem\n    dest\n  }\n\n  @`inline` def view: IndexedSeqView[A] \u003d new ArrayOps.ArrayView[A](xs)\n\n\n  /* ************************************************************************************************************\n     The remaining methods are provided for completeness but they delegate to mutable.ArraySeq implementations which\n     may not provide the best possible performance. We need them in `ArrayOps` because their return type\n     mentions `C` (which is `Array[A]` in `StringOps` and `mutable.ArraySeq[A]` in `mutable.ArraySeq`).\n     ************************************************************************************************************ */\n\n\n  /** Computes the multiset difference between this array and another sequence.\n    *\n    *  @param that   the sequence of elements to remove\n    *  @return       a new array which contains all elements of this array\n    *                except some of occurrences of elements that also appear in `that`.\n    *                If an element value `x` appears\n    *                \u0027\u0027n\u0027\u0027 times in `that`, then the first \u0027\u0027n\u0027\u0027 occurrences of `x` will not form\n    *                part of the result, but any following occurrences will.\n    */\n  def diff[B \u003e: A](that: Seq[B]): Array[A] \u003d mutable.ArraySeq.make(xs).diff(that).array.asInstanceOf[Array[A]]\n\n  /** Computes the multiset intersection between this array and another sequence.\n    *\n    *  @param that   the sequence of elements to intersect with.\n    *  @return       a new array which contains all elements of this array\n    *                which also appear in `that`.\n    *                If an element value `x` appears\n    *                \u0027\u0027n\u0027\u0027 times in `that`, then the first \u0027\u0027n\u0027\u0027 occurrences of `x` will be retained\n    *                in the result, but any following occurrences will be omitted.\n    */\n  def intersect[B \u003e: A](that: Seq[B]): Array[A] \u003d mutable.ArraySeq.make(xs).intersect(that).array.asInstanceOf[Array[A]]\n\n  /** Groups elements in fixed size blocks by passing a \"sliding window\"\n    *  over them (as opposed to partitioning them, as is done in grouped.)\n    *  @see [[scala.collection.Iterator]], method `sliding`\n    *\n    *  @param size the number of elements per group\n    *  @param step the distance between the first elements of successive groups\n    *  @return An iterator producing arrays of size `size`, except the\n    *          last element (which may be the only element) will be truncated\n    *          if there are fewer than `size` elements remaining to be grouped.\n    */\n  def sliding(size: Int, step: Int \u003d 1): Iterator[Array[A]] \u003d mutable.ArraySeq.make(xs).sliding(size, step).map(_.array.asInstanceOf[Array[A]])\n\n  /** Iterates over combinations.  A _combination_ of length `n` is a subsequence of\n    *  the original array, with the elements taken in order.  Thus, `Array(\"x\", \"y\")` and `Array(\"y\", \"y\")`\n    *  are both length-2 combinations of `Array(\"x\", \"y\", \"y\")`, but `Array(\"y\", \"x\")` is not.  If there is\n    *  more than one way to generate the same subsequence, only one will be returned.\n    *\n    *  For example, `Array(\"x\", \"y\", \"y\", \"y\")` has three different ways to generate `Array(\"x\", \"y\")` depending on\n    *  whether the first, second, or third `\"y\"` is selected.  However, since all are\n    *  identical, only one will be chosen.  Which of the three will be taken is an\n    *  implementation detail that is not defined.\n    *\n    *  @return   An Iterator which traverses the possible n-element combinations of this array.\n    *  @example  {{{\n    *  Array(\"a\", \"b\", \"b\", \"b\", \"c\").combinations(2) \u003d\u003d Iterator(Array(a, b), Array(a, c), Array(b, b), Array(b, c))\n    *  }}}\n    */\n  def combinations(n: Int): Iterator[Array[A]] \u003d mutable.ArraySeq.make(xs).combinations(n).map(_.array.asInstanceOf[Array[A]])\n\n  /** Iterates over distinct permutations.\n    *\n    *  @return   An Iterator which traverses the distinct permutations of this array.\n    *  @example {{{\n    *  Array(\"a\", \"b\", \"b\").permutations \u003d\u003d Iterator(Array(a, b, b), Array(b, a, b), Array(b, b, a))\n    *  }}}\n    */\n  def permutations: Iterator[Array[A]] \u003d mutable.ArraySeq.make(xs).permutations.map(_.array.asInstanceOf[Array[A]])\n\n  // we have another overload here, so we need to duplicate this method\n  /** Tests whether this array contains the given sequence at a given index.\n    *\n    * @param  that    the sequence to test\n    * @param  offset  the index where the sequence is searched.\n    * @return `true` if the sequence `that` is contained in this array at\n    *         index `offset`, otherwise `false`.\n    */\n  def startsWith[B \u003e: A](that: IterableOnce[B], offset: Int \u003d 0): Boolean \u003d mutable.ArraySeq.make(xs).startsWith(that, offset)\n\n  // we have another overload here, so we need to duplicate this method\n  /** Tests whether this array ends with the given sequence.\n    *\n    *  @param  that    the sequence to test\n    *  @return `true` if this array has `that` as a suffix, `false` otherwise.\n    */\n  def endsWith[B \u003e: A](that: Iterable[B]): Boolean \u003d mutable.ArraySeq.make(xs).endsWith(that)\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

2020.11.11 18:57:06 INFO  compiling task1-scala (1 scala source)
Nov 11, 2020 6:57:06 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/ArrayOps.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\npackage scala\npackage collection\n\nimport java.lang.Math.{max, min}\nimport java.util.Arrays\n\nimport scala.Predef.{ // unimport all array-related implicit conversions to avoid triggering them accidentally\n  genericArrayOps \u003d\u003e _,\n  booleanArrayOps \u003d\u003e _,\n  byteArrayOps \u003d\u003e _,\n  charArrayOps \u003d\u003e _,\n  doubleArrayOps \u003d\u003e _,\n  floatArrayOps \u003d\u003e _,\n  intArrayOps \u003d\u003e _,\n  longArrayOps \u003d\u003e _,\n  refArrayOps \u003d\u003e _,\n  shortArrayOps \u003d\u003e _,\n  unitArrayOps \u003d\u003e _,\n  genericWrapArray \u003d\u003e _,\n  wrapRefArray \u003d\u003e _,\n  wrapIntArray \u003d\u003e _,\n  wrapDoubleArray \u003d\u003e _,\n  wrapLongArray \u003d\u003e _,\n  wrapFloatArray \u003d\u003e _,\n  wrapCharArray \u003d\u003e _,\n  wrapByteArray \u003d\u003e _,\n  wrapShortArray \u003d\u003e _,\n  wrapBooleanArray \u003d\u003e _,\n  wrapUnitArray \u003d\u003e _,\n  wrapString \u003d\u003e _,\n  copyArrayToImmutableIndexedSeq \u003d\u003e _,\n  _\n}\nimport scala.collection.Stepper.EfficientSplit\nimport scala.collection.immutable.Range\nimport scala.collection.mutable.ArrayBuilder\nimport scala.math.Ordering\nimport scala.reflect.ClassTag\nimport scala.util.Sorting\n\nobject ArrayOps {\n\n  @SerialVersionUID(3L)\n  private class ArrayView[A](xs: Array[A]) extends AbstractIndexedSeqView[A] {\n    def length \u003d xs.length\n    def apply(n: Int) \u003d xs(n)\n    override def toString: String \u003d immutable.ArraySeq.unsafeWrapArray(xs).mkString(\"ArrayView(\", \", \", \")\")\n  }\n\n  /** A lazy filtered array. No filtering is applied until one of `foreach`, `map` or `flatMap` is called. */\n  class WithFilter[A](p: A \u003d\u003e Boolean, xs: Array[A]) {\n\n    /** Apply `f` to each element for its side effects.\n      * Note: [U] parameter needed to help scalac\u0027s type inference.\n      */\n    def foreach[U](f: A \u003d\u003e U): Unit \u003d {\n      val len \u003d xs.length\n      var i \u003d 0\n      while(i \u003c len) {\n        val x \u003d xs(i)\n        if(p(x)) f(x)\n        i +\u003d 1\n      }\n    }\n\n    /** Builds a new array by applying a function to all elements of this array.\n      *\n      *  @param f      the function to apply to each element.\n      *  @tparam B     the element type of the returned array.\n      *  @return       a new array resulting from applying the given function\n      *                `f` to each element of this array and collecting the results.\n      */\n    def map[B: ClassTag](f: A \u003d\u003e B): Array[B] \u003d {\n      val b \u003d ArrayBuilder.make[B]\n      var i \u003d 0\n      while (i \u003c xs.length) {\n        val x \u003d xs(i)\n        if(p(x)) b +\u003d f(x)\n        i \u003d i + 1\n      }\n      b.result()\n    }\n\n    /** Builds a new array by applying a function to all elements of this array\n      * and using the elements of the resulting collections.\n      *\n      *  @param f      the function to apply to each element.\n      *  @tparam B     the element type of the returned array.\n      *  @return       a new array resulting from applying the given collection-valued function\n      *                `f` to each element of this array and concatenating the results.\n      */\n    def flatMap[B: ClassTag](f: A \u003d\u003e IterableOnce[B]): Array[B] \u003d {\n      val b \u003d ArrayBuilder.make[B]\n      var i \u003d 0\n      while(i \u003c xs.length) {\n        val x \u003d xs(i)\n        if(p(x)) b ++\u003d f(xs(i))\n        i +\u003d 1\n      }\n      b.result()\n    }\n\n    def flatMap[BS, B](f: A \u003d\u003e BS)(implicit asIterable: BS \u003d\u003e Iterable[B], m: ClassTag[B]): Array[B] \u003d\n      flatMap[B](x \u003d\u003e asIterable(f(x)))\n\n    /** Creates a new non-strict filter which combines this filter with the given predicate. */\n    def withFilter(q: A \u003d\u003e Boolean): WithFilter[A] \u003d new WithFilter[A](a \u003d\u003e p(a) \u0026\u0026 q(a), xs)\n  }\n\n  @SerialVersionUID(3L)\n  private[collection] final class ArrayIterator[@specialized(Specializable.Everything) A](xs: Array[A]) extends AbstractIterator[A] with Serializable {\n    private[this] var pos \u003d 0\n    private[this] val len \u003d xs.length\n    override def knownSize \u003d len - pos\n    def hasNext: Boolean \u003d pos \u003c len\n    def next(): A \u003d try {\n      val r \u003d xs(pos)\n      pos +\u003d 1\n      r\n    } catch { case _: ArrayIndexOutOfBoundsException \u003d\u003e Iterator.empty.next() }\n    override def drop(n: Int): Iterator[A] \u003d {\n      if (n \u003e 0) pos \u003d Math.min(xs.length, pos + n)\n      this\n    }\n  }\n\n  @SerialVersionUID(3L)\n  private final class ReverseIterator[@specialized(Specializable.Everything) A](xs: Array[A]) extends AbstractIterator[A] with Serializable {\n    private[this] var pos \u003d xs.length-1\n    def hasNext: Boolean \u003d pos \u003e\u003d 0\n    def next(): A \u003d try {\n      val r \u003d xs(pos)\n      pos -\u003d 1\n      r\n    } catch { case _: ArrayIndexOutOfBoundsException \u003d\u003e Iterator.empty.next() }\n\n    override def drop(n: Int): Iterator[A] \u003d {\n      if (n \u003e 0) pos \u003d Math.max( -1, pos - n)\n      this\n    }\n  }\n\n  @SerialVersionUID(3L)\n  private final class GroupedIterator[A](xs: Array[A], groupSize: Int) extends AbstractIterator[Array[A]] with Serializable {\n    private[this] var pos \u003d 0\n    def hasNext: Boolean \u003d pos \u003c xs.length\n    def next(): Array[A] \u003d {\n      if(pos \u003e\u003d xs.length) throw new NoSuchElementException\n      val r \u003d new ArrayOps(xs).slice(pos, pos+groupSize)\n      pos +\u003d groupSize\n      r\n    }\n  }\n\n  /** The cut-off point for the array size after which we switch from `Sorting.stableSort` to\n    * an implementation that copies the data to a boxed representation for use with `Arrays.sort`.\n    */\n  private final val MaxStableSortLength \u003d 300\n}\n\n/** This class serves as a wrapper for `Array`s with many of the operations found in\n  *  indexed sequences. Where needed, instances of arrays are implicitly converted\n  *  into this class. There is generally no reason to create an instance explicitly or use\n  *  an `ArrayOps` type. It is better to work with plain `Array` types instead and rely on\n  *  the implicit conversion to `ArrayOps` when calling a method (which does not actually\n  *  allocate an instance of `ArrayOps` because it is a value class).\n  *\n  *  Neither `Array` nor `ArrayOps` are proper collection types\n  *  (i.e. they do not extend `Iterable` or even `IterableOnce`). `mutable.ArraySeq` and\n  *  `immutable.ArraySeq` serve this purpose.\n  *\n  *  The difference between this class and `ArraySeq`s is that calling transformer methods such as\n  *  `filter` and `map` will yield an array, whereas an `ArraySeq` will remain an `ArraySeq`.\n  *\n  *  @tparam A   type of the elements contained in this array.\n  */\nfinal class ArrayOps[A](private val xs: Array[A]) extends AnyVal {\n\n  @`inline` private[this] implicit def elemTag: ClassTag[A] \u003d ClassTag(xs.getClass.getComponentType)\n\n  /** The size of this array.\n    *\n    *  @return    the number of elements in this array.\n    */\n  @`inline` def size: Int \u003d xs.length\n\n  /** The size of this array.\n    *\n    *  @return    the number of elements in this array.\n    */\n  @`inline` def knownSize: Int \u003d xs.length\n\n  /** Tests whether the array is empty.\n    *\n    *  @return    `true` if the array contains no elements, `false` otherwise.\n    */\n  @`inline` def isEmpty: Boolean \u003d xs.length \u003d\u003d 0\n\n  /** Tests whether the array is not empty.\n    *\n    *  @return    `true` if the array contains at least one element, `false` otherwise.\n    */\n  @`inline` def nonEmpty: Boolean \u003d xs.length !\u003d 0\n\n  /** Selects the first element of this array.\n    *\n    *  @return  the first element of this array.\n    *  @throws NoSuchElementException if the array is empty.\n    */\n  def head: A \u003d try xs.apply(0) catch { case _: ArrayIndexOutOfBoundsException \u003d\u003e throw new NoSuchElementException(\"head of empty array\") }\n\n  /** Selects the last element.\n    *\n    * @return The last element of this array.\n    * @throws NoSuchElementException If the array is empty.\n    */\n  def last: A \u003d try xs.apply(xs.length-1) catch { case _: ArrayIndexOutOfBoundsException \u003d\u003e throw new NoSuchElementException(\"last of empty array\") }\n\n  /** Optionally selects the first element.\n    *\n    *  @return  the first element of this array if it is nonempty,\n    *           `None` if it is empty.\n    */\n  def headOption: Option[A] \u003d if(isEmpty) None else Some(head)\n\n  /** Optionally selects the last element.\n    *\n    *  @return  the last element of this array$ if it is nonempty,\n    *           `None` if it is empty.\n    */\n  def lastOption: Option[A] \u003d if(isEmpty) None else Some(last)\n\n  /** Compares the size of this array to a test value.\n    *\n    *   @param   otherSize the test value that gets compared with the size.\n    *   @return  A value `x` where\n    *   {{{\n    *        x \u003c  0       if this.size \u003c  otherSize\n    *        x \u003d\u003d 0       if this.size \u003d\u003d otherSize\n    *        x \u003e  0       if this.size \u003e  otherSize\n    *   }}}\n    */\n  def sizeCompare(otherSize: Int): Int \u003d Integer.compare(xs.length, otherSize)\n\n  /** Compares the length of this array to a test value.\n    *\n    *   @param   len   the test value that gets compared with the length.\n    *   @return  A value `x` where\n    *   {{{\n    *        x \u003c  0       if this.length \u003c  len\n    *        x \u003d\u003d 0       if this.length \u003d\u003d len\n    *        x \u003e  0       if this.length \u003e  len\n    *   }}}\n    */\n  def lengthCompare(len: Int): Int \u003d Integer.compare(xs.length, len)\n\n  /** Method mirroring [[SeqOps.sizeIs]] for consistency, except it returns an `Int`\n    * because `size` is known and comparison is constant-time.\n    *\n    * These operations are equivalent to [[sizeCompare(Int) `sizeCompare(Int)`]], and\n    * allow the following more readable usages:\n    *\n    * {{{\n    * this.sizeIs \u003c size     // this.sizeCompare(size) \u003c 0\n    * this.sizeIs \u003c\u003d size    // this.sizeCompare(size) \u003c\u003d 0\n    * this.sizeIs \u003d\u003d size    // this.sizeCompare(size) \u003d\u003d 0\n    * this.sizeIs !\u003d size    // this.sizeCompare(size) !\u003d 0\n    * this.sizeIs \u003e\u003d size    // this.sizeCompare(size) \u003e\u003d 0\n    * this.sizeIs \u003e size     // this.sizeCompare(size) \u003e 0\n    * }}}\n    */\n  def sizeIs: Int \u003d xs.length\n\n  /** Method mirroring [[SeqOps.lengthIs]] for consistency, except it returns an `Int`\n    * because `length` is known and comparison is constant-time.\n    *\n    * These operations are equivalent to [[lengthCompare(Int) `lengthCompare(Int)`]], and\n    * allow the following more readable usages:\n    *\n    * {{{\n    * this.lengthIs \u003c len     // this.lengthCompare(len) \u003c 0\n    * this.lengthIs \u003c\u003d len    // this.lengthCompare(len) \u003c\u003d 0\n    * this.lengthIs \u003d\u003d len    // this.lengthCompare(len) \u003d\u003d 0\n    * this.lengthIs !\u003d len    // this.lengthCompare(len) !\u003d 0\n    * this.lengthIs \u003e\u003d len    // this.lengthCompare(len) \u003e\u003d 0\n    * this.lengthIs \u003e len     // this.lengthCompare(len) \u003e 0\n    * }}}\n    */\n  def lengthIs: Int \u003d xs.length\n\n  /** Selects an interval of elements. The returned array is made up\n    * of all elements `x` which satisfy the invariant:\n    * {{{\n    *   from \u003c\u003d indexOf(x) \u003c until\n    * }}}\n    *\n    *  @param from   the lowest index to include from this array.\n    *  @param until  the lowest index to EXCLUDE from this array.\n    *  @return  an array containing the elements greater than or equal to\n    *           index `from` extending up to (but not including) index `until`\n    *           of this array.\n    */\n  def slice(from: Int, until: Int): Array[A] \u003d {\n    import java.util.Arrays.copyOfRange\n    val lo \u003d max(from, 0)\n    val hi \u003d min(until, xs.length)\n    if (hi \u003e lo) {\n      ((xs: Array[_]) match {\n        case x: Array[AnyRef]     \u003d\u003e copyOfRange(x, lo, hi)\n        case x: Array[Int]        \u003d\u003e copyOfRange(x, lo, hi)\n        case x: Array[Double]     \u003d\u003e copyOfRange(x, lo, hi)\n        case x: Array[Long]       \u003d\u003e copyOfRange(x, lo, hi)\n        case x: Array[Float]      \u003d\u003e copyOfRange(x, lo, hi)\n        case x: Array[Char]       \u003d\u003e copyOfRange(x, lo, hi)\n        case x: Array[Byte]       \u003d\u003e copyOfRange(x, lo, hi)\n        case x: Array[Short]      \u003d\u003e copyOfRange(x, lo, hi)\n        case x: Array[Boolean]    \u003d\u003e copyOfRange(x, lo, hi)\n      }).asInstanceOf[Array[A]]\n    } else new Array[A](0)\n  }\n\n  /** The rest of the array without its first element. */\n  def tail: Array[A] \u003d\n    if(xs.length \u003d\u003d 0) throw new UnsupportedOperationException(\"tail of empty array\") else slice(1, xs.length)\n\n  /** The initial part of the array without its last element. */\n  def init: Array[A] \u003d\n    if(xs.length \u003d\u003d 0) throw new UnsupportedOperationException(\"init of empty array\") else slice(0, xs.length-1)\n\n  /** Iterates over the tails of this array. The first value will be this\n    * array and the final one will be an empty array, with the intervening\n    * values the results of successive applications of `tail`.\n    *\n    *  @return   an iterator over all the tails of this array\n    */\n  def tails: Iterator[Array[A]] \u003d iterateUntilEmpty(xs \u003d\u003e new ArrayOps(xs).tail)\n\n  /** Iterates over the inits of this array. The first value will be this\n    * array and the final one will be an empty array, with the intervening\n    * values the results of successive applications of `init`.\n    *\n    *  @return  an iterator over all the inits of this array\n    */\n  def inits: Iterator[Array[A]] \u003d iterateUntilEmpty(xs \u003d\u003e new ArrayOps(xs).init)\n\n  // A helper for tails and inits.\n  private[this] def iterateUntilEmpty(f: Array[A] \u003d\u003e Array[A]): Iterator[Array[A]] \u003d\n    Iterator.iterate(xs)(f).takeWhile(x \u003d\u003e x.length !\u003d 0) ++ Iterator.single(Array.empty[A])\n\n  /** An array containing the first `n` elements of this array. */\n  def take(n: Int): Array[A] \u003d slice(0, n)\n\n  /** The rest of the array without its `n` first elements. */\n  def drop(n: Int): Array[A] \u003d slice(n, xs.length)\n\n  /** An array containing the last `n` elements of this array. */\n  def takeRight(n: Int): Array[A] \u003d drop(xs.length - max(n, 0))\n\n  /** The rest of the array without its `n` last elements. */\n  def dropRight(n: Int): Array[A] \u003d take(xs.length - max(n, 0))\n\n  /** Takes longest prefix of elements that satisfy a predicate.\n    *\n    *  @param   p  The predicate used to test elements.\n    *  @return  the longest prefix of this array whose elements all satisfy\n    *           the predicate `p`.\n    */\n  def takeWhile(p: A \u003d\u003e Boolean): Array[A] \u003d {\n    val i \u003d indexWhere(x \u003d\u003e !p(x))\n    val hi \u003d if(i \u003c 0) xs.length else i\n    slice(0, hi)\n  }\n\n  /** Drops longest prefix of elements that satisfy a predicate.\n    *\n    *  @param   p  The predicate used to test elements.\n    *  @return  the longest suffix of this array whose first element\n    *           does not satisfy the predicate `p`.\n    */\n  def dropWhile(p: A \u003d\u003e Boolean): Array[A] \u003d {\n    val i \u003d indexWhere(x \u003d\u003e !p(x))\n    val lo \u003d if(i \u003c 0) xs.length else i\n    slice(lo, xs.length)\n  }\n\n  def iterator: Iterator[A] \u003d\n    ((xs: Any) match {\n      case xs: Array[AnyRef]  \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case xs: Array[Int]     \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case xs: Array[Double]  \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case xs: Array[Long]    \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case xs: Array[Float]   \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case xs: Array[Char]    \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case xs: Array[Byte]    \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case xs: Array[Short]   \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case xs: Array[Boolean] \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case xs: Array[Unit]    \u003d\u003e new ArrayOps.ArrayIterator(xs)\n      case null               \u003d\u003e throw new NullPointerException\n    }).asInstanceOf[Iterator[A]]\n\n  def stepper[S \u003c: Stepper[_]](implicit shape: StepperShape[A, S]): S with EfficientSplit \u003d {\n    import convert.impl._\n    val s \u003d shape.shape match {\n      case StepperShape.ReferenceShape \u003d\u003e (xs: Any) match {\n        case bs: Array[Boolean] \u003d\u003e new BoxedBooleanArrayStepper(bs, 0, xs.length)\n        case _ \u003d\u003e new ObjectArrayStepper[AnyRef](xs.asInstanceOf[Array[AnyRef ]], 0, xs.length)\n      }\n      case StepperShape.IntShape    \u003d\u003e new IntArrayStepper           (xs.asInstanceOf[Array[Int    ]], 0, xs.length)\n      case StepperShape.LongShape   \u003d\u003e new LongArrayStepper          (xs.asInstanceOf[Array[Long   ]], 0, xs.length)\n      case StepperShape.DoubleShape \u003d\u003e new DoubleArrayStepper        (xs.asInstanceOf[Array[Double ]], 0, xs.length)\n      case StepperShape.ByteShape   \u003d\u003e new WidenedByteArrayStepper   (xs.asInstanceOf[Array[Byte   ]], 0, xs.length)\n      case StepperShape.ShortShape  \u003d\u003e new WidenedShortArrayStepper  (xs.asInstanceOf[Array[Short  ]], 0, xs.length)\n      case StepperShape.CharShape   \u003d\u003e new WidenedCharArrayStepper   (xs.asInstanceOf[Array[Char   ]], 0, xs.length)\n      case StepperShape.FloatShape  \u003d\u003e new WidenedFloatArrayStepper  (xs.asInstanceOf[Array[Float  ]], 0, xs.length)\n    }\n    s.asInstanceOf[S with EfficientSplit]\n  }\n\n  /** Partitions elements in fixed size arrays.\n    *  @see [[scala.collection.Iterator]], method `grouped`\n    *\n    *  @param size the number of elements per group\n    *  @return An iterator producing arrays of size `size`, except the\n    *          last will be less than size `size` if the elements don\u0027t divide evenly.\n    */\n  def grouped(size: Int): Iterator[Array[A]] \u003d new ArrayOps.GroupedIterator[A](xs, size)\n\n  /** Splits this array into a prefix/suffix pair according to a predicate.\n    *\n    *  Note: `c span p`  is equivalent to (but more efficient than)\n    *  `(c takeWhile p, c dropWhile p)`, provided the evaluation of the\n    *  predicate `p` does not cause any side-effects.\n    *\n    *  @param p the test predicate\n    *  @return  a pair consisting of the longest prefix of this array whose\n    *           elements all satisfy `p`, and the rest of this array.\n    */\n  def span(p: A \u003d\u003e Boolean): (Array[A], Array[A]) \u003d {\n    val i \u003d indexWhere(x \u003d\u003e !p(x))\n    val idx \u003d if(i \u003c 0) xs.length else i\n    (slice(0, idx), slice(idx, xs.length))\n  }\n\n  /** Splits this array into two at a given position.\n    * Note: `c splitAt n` is equivalent to `(c take n, c drop n)`.\n    *\n    *  @param n the position at which to split.\n    *  @return  a pair of arrays consisting of the first `n`\n    *           elements of this array, and the other elements.\n    */\n  def splitAt(n: Int): (Array[A], Array[A]) \u003d (take(n), drop(n))\n\n  /** A pair of, first, all elements that satisfy predicate `p` and, second, all elements that do not. */\n  def partition(p: A \u003d\u003e Boolean): (Array[A], Array[A]) \u003d {\n    val res1, res2 \u003d ArrayBuilder.make[A]\n    var i \u003d 0\n    while(i \u003c xs.length) {\n      val x \u003d xs(i)\n      (if(p(x)) res1 else res2) +\u003d x\n      i +\u003d 1\n    }\n    (res1.result(), res2.result())\n  }\n\n  /** Applies a function `f` to each element of the array and returns a pair of arrays: the first one\n    *  made of those values returned by `f` that were wrapped in [[scala.util.Left]], and the second\n    *  one made of those wrapped in [[scala.util.Right]].\n    *\n    *  Example:\n    *  {{{\n    *    val xs \u003d Array(1, \"one\", 2, \"two\", 3, \"three\") partitionMap {\n    *     case i: Int \u003d\u003e Left(i)\n    *     case s: String \u003d\u003e Right(s)\n    *    }\n    *    // xs \u003d\u003d (Array(1, 2, 3),\n    *    //        Array(one, two, three))\n    *  }}}\n    *\n    *  @tparam A1  the element type of the first resulting collection\n    *  @tparam A2  the element type of the second resulting collection\n    *  @param f    the \u0027split function\u0027 mapping the elements of this array to an [[scala.util.Either]]\n    *\n    *  @return     a pair of arrays: the first one made of those values returned by `f` that were wrapped in [[scala.util.Left]], \n    *              and the second one made of those wrapped in [[scala.util.Right]]. */\n  def partitionMap[A1: ClassTag, A2: ClassTag](f: A \u003d\u003e Either[A1, A2]): (Array[A1], Array[A2]) \u003d {\n    val res1 \u003d ArrayBuilder.make[A1]\n    val res2 \u003d ArrayBuilder.make[A2]\n    var i \u003d 0\n    while(i \u003c xs.length) {\n      f(xs(i)) match {\n        case Left(x) \u003d\u003e res1 +\u003d x\n        case Right(x) \u003d\u003e res2 +\u003d x\n      }\n      i +\u003d 1\n    }\n    (res1.result(), res2.result())\n  }\n\n  /** Returns a new array with the elements in reversed order. */\n  @inline def reverse: Array[A] \u003d {\n    val len \u003d xs.length\n    val res \u003d new Array[A](len)\n    var i \u003d 0\n    while(i \u003c len) {\n      res(len-i-1) \u003d xs(i)\n      i +\u003d 1\n    }\n    res\n  }\n\n  /** An iterator yielding elements in reversed order.\n    *\n    * Note: `xs.reverseIterator` is the same as `xs.reverse.iterator` but implemented more efficiently.\n    *\n    *  @return  an iterator yielding the elements of this array in reversed order\n    */\n  def reverseIterator: Iterator[A] \u003d\n    ((xs: Any) match {\n      case xs: Array[AnyRef]  \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case xs: Array[Int]     \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case xs: Array[Double]  \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case xs: Array[Long]    \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case xs: Array[Float]   \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case xs: Array[Char]    \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case xs: Array[Byte]    \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case xs: Array[Short]   \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case xs: Array[Boolean] \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case xs: Array[Unit]    \u003d\u003e new ArrayOps.ReverseIterator(xs)\n      case null               \u003d\u003e throw new NullPointerException\n    }).asInstanceOf[Iterator[A]]\n\n  /** Selects all elements of this array which satisfy a predicate.\n    *\n    *  @param p  the predicate used to test elements.\n    *  @return   a new array consisting of all elements of this array that satisfy the given predicate `p`.\n    */\n  def filter(p: A \u003d\u003e Boolean): Array[A] \u003d {\n    val res \u003d ArrayBuilder.make[A]\n    var i \u003d 0\n    while(i \u003c xs.length) {\n      val x \u003d xs(i)\n      if(p(x)) res +\u003d x\n      i +\u003d 1\n    }\n    res.result()\n  }\n\n  /** Selects all elements of this array which do not satisfy a predicate.\n    *\n    *  @param p     the predicate used to test elements.\n    *  @return      a new array consisting of all elements of this array that do not satisfy the given predicate `p`.\n    */\n  def filterNot(p: A \u003d\u003e Boolean): Array[A] \u003d filter(x \u003d\u003e !p(x))\n\n  /** Sorts this array according to an Ordering.\n    *\n    *  The sort is stable. That is, elements that are equal (as determined by\n    *  `lt`) appear in the same order in the sorted sequence as in the original.\n    *\n    *  @see [[scala.math.Ordering]]\n    *\n    *  @param  ord the ordering to be used to compare elements.\n    *  @return     an array consisting of the elements of this array\n    *              sorted according to the ordering `ord`.\n    */\n  def sorted[B \u003e: A](implicit ord: Ordering[B]): Array[A] \u003d {\n    val len \u003d xs.length\n    def boxed \u003d if(len \u003c ArrayOps.MaxStableSortLength) {\n      val a \u003d xs.clone()\n      Sorting.stableSort(a)(ord.asInstanceOf[Ordering[A]])\n      a\n    } else {\n      val a \u003d Array.copyAs[AnyRef](xs, len)(ClassTag.AnyRef)\n      Arrays.sort(a, ord.asInstanceOf[Ordering[AnyRef]])\n      Array.copyAs[A](a, len)\n    }\n    if(len \u003c\u003d 1) xs.clone()\n    else ((xs: Array[_]) match {\n      case xs: Array[AnyRef] \u003d\u003e\n        val a \u003d Arrays.copyOf(xs, len); Arrays.sort(a, ord.asInstanceOf[Ordering[AnyRef]]); a\n      case xs: Array[Int] \u003d\u003e\n        if(ord eq Ordering.Int) { val a \u003d Arrays.copyOf(xs, len); Arrays.sort(a); a }\n        else boxed\n      case xs: Array[Long] \u003d\u003e\n        if(ord eq Ordering.Long) { val a \u003d Arrays.copyOf(xs, len); Arrays.sort(a); a }\n        else boxed\n      case xs: Array[Char] \u003d\u003e\n        if(ord eq Ordering.Char) { val a \u003d Arrays.copyOf(xs, len); Arrays.sort(a); a }\n        else boxed\n      case xs: Array[Byte] \u003d\u003e\n        if(ord eq Ordering.Byte) { val a \u003d Arrays.copyOf(xs, len); Arrays.sort(a); a }\n        else boxed\n      case xs: Array[Short] \u003d\u003e\n        if(ord eq Ordering.Short) { val a \u003d Arrays.copyOf(xs, len); Arrays.sort(a); a }\n        else boxed\n      case xs: Array[Boolean] \u003d\u003e\n        if(ord eq Ordering.Boolean) { val a \u003d Arrays.copyOf(xs, len); Sorting.stableSort(a); a }\n        else boxed\n      case xs \u003d\u003e boxed\n    }).asInstanceOf[Array[A]]\n  }\n\n  /** Sorts this array according to a comparison function.\n    *\n    *  The sort is stable. That is, elements that are equal (as determined by\n    *  `lt`) appear in the same order in the sorted sequence as in the original.\n    *\n    *  @param  lt  the comparison function which tests whether\n    *              its first argument precedes its second argument in\n    *              the desired ordering.\n    *  @return     an array consisting of the elements of this array\n    *              sorted according to the comparison function `lt`.\n    */\n  def sortWith(lt: (A, A) \u003d\u003e Boolean): Array[A] \u003d sorted(Ordering.fromLessThan(lt))\n\n  /** Sorts this array according to the Ordering which results from transforming\n    *  an implicitly given Ordering with a transformation function.\n    *\n    *  @see [[scala.math.Ordering]]\n    *  @param   f the transformation function mapping elements\n    *           to some other domain `B`.\n    *  @param   ord the ordering assumed on domain `B`.\n    *  @tparam  B the target type of the transformation `f`, and the type where\n    *           the ordering `ord` is defined.\n    *  @return  an array consisting of the elements of this array\n    *           sorted according to the ordering where `x \u003c y` if\n    *           `ord.lt(f(x), f(y))`.\n    */\n  def sortBy[B](f: A \u003d\u003e B)(implicit ord: Ordering[B]): Array[A] \u003d sorted(ord on f)\n\n  /** Creates a non-strict filter of this array.\n    *\n    *  Note: the difference between `c filter p` and `c withFilter p` is that\n    *        the former creates a new array, whereas the latter only\n    *        restricts the domain of subsequent `map`, `flatMap`, `foreach`,\n    *        and `withFilter` operations.\n    *\n    *  @param p   the predicate used to test elements.\n    *  @return    an object of class `ArrayOps.WithFilter`, which supports\n    *             `map`, `flatMap`, `foreach`, and `withFilter` operations.\n    *             All these operations apply to those elements of this array\n    *             which satisfy the predicate `p`.\n    */\n  def withFilter(p: A \u003d\u003e Boolean): ArrayOps.WithFilter[A] \u003d new ArrayOps.WithFilter[A](p, xs)\n\n  /** Finds index of first occurrence of some value in this array after or at some start index.\n    *\n    *  @param   elem   the element value to search for.\n    *  @param   from   the start index\n    *  @return  the index `\u003e\u003d from` of the first element of this array that is equal (as determined by `\u003d\u003d`)\n    *           to `elem`, or `-1`, if none exists.\n    */\n  def indexOf(elem: A, from: Int \u003d 0): Int \u003d {\n    var i \u003d from\n    while(i \u003c xs.length) {\n      if(elem \u003d\u003d xs(i)) return i\n      i +\u003d 1\n    }\n    -1\n  }\n\n  /** Finds index of the first element satisfying some predicate after or at some start index.\n    *\n    *  @param   p     the predicate used to test elements.\n    *  @param   from  the start index\n    *  @return  the index `\u003e\u003d from` of the first element of this array that satisfies the predicate `p`,\n    *           or `-1`, if none exists.\n    */\n  def indexWhere(@deprecatedName(\"f\", \"2.13.3\") p: A \u003d\u003e Boolean, from: Int \u003d 0): Int \u003d {\n    var i \u003d from\n    while(i \u003c xs.length) {\n      if(p(xs(i))) return i\n      i +\u003d 1\n    }\n    -1\n  }\n\n  /** Finds index of last occurrence of some value in this array before or at a given end index.\n    *\n    *  @param   elem   the element value to search for.\n    *  @param   end    the end index.\n    *  @return  the index `\u003c\u003d end` of the last element of this array that is equal (as determined by `\u003d\u003d`)\n    *           to `elem`, or `-1`, if none exists.\n    */\n  def lastIndexOf(elem: A, end: Int \u003d xs.length - 1): Int \u003d {\n    var i \u003d min(end, xs.length-1)\n    while(i \u003e\u003d 0) {\n      if(elem \u003d\u003d xs(i)) return i\n      i -\u003d 1\n    }\n    -1\n  }\n\n  /** Finds index of last element satisfying some predicate before or at given end index.\n    *\n    *  @param   p     the predicate used to test elements.\n    *  @return  the index `\u003c\u003d end` of the last element of this array that satisfies the predicate `p`,\n    *           or `-1`, if none exists.\n    */\n  def lastIndexWhere(p: A \u003d\u003e Boolean, end: Int \u003d xs.length - 1): Int \u003d {\n    var i \u003d min(end, xs.length-1)\n    while(i \u003e\u003d 0) {\n      if(p(xs(i))) return i\n      i -\u003d 1\n    }\n    -1\n  }\n\n  /** Finds the first element of the array satisfying a predicate, if any.\n    *\n    *  @param p       the predicate used to test elements.\n    *  @return        an option value containing the first element in the array\n    *                 that satisfies `p`, or `None` if none exists.\n    */\n  def find(@deprecatedName(\"f\", \"2.13.3\") p: A \u003d\u003e Boolean): Option[A] \u003d {\n    val idx \u003d indexWhere(p)\n    if(idx \u003d\u003d -1) None else Some(xs(idx))\n  }\n\n  /** Tests whether a predicate holds for at least one element of this array.\n    *\n    *  @param   p     the predicate used to test elements.\n    *  @return        `true` if the given predicate `p` is satisfied by at least one element of this array, otherwise `false`\n    */\n  def exists(@deprecatedName(\"f\", \"2.13.3\") p: A \u003d\u003e Boolean): Boolean \u003d indexWhere(p) \u003e\u003d 0\n\n  /** Tests whether a predicate holds for all elements of this array.\n    *\n    *  @param   p     the predicate used to test elements.\n    *  @return        `true` if this array is empty or the given predicate `p`\n    *                 holds for all elements of this array, otherwise `false`.\n    */\n  def forall(@deprecatedName(\"f\", \"2.13.3\") p: A \u003d\u003e Boolean): Boolean \u003d {\n    var i \u003d 0\n    while(i \u003c xs.length) {\n      if(!p(xs(i))) return false\n      i +\u003d 1\n    }\n    true\n  }\n\n  /** Applies a binary operator to a start value and all elements of this array,\n    * going left to right.\n    *\n    *  @param   z    the start value.\n    *  @param   op   the binary operator.\n    *  @tparam  B    the result type of the binary operator.\n    *  @return  the result of inserting `op` between consecutive elements of this array,\n    *           going left to right with the start value `z` on the left:\n    *           {{{\n    *             op(...op(z, x_1), x_2, ..., x_n)\n    *           }}}\n    *           where `x,,1,,, ..., x,,n,,` are the elements of this array.\n    *           Returns `z` if this array is empty.\n    */\n  def foldLeft[B](z: B)(op: (B, A) \u003d\u003e B): B \u003d {\n    def f[@specialized(Specializable.Everything) T](xs: Array[T], op: (Any, Any) \u003d\u003e Any, z: Any): Any \u003d {\n      val length \u003d xs.length\n      var v: Any \u003d z\n      var i \u003d 0\n      while(i \u003c length) {\n        v \u003d op(v, xs(i))\n        i +\u003d 1\n      }\n      v\n    }\n    ((xs: Any) match {\n      case null \u003d\u003e throw new NullPointerException // null-check first helps static analysis of instanceOf\n      case xs: Array[AnyRef]  \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Int]     \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Double]  \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Long]    \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Float]   \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Char]    \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Byte]    \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Short]   \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Boolean] \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Unit]    \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n    }).asInstanceOf[B]\n  }\n\n   /** Produces an array containing cumulative results of applying the binary\n    *  operator going left to right.\n    *\n    *  @param   z    the start value.\n    *  @param   op   the binary operator.\n    *  @tparam  B    the result type of the binary operator.\n    *  @return  array with intermediate values.\n    *\n    *  Example:\n    *  {{{\n    *    Array(1, 2, 3, 4).scanLeft(0)(_ + _) \u003d\u003d Array(0, 1, 3, 6, 10)\n    *  }}}\n    *\n    */\n  def scanLeft[ B : ClassTag ](z: B)(op: (B, A) \u003d\u003e B): Array[B] \u003d {\n    var v \u003d z\n    var i \u003d 0\n    val res \u003d new Array[B](xs.length + 1)\n    while(i \u003c xs.length) {\n      res(i) \u003d v\n      v \u003d op(v, xs(i))\n      i +\u003d 1\n    }\n    res(i) \u003d v\n    res\n  }\n\n  /** Computes a prefix scan of the elements of the array.\n    *\n    *  Note: The neutral element `z` may be applied more than once.\n    *\n    *  @tparam B         element type of the resulting array\n    *  @param z          neutral element for the operator `op`\n    *  @param op         the associative operator for the scan\n    *\n    *  @return           a new array containing the prefix scan of the elements in this array\n    */\n  def scan[B \u003e: A : ClassTag](z: B)(op: (B, B) \u003d\u003e B): Array[B] \u003d scanLeft(z)(op)\n\n   /** Produces an array containing cumulative results of applying the binary\n    *  operator going right to left.\n    *\n    *  @param   z    the start value.\n    *  @param   op   the binary operator.\n    *  @tparam  B    the result type of the binary operator.\n    *  @return  array with intermediate values.\n    *\n    *  Example:\n    *  {{{\n    *    Array(4, 3, 2, 1).scanRight(0)(_ + _) \u003d\u003d Array(10, 6, 3, 1, 0)\n    *  }}}\n    *\n    */\n  def scanRight[ B : ClassTag ](z: B)(op: (A, B) \u003d\u003e B): Array[B] \u003d {\n    var v \u003d z\n    var i \u003d xs.length - 1\n    val res \u003d new Array[B](xs.length + 1)\n    res(xs.length) \u003d z\n    while(i \u003e\u003d 0) {\n      v \u003d op(xs(i), v)\n      res(i) \u003d v\n      i -\u003d 1\n    }\n    res\n  }\n\n  /** Applies a binary operator to all elements of this array and a start value,\n    * going right to left.\n    *\n    *  @param   z    the start value.\n    *  @param   op   the binary operator.\n    *  @tparam  B    the result type of the binary operator.\n    *  @return  the result of inserting `op` between consecutive elements of this array,\n    *           going right to left with the start value `z` on the right:\n    *           {{{\n    *             op(x_1, op(x_2, ... op(x_n, z)...))\n    *           }}}\n    *           where `x,,1,,, ..., x,,n,,` are the elements of this array.\n    *           Returns `z` if this array is empty.\n    */\n  def foldRight[B](z: B)(op: (A, B) \u003d\u003e B): B \u003d {\n    def f[@specialized(Specializable.Everything) T](xs: Array[T], op: (Any, Any) \u003d\u003e Any, z: Any): Any \u003d {\n      var v \u003d z\n      var i \u003d xs.length - 1\n      while(i \u003e\u003d 0) {\n        v \u003d op(xs(i), v)\n        i -\u003d 1\n      }\n      v\n    }\n    ((xs: Any) match {\n      case null \u003d\u003e throw new NullPointerException\n      case xs: Array[AnyRef]  \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Int]     \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Double]  \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Long]    \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Float]   \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Char]    \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Byte]    \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Short]   \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Boolean] \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n      case xs: Array[Unit]    \u003d\u003e f(xs, op.asInstanceOf[(Any, Any) \u003d\u003e Any], z)\n    }).asInstanceOf[B]\n\n  }\n\n  /** Folds the elements of this array using the specified associative binary operator.\n    *\n    *  @tparam A1     a type parameter for the binary operator, a supertype of `A`.\n    *  @param z       a neutral element for the fold operation; may be added to the result\n    *                 an arbitrary number of times, and must not change the result (e.g., `Nil` for list concatenation,\n    *                 0 for addition, or 1 for multiplication).\n    *  @param op      a binary operator that must be associative.\n    *  @return        the result of applying the fold operator `op` between all the elements, or `z` if this array is empty.\n    */\n  def fold[A1 \u003e: A](z: A1)(op: (A1, A1) \u003d\u003e A1): A1 \u003d foldLeft(z)(op)\n\n  /** Builds a new array by applying a function to all elements of this array.\n    *\n    *  @param f      the function to apply to each element.\n    *  @tparam B     the element type of the returned array.\n    *  @return       a new array resulting from applying the given function\n    *                `f` to each element of this array and collecting the results.\n    */\n  def map[B](f: A \u003d\u003e B)(implicit ct: ClassTag[B]): Array[B] \u003d {\n    val len \u003d xs.length\n    val ys \u003d new Array[B](len)\n    if(len \u003e 0) {\n      var i \u003d 0\n      (xs: Any) match {\n        case xs: Array[AnyRef]  \u003d\u003e while (i \u003c len) { ys(i) \u003d f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n        case xs: Array[Int]     \u003d\u003e while (i \u003c len) { ys(i) \u003d f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n        case xs: Array[Double]  \u003d\u003e while (i \u003c len) { ys(i) \u003d f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n        case xs: Array[Long]    \u003d\u003e while (i \u003c len) { ys(i) \u003d f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n        case xs: Array[Float]   \u003d\u003e while (i \u003c len) { ys(i) \u003d f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n        case xs: Array[Char]    \u003d\u003e while (i \u003c len) { ys(i) \u003d f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n        case xs: Array[Byte]    \u003d\u003e while (i \u003c len) { ys(i) \u003d f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n        case xs: Array[Short]   \u003d\u003e while (i \u003c len) { ys(i) \u003d f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n        case xs: Array[Boolean] \u003d\u003e while (i \u003c len) { ys(i) \u003d f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n      }\n    }\n    ys\n  }\n\n  def mapInPlace(f: A \u003d\u003e A): Array[A] \u003d {\n    var i \u003d 0\n    while (i \u003c xs.length) {\n      xs.update(i, f(xs(i)))\n      i \u003d i + 1\n    }\n    xs\n  }\n\n  /** Builds a new array by applying a function to all elements of this array\n    * and using the elements of the resulting collections.\n    *\n    *  @param f      the function to apply to each element.\n    *  @tparam B     the element type of the returned array.\n    *  @return       a new array resulting from applying the given collection-valued function\n    *                `f` to each element of this array and concatenating the results.\n    */\n  def flatMap[B : ClassTag](f: A \u003d\u003e IterableOnce[B]): Array[B] \u003d {\n    val b \u003d ArrayBuilder.make[B]\n    var i \u003d 0\n    while(i \u003c xs.length) {\n      b ++\u003d f(xs(i))\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  def flatMap[BS, B](f: A \u003d\u003e BS)(implicit asIterable: BS \u003d\u003e Iterable[B], m: ClassTag[B]): Array[B] \u003d\n    flatMap[B](x \u003d\u003e asIterable(f(x)))\n\n  /** Flattens a two-dimensional array by concatenating all its rows\n    *  into a single array.\n    *\n    *  @tparam B         Type of row elements.\n    *  @param asIterable A function that converts elements of this array to rows - Iterables of type `B`.\n    *  @return           An array obtained by concatenating rows of this array.\n    */\n  def flatten[B](implicit asIterable: A \u003d\u003e IterableOnce[B], m: ClassTag[B]): Array[B] \u003d {\n    val b \u003d ArrayBuilder.make[B]\n    val len \u003d xs.length\n    var size \u003d 0\n    var i \u003d 0\n    while(i \u003c len) {\n      xs(i) match {\n        case it: IterableOnce[_] \u003d\u003e\n          val k \u003d it.knownSize\n          if(k \u003e 0) size +\u003d k\n        case a: Array[_] \u003d\u003e size +\u003d a.length\n        case _ \u003d\u003e\n      }\n      i +\u003d 1\n    }\n    if(size \u003e 0) b.sizeHint(size)\n    i \u003d 0\n    while(i \u003c len) {\n      b ++\u003d asIterable(xs(i))\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  /** Builds a new array by applying a partial function to all elements of this array\n    * on which the function is defined.\n    *\n    *  @param pf     the partial function which filters and maps the array.\n    *  @tparam B     the element type of the returned array.\n    *  @return       a new array resulting from applying the given partial function\n    *                `pf` to each element on which it is defined and collecting the results.\n    *                The order of the elements is preserved.\n    */\n  def collect[B : ClassTag](pf: PartialFunction[A, B]): Array[B] \u003d {\n    var i \u003d 0\n    var matched \u003d true\n    def d(x: A): B \u003d {\n      matched \u003d false\n      null.asInstanceOf[B]\n    }\n    val b \u003d ArrayBuilder.make[B]\n    while(i \u003c xs.length) {\n      matched \u003d true\n      val v \u003d pf.applyOrElse(xs(i), d)\n      if(matched) b +\u003d v\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  /** Finds the first element of the array for which the given partial function is defined, and applies the\n    * partial function to it. */\n  def collectFirst[B](f: PartialFunction[A, B]): Option[B] \u003d {\n    var i \u003d 0\n    var matched \u003d true\n    def d(x: A): B \u003d {\n      matched \u003d false\n      null.asInstanceOf[B]\n    }\n    while(i \u003c xs.length) {\n      matched \u003d true\n      val v \u003d f.applyOrElse(xs(i), d)\n      if(matched) return Some(v)\n      i +\u003d 1\n    }\n    None\n  }\n\n  /** Returns an array formed from this array and another iterable collection\n    * by combining corresponding elements in pairs.\n    * If one of the two collections is longer than the other, its remaining elements are ignored.\n    *\n    *  @param   that  The iterable providing the second half of each result pair\n    *  @tparam  B     the type of the second half of the returned pairs\n    *  @return        a new array containing pairs consisting of corresponding elements of this array and `that`.\n    *                 The length of the returned array is the minimum of the lengths of this array and `that`.\n    */\n  def zip[B](that: IterableOnce[B]): Array[(A, B)] \u003d {\n    val b \u003d new ArrayBuilder.ofRef[(A, B)]()\n    val k \u003d that.knownSize\n    b.sizeHint(if(k \u003e\u003d 0) min(k, xs.length) else xs.length)\n    var i \u003d 0\n    val it \u003d that.iterator\n    while(i \u003c xs.length \u0026\u0026 it.hasNext) {\n      b +\u003d ((xs(i), it.next()))\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  /** Analogous to `zip` except that the elements in each collection are not consumed until a strict operation is\n    * invoked on the returned `LazyZip2` decorator.\n    *\n    * Calls to `lazyZip` can be chained to support higher arities (up to 4) without incurring the expense of\n    * constructing and deconstructing intermediary tuples.\n    *\n    * {{{\n    *    val xs \u003d List(1, 2, 3)\n    *    val res \u003d (xs lazyZip xs lazyZip xs lazyZip xs).map((a, b, c, d) \u003d\u003e a + b + c + d)\n    *    // res \u003d\u003d List(4, 8, 12)\n    * }}}\n    *\n    * @param that the iterable providing the second element of each eventual pair\n    * @tparam B   the type of the second element in each eventual pair\n    * @return a decorator `LazyZip2` that allows strict operations to be performed on the lazily evaluated pairs\n    *         or chained calls to `lazyZip`. Implicit conversion to `Iterable[(A, B)]` is also supported.\n    */\n  def lazyZip[B](that: Iterable[B]): LazyZip2[A, B, Array[A]] \u003d new LazyZip2(xs, immutable.ArraySeq.unsafeWrapArray(xs), that)\n\n  /** Returns an array formed from this array and another iterable collection\n    *  by combining corresponding elements in pairs.\n    *  If one of the two collections is shorter than the other,\n    *  placeholder elements are used to extend the shorter collection to the length of the longer.\n    *\n    *  @param that     the iterable providing the second half of each result pair\n    *  @param thisElem the element to be used to fill up the result if this array is shorter than `that`.\n    *  @param thatElem the element to be used to fill up the result if `that` is shorter than this array.\n    *  @return        a new array containing pairs consisting of corresponding elements of this array and `that`.\n    *                 The length of the returned array is the maximum of the lengths of this array and `that`.\n    *                 If this array is shorter than `that`, `thisElem` values are used to pad the result.\n    *                 If `that` is shorter than this array, `thatElem` values are used to pad the result.\n    */\n  def zipAll[A1 \u003e: A, B](that: Iterable[B], thisElem: A1, thatElem: B): Array[(A1, B)] \u003d {\n    val b \u003d new ArrayBuilder.ofRef[(A1, B)]()\n    val k \u003d that.knownSize\n    b.sizeHint(max(k, xs.length))\n    var i \u003d 0\n    val it \u003d that.iterator\n    while(i \u003c xs.length \u0026\u0026 it.hasNext) {\n      b +\u003d ((xs(i), it.next()))\n      i +\u003d 1\n    }\n    while(it.hasNext) {\n      b +\u003d ((thisElem, it.next()))\n      i +\u003d 1\n    }\n    while(i \u003c xs.length) {\n      b +\u003d ((xs(i), thatElem))\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  /** Zips this array with its indices.\n    *\n    *  @return   A new array containing pairs consisting of all elements of this array paired with their index.\n    *            Indices start at `0`.\n    */\n  def zipWithIndex: Array[(A, Int)] \u003d {\n    val b \u003d new Array[(A, Int)](xs.length)\n    var i \u003d 0\n    while(i \u003c xs.length) {\n      b(i) \u003d ((xs(i), i))\n      i +\u003d 1\n    }\n    b\n  }\n\n  /** A copy of this array with an element appended. */\n  def appended[B \u003e: A : ClassTag](x: B): Array[B] \u003d {\n    val dest \u003d Array.copyAs[B](xs, xs.length+1)\n    dest(xs.length) \u003d x\n    dest\n  }\n\n  @`inline` final def :+ [B \u003e: A : ClassTag](x: B): Array[B] \u003d appended(x)\n\n  /** A copy of this array with an element prepended. */\n  def prepended[B \u003e: A : ClassTag](x: B): Array[B] \u003d {\n    val dest \u003d new Array[B](xs.length + 1)\n    dest(0) \u003d x\n    Array.copy(xs, 0, dest, 1, xs.length)\n    dest\n  }\n\n  @`inline` final def +: [B \u003e: A : ClassTag](x: B): Array[B] \u003d prepended(x)\n\n  /** A copy of this array with all elements of a collection prepended. */\n  def prependedAll[B \u003e: A : ClassTag](prefix: IterableOnce[B]): Array[B] \u003d {\n    val b \u003d ArrayBuilder.make[B]\n    val k \u003d prefix.knownSize\n    if(k \u003e\u003d 0) b.sizeHint(k + xs.length)\n    b.addAll(prefix)\n    if(k \u003c 0) b.sizeHint(b.length + xs.length)\n    b.addAll(xs)\n    b.result()\n  }\n\n  /** A copy of this array with all elements of an array prepended. */\n  def prependedAll[B \u003e: A : ClassTag](prefix: Array[_ \u003c: B]): Array[B] \u003d {\n    val dest \u003d Array.copyAs[B](prefix, prefix.length+xs.length)\n    Array.copy(xs, 0, dest, prefix.length, xs.length)\n    dest\n  }\n\n  @`inline` final def ++: [B \u003e: A : ClassTag](prefix: IterableOnce[B]): Array[B] \u003d prependedAll(prefix)\n\n  @`inline` final def ++: [B \u003e: A : ClassTag](prefix: Array[_ \u003c: B]): Array[B] \u003d prependedAll(prefix)\n\n  /** A copy of this array with all elements of a collection appended. */\n  def appendedAll[B \u003e: A : ClassTag](suffix: IterableOnce[B]): Array[B] \u003d {\n    val b \u003d ArrayBuilder.make[B]\n    val k \u003d suffix.knownSize\n    if(k \u003e\u003d 0) b.sizeHint(k + xs.length)\n    b.addAll(xs)\n    b.addAll(suffix)\n    b.result()\n  }\n\n  /** A copy of this array with all elements of an array appended. */\n  def appendedAll[B \u003e: A : ClassTag](suffix: Array[_ \u003c: B]): Array[B] \u003d {\n    val dest \u003d Array.copyAs[B](xs, xs.length+suffix.length)\n    Array.copy(suffix, 0, dest, xs.length, suffix.length)\n    dest\n  }\n\n  @`inline` final def :++ [B \u003e: A : ClassTag](suffix: IterableOnce[B]): Array[B] \u003d appendedAll(suffix)\n\n  @`inline` final def :++ [B \u003e: A : ClassTag](suffix: Array[_ \u003c: B]): Array[B] \u003d appendedAll(suffix)\n\n  @`inline` final def concat[B \u003e: A : ClassTag](suffix: IterableOnce[B]): Array[B] \u003d appendedAll(suffix)\n\n  @`inline` final def concat[B \u003e: A : ClassTag](suffix: Array[_ \u003c: B]): Array[B] \u003d appendedAll(suffix)\n\n  @`inline` final def ++[B \u003e: A : ClassTag](xs: IterableOnce[B]): Array[B] \u003d appendedAll(xs)\n\n  @`inline` final def ++[B \u003e: A : ClassTag](xs: Array[_ \u003c: B]): Array[B] \u003d appendedAll(xs)\n\n  /** Tests whether this array contains a given value as an element.\n    *\n    *  @param elem  the element to test.\n    *  @return     `true` if this array has an element that is equal (as\n    *              determined by `\u003d\u003d`) to `elem`, `false` otherwise.\n    */\n  def contains(elem: A): Boolean \u003d exists (_ \u003d\u003d elem)\n\n  /** Returns a copy of this array with patched values.\n    * Patching at negative indices is the same as patching starting at 0.\n    * Patching at indices at or larger than the length of the original array appends the patch to the end.\n    * If more values are replaced than actually exist, the excess is ignored.\n    *\n    *  @param from       The start index from which to patch\n    *  @param other      The patch values\n    *  @param replaced   The number of values in the original array that are replaced by the patch.\n    */\n  def patch[B \u003e: A : ClassTag](from: Int, other: IterableOnce[B], replaced: Int): Array[B] \u003d {\n    val b \u003d ArrayBuilder.make[B]\n    val k \u003d other.knownSize\n    val r \u003d if(replaced \u003c 0) 0 else replaced\n    if(k \u003e\u003d 0) b.sizeHint(xs.length + k - r)\n    val chunk1 \u003d if(from \u003e 0) min(from, xs.length) else 0\n    if(chunk1 \u003e 0) b.addAll(xs, 0, chunk1)\n    b ++\u003d other\n    val remaining \u003d xs.length - chunk1 - r\n    if(remaining \u003e 0) b.addAll(xs, xs.length - remaining, remaining)\n    b.result()\n  }\n\n  /** Converts an array of pairs into an array of first elements and an array of second elements.\n    *\n    *  @tparam A1    the type of the first half of the element pairs\n    *  @tparam A2    the type of the second half of the element pairs\n    *  @param asPair an implicit conversion which asserts that the element type\n    *                of this Array is a pair.\n    *  @param ct1    a class tag for `A1` type parameter that is required to create an instance\n    *                of `Array[A1]`\n    *  @param ct2    a class tag for `A2` type parameter that is required to create an instance\n    *                of `Array[A2]`\n    *  @return       a pair of Arrays, containing, respectively, the first and second half\n    *                of each element pair of this Array.\n    */\n  def unzip[A1, A2](implicit asPair: A \u003d\u003e (A1, A2), ct1: ClassTag[A1], ct2: ClassTag[A2]): (Array[A1], Array[A2]) \u003d {\n    val a1 \u003d new Array[A1](xs.length)\n    val a2 \u003d new Array[A2](xs.length)\n    var i \u003d 0\n    while (i \u003c xs.length) {\n      val e \u003d asPair(xs(i))\n      a1(i) \u003d e._1\n      a2(i) \u003d e._2\n      i +\u003d 1\n    }\n    (a1, a2)\n  }\n\n  /** Converts an array of triples into three arrays, one containing the elements from each position of the triple.\n    *\n    *  @tparam A1      the type of the first of three elements in the triple\n    *  @tparam A2      the type of the second of three elements in the triple\n    *  @tparam A3      the type of the third of three elements in the triple\n    *  @param asTriple an implicit conversion which asserts that the element type\n    *                  of this Array is a triple.\n    *  @param ct1      a class tag for T1 type parameter that is required to create an instance\n    *                  of Array[T1]\n    *  @param ct2      a class tag for T2 type parameter that is required to create an instance\n    *                  of Array[T2]\n    *  @param ct3      a class tag for T3 type parameter that is required to create an instance\n    *                  of Array[T3]\n    *  @return         a triple of Arrays, containing, respectively, the first, second, and third\n    *                  elements from each element triple of this Array.\n    */\n  def unzip3[A1, A2, A3](implicit asTriple: A \u003d\u003e (A1, A2, A3), ct1: ClassTag[A1], ct2: ClassTag[A2],\n                         ct3: ClassTag[A3]): (Array[A1], Array[A2], Array[A3]) \u003d {\n    val a1 \u003d new Array[A1](xs.length)\n    val a2 \u003d new Array[A2](xs.length)\n    val a3 \u003d new Array[A3](xs.length)\n    var i \u003d 0\n    while (i \u003c xs.length) {\n      val e \u003d asTriple(xs(i))\n      a1(i) \u003d e._1\n      a2(i) \u003d e._2\n      a3(i) \u003d e._3\n      i +\u003d 1\n    }\n    (a1, a2, a3)\n  }\n\n  /** Transposes a two dimensional array.\n    *\n    *  @tparam B       Type of row elements.\n    *  @param asArray  A function that converts elements of this array to rows - arrays of type `B`.\n    *  @return         An array obtained by replacing elements of this arrays with rows the represent.\n    */\n  def transpose[B](implicit asArray: A \u003d\u003e Array[B]): Array[Array[B]] \u003d {\n    val aClass \u003d xs.getClass.getComponentType\n    val bb \u003d new ArrayBuilder.ofRef[Array[B]]()(ClassTag[Array[B]](aClass))\n    if (xs.length \u003d\u003d 0) bb.result()\n    else {\n      def mkRowBuilder() \u003d ArrayBuilder.make[B](ClassTag[B](aClass.getComponentType))\n      val bs \u003d new ArrayOps(asArray(xs(0))).map((x: B) \u003d\u003e mkRowBuilder())\n      for (xs \u003c- this) {\n        var i \u003d 0\n        for (x \u003c- new ArrayOps(asArray(xs))) {\n          bs(i) +\u003d x\n          i +\u003d 1\n        }\n      }\n      for (b \u003c- new ArrayOps(bs)) bb +\u003d b.result()\n      bb.result()\n    }\n  }\n\n  /** Apply `f` to each element for its side effects.\n    * Note: [U] parameter needed to help scalac\u0027s type inference.\n    */\n  def foreach[U](f: A \u003d\u003e U): Unit \u003d {\n    val len \u003d xs.length\n    var i \u003d 0\n    (xs: Any) match {\n      case xs: Array[AnyRef]  \u003d\u003e while (i \u003c len) { f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n      case xs: Array[Int]     \u003d\u003e while (i \u003c len) { f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n      case xs: Array[Double]  \u003d\u003e while (i \u003c len) { f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n      case xs: Array[Long]    \u003d\u003e while (i \u003c len) { f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n      case xs: Array[Float]   \u003d\u003e while (i \u003c len) { f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n      case xs: Array[Char]    \u003d\u003e while (i \u003c len) { f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n      case xs: Array[Byte]    \u003d\u003e while (i \u003c len) { f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n      case xs: Array[Short]   \u003d\u003e while (i \u003c len) { f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n      case xs: Array[Boolean] \u003d\u003e while (i \u003c len) { f(xs(i).asInstanceOf[A]); i \u003d i+1 }\n    }\n  }\n\n  /** Selects all the elements of this array ignoring the duplicates.\n    *\n    * @return a new array consisting of all the elements of this array without duplicates.\n    */\n  def distinct: Array[A] \u003d distinctBy(identity)\n\n  /** Selects all the elements of this array ignoring the duplicates as determined by `\u003d\u003d` after applying\n    * the transforming function `f`.\n    *\n    * @param f The transforming function whose result is used to determine the uniqueness of each element\n    * @tparam B the type of the elements after being transformed by `f`\n    * @return a new array consisting of all the elements of this array without duplicates.\n    */\n  def distinctBy[B](f: A \u003d\u003e B): Array[A] \u003d\n    ArrayBuilder.make[A].addAll(iterator.distinctBy(f)).result()\n\n  /** A copy of this array with an element value appended until a given target length is reached.\n    *\n    *  @param   len   the target length\n    *  @param   elem  the padding value\n    *  @tparam B      the element type of the returned array.\n    *  @return a new array consisting of\n    *          all elements of this array followed by the minimal number of occurrences of `elem` so\n    *          that the resulting collection has a length of at least `len`.\n    */\n  def padTo[B \u003e: A : ClassTag](len: Int, elem: B): Array[B] \u003d {\n    var i \u003d xs.length\n    val newlen \u003d max(i, len)\n    val dest \u003d Array.copyAs[B](xs, newlen)\n    while(i \u003c newlen) {\n      dest(i) \u003d elem\n      i +\u003d 1\n    }\n    dest\n  }\n\n  /** Produces the range of all indices of this sequence.\n    *\n    *  @return  a `Range` value from `0` to one less than the length of this array.\n    */\n  def indices: Range \u003d Range(0, xs.length)\n\n  /** Partitions this array into a map of arrays according to some discriminator function.\n    *\n    *  @param f     the discriminator function.\n    *  @tparam K    the type of keys returned by the discriminator function.\n    *  @return      A map from keys to arrays such that the following invariant holds:\n    *               {{{\n    *                 (xs groupBy f)(k) \u003d xs filter (x \u003d\u003e f(x) \u003d\u003d k)\n    *               }}}\n    *               That is, every key `k` is bound to an array of those elements `x`\n    *               for which `f(x)` equals `k`.\n    */\n  def groupBy[K](f: A \u003d\u003e K): immutable.Map[K, Array[A]] \u003d {\n    val m \u003d mutable.Map.empty[K, ArrayBuilder[A]]\n    val len \u003d xs.length\n    var i \u003d 0\n    while(i \u003c len) {\n      val elem \u003d xs(i)\n      val key \u003d f(elem)\n      val bldr \u003d m.getOrElseUpdate(key, ArrayBuilder.make[A])\n      bldr +\u003d elem\n      i +\u003d 1\n    }\n    m.view.mapValues(_.result()).toMap\n  }\n\n  /**\n    * Partitions this array into a map of arrays according to a discriminator function `key`.\n    * Each element in a group is transformed into a value of type `B` using the `value` function.\n    *\n    * It is equivalent to `groupBy(key).mapValues(_.map(f))`, but more efficient.\n    *\n    * {{{\n    *   case class User(name: String, age: Int)\n    *\n    *   def namesByAge(users: Array[User]): Map[Int, Array[String]] \u003d\n    *     users.groupMap(_.age)(_.name)\n    * }}}\n    *\n    * @param key the discriminator function\n    * @param f the element transformation function\n    * @tparam K the type of keys returned by the discriminator function\n    * @tparam B the type of values returned by the transformation function\n    */\n  def groupMap[K, B : ClassTag](key: A \u003d\u003e K)(f: A \u003d\u003e B): immutable.Map[K, Array[B]] \u003d {\n    val m \u003d mutable.Map.empty[K, ArrayBuilder[B]]\n    val len \u003d xs.length\n    var i \u003d 0\n    while(i \u003c len) {\n      val elem \u003d xs(i)\n      val k \u003d key(elem)\n      val bldr \u003d m.getOrElseUpdate(k, ArrayBuilder.make[B])\n      bldr +\u003d f(elem)\n      i +\u003d 1\n    }\n    m.view.mapValues(_.result()).toMap\n  }\n\n  @`inline` final def toSeq: immutable.Seq[A] \u003d toIndexedSeq\n\n  def toIndexedSeq: immutable.IndexedSeq[A] \u003d\n    immutable.ArraySeq.unsafeWrapArray(Array.copyOf(xs, xs.length))\n\n  /** Copy elements of this array to another array.\n    *  Fills the given array `xs` starting at index 0.\n    *  Copying will stop once either all the elements of this array have been copied,\n    *  or the end of the array is reached.\n    *\n    *  @param  xs   the array to fill.\n    *  @tparam B      the type of the elements of the array.\n    */\n  def copyToArray[B \u003e: A](xs: Array[B]): Int \u003d copyToArray(xs, 0)\n\n  /** Copy elements of this array to another array.\n    *  Fills the given array `xs` starting at index `start`.\n    *  Copying will stop once either all the elements of this array have been copied,\n    *  or the end of the array is reached.\n    *\n    *  @param  xs   the array to fill.\n    *  @param  start  the starting index within the destination array.\n    *  @tparam B      the type of the elements of the array.\n    */\n  def copyToArray[B \u003e: A](xs: Array[B], start: Int): Int \u003d copyToArray(xs, start, Int.MaxValue)\n\n  /** Copy elements of this array to another array.\n    *  Fills the given array `xs` starting at index `start` with at most `len` values.\n    *  Copying will stop once either all the elements of this array have been copied,\n    *  or the end of the array is reached, or `len` elements have been copied.\n    *\n    *  @param  xs   the array to fill.\n    *  @param  start  the starting index within the destination array.\n    *  @param  len    the maximal number of elements to copy.\n    *  @tparam B      the type of the elements of the array.\n    */\n  def copyToArray[B \u003e: A](xs: Array[B], start: Int, len: Int): Int \u003d {\n    val copied \u003d IterableOnce.elemsToCopyToArray(this.xs.length, xs.length, start, len)\n    if (copied \u003e 0) {\n      Array.copy(this.xs, 0, xs, start, copied)\n    }\n    copied\n  }\n\n  /** Create a copy of this array with the specified element type. */\n  def toArray[B \u003e: A: ClassTag]: Array[B] \u003d {\n    val destination \u003d new Array[B](xs.length)\n    copyToArray(destination, 0)\n    destination\n  }\n\n  /** Counts the number of elements in this array which satisfy a predicate */\n  def count(p: A \u003d\u003e Boolean): Int \u003d {\n    var i, res \u003d 0\n    val len \u003d xs.length\n    while(i \u003c len) {\n      if(p(xs(i))) res +\u003d 1\n      i +\u003d 1\n    }\n    res\n  }\n\n  // can\u0027t use a default arg because we already have another overload with a default arg\n  /** Tests whether this array starts with the given array. */\n  @`inline` def startsWith[B \u003e: A](that: Array[B]): Boolean \u003d startsWith(that, 0)\n\n  /** Tests whether this array contains the given array at a given index.\n    *\n    * @param  that    the array to test\n    * @param  offset  the index where the array is searched.\n    * @return `true` if the array `that` is contained in this array at\n    *         index `offset`, otherwise `false`.\n    */\n  def startsWith[B \u003e: A](that: Array[B], offset: Int): Boolean \u003d {\n    val safeOffset \u003d offset.max(0)\n    val thatl \u003d that.length\n    if(thatl \u003e xs.length-safeOffset) thatl \u003d\u003d 0\n    else {\n      var i \u003d 0\n      while(i \u003c thatl) {\n        if(xs(i+safeOffset) !\u003d that(i)) return false\n        i +\u003d 1\n      }\n      true\n    }\n  }\n\n  /** Tests whether this array ends with the given array.\n    *\n    *  @param  that    the array to test\n    *  @return `true` if this array has `that` as a suffix, `false` otherwise.\n    */\n  def endsWith[B \u003e: A](that: Array[B]): Boolean \u003d {\n    val thatl \u003d that.length\n    val off \u003d xs.length - thatl\n    if(off \u003c 0) false\n    else {\n      var i \u003d 0\n      while(i \u003c thatl) {\n        if(xs(i+off) !\u003d that(i)) return false\n        i +\u003d 1\n      }\n      true\n    }\n  }\n\n  /** A copy of this array with one single replaced element.\n    *  @param  index  the position of the replacement\n    *  @param  elem   the replacing element\n    *  @return a new array which is a copy of this array with the element at position `index` replaced by `elem`.\n    *  @throws IndexOutOfBoundsException if `index` does not satisfy `0 \u003c\u003d index \u003c length`.\n    */\n  def updated[B \u003e: A : ClassTag](index: Int, elem: B): Array[B] \u003d {\n    if(index \u003c 0 || index \u003e\u003d xs.length) throw new IndexOutOfBoundsException(s\"$index is out of bounds (min 0, max ${xs.length-1})\")\n    val dest \u003d toArray[B]\n    dest(index) \u003d elem\n    dest\n  }\n\n  @`inline` def view: IndexedSeqView[A] \u003d new ArrayOps.ArrayView[A](xs)\n\n\n  /* ************************************************************************************************************\n     The remaining methods are provided for completeness but they delegate to mutable.ArraySeq implementations which\n     may not provide the best possible performance. We need them in `ArrayOps` because their return type\n     mentions `C` (which is `Array[A]` in `StringOps` and `mutable.ArraySeq[A]` in `mutable.ArraySeq`).\n     ************************************************************************************************************ */\n\n\n  /** Computes the multiset difference between this array and another sequence.\n    *\n    *  @param that   the sequence of elements to remove\n    *  @return       a new array which contains all elements of this array\n    *                except some of occurrences of elements that also appear in `that`.\n    *                If an element value `x` appears\n    *                \u0027\u0027n\u0027\u0027 times in `that`, then the first \u0027\u0027n\u0027\u0027 occurrences of `x` will not form\n    *                part of the result, but any following occurrences will.\n    */\n  def diff[B \u003e: A](that: Seq[B]): Array[A] \u003d mutable.ArraySeq.make(xs).diff(that).array.asInstanceOf[Array[A]]\n\n  /** Computes the multiset intersection between this array and another sequence.\n    *\n    *  @param that   the sequence of elements to intersect with.\n    *  @return       a new array which contains all elements of this array\n    *                which also appear in `that`.\n    *                If an element value `x` appears\n    *                \u0027\u0027n\u0027\u0027 times in `that`, then the first \u0027\u0027n\u0027\u0027 occurrences of `x` will be retained\n    *                in the result, but any following occurrences will be omitted.\n    */\n  def intersect[B \u003e: A](that: Seq[B]): Array[A] \u003d mutable.ArraySeq.make(xs).intersect(that).array.asInstanceOf[Array[A]]\n\n  /** Groups elements in fixed size blocks by passing a \"sliding window\"\n    *  over them (as opposed to partitioning them, as is done in grouped.)\n    *  @see [[scala.collection.Iterator]], method `sliding`\n    *\n    *  @param size the number of elements per group\n    *  @param step the distance between the first elements of successive groups\n    *  @return An iterator producing arrays of size `size`, except the\n    *          last element (which may be the only element) will be truncated\n    *          if there are fewer than `size` elements remaining to be grouped.\n    */\n  def sliding(size: Int, step: Int \u003d 1): Iterator[Array[A]] \u003d mutable.ArraySeq.make(xs).sliding(size, step).map(_.array.asInstanceOf[Array[A]])\n\n  /** Iterates over combinations.  A _combination_ of length `n` is a subsequence of\n    *  the original array, with the elements taken in order.  Thus, `Array(\"x\", \"y\")` and `Array(\"y\", \"y\")`\n    *  are both length-2 combinations of `Array(\"x\", \"y\", \"y\")`, but `Array(\"y\", \"x\")` is not.  If there is\n    *  more than one way to generate the same subsequence, only one will be returned.\n    *\n    *  For example, `Array(\"x\", \"y\", \"y\", \"y\")` has three different ways to generate `Array(\"x\", \"y\")` depending on\n    *  whether the first, second, or third `\"y\"` is selected.  However, since all are\n    *  identical, only one will be chosen.  Which of the three will be taken is an\n    *  implementation detail that is not defined.\n    *\n    *  @return   An Iterator which traverses the possible n-element combinations of this array.\n    *  @example  {{{\n    *  Array(\"a\", \"b\", \"b\", \"b\", \"c\").combinations(2) \u003d\u003d Iterator(Array(a, b), Array(a, c), Array(b, b), Array(b, c))\n    *  }}}\n    */\n  def combinations(n: Int): Iterator[Array[A]] \u003d mutable.ArraySeq.make(xs).combinations(n).map(_.array.asInstanceOf[Array[A]])\n\n  /** Iterates over distinct permutations.\n    *\n    *  @return   An Iterator which traverses the distinct permutations of this array.\n    *  @example {{{\n    *  Array(\"a\", \"b\", \"b\").permutations \u003d\u003d Iterator(Array(a, b, b), Array(b, a, b), Array(b, b, a))\n    *  }}}\n    */\n  def permutations: Iterator[Array[A]] \u003d mutable.ArraySeq.make(xs).permutations.map(_.array.asInstanceOf[Array[A]])\n\n  // we have another overload here, so we need to duplicate this method\n  /** Tests whether this array contains the given sequence at a given index.\n    *\n    * @param  that    the sequence to test\n    * @param  offset  the index where the sequence is searched.\n    * @return `true` if the sequence `that` is contained in this array at\n    *         index `offset`, otherwise `false`.\n    */\n  def startsWith[B \u003e: A](that: IterableOnce[B], offset: Int \u003d 0): Boolean \u003d mutable.ArraySeq.make(xs).startsWith(that, offset)\n\n  // we have another overload here, so we need to duplicate this method\n  /** Tests whether this array ends with the given sequence.\n    *\n    *  @param  that    the sequence to test\n    *  @return `true` if this array has `that` as a suffix, `false` otherwise.\n    */\n  def endsWith[B \u003e: A](that: Iterable[B]): Boolean \u003d mutable.ArraySeq.make(xs).endsWith(that)\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

2020.11.11 18:57:06 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:57:06 INFO  time: compiled task1-scala in 0.61s
Nov 11, 2020 6:57:09 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Predef.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\npackage scala\n\nimport scala.language.implicitConversions\n\nimport scala.collection.{ mutable, immutable, generic }\nimport immutable.StringOps\nimport mutable.ArrayOps\nimport generic.CanBuildFrom\nimport scala.annotation.{ elidable, implicitNotFound }\nimport scala.annotation.elidable.ASSERTION\nimport scala.io.StdIn\n\n/** The `Predef` object provides definitions that are accessible in all Scala\n *  compilation units without explicit qualification.\n *\n *  \u003d\u003d\u003d Commonly Used Types \u003d\u003d\u003d\n *  Predef provides type aliases for types which are commonly used, such as\n *  the immutable collection types [[scala.collection.immutable.Map]],\n *  [[scala.collection.immutable.Set]], and the [[scala.collection.immutable.List]]\n *  constructors ([[scala.collection.immutable.::]] and\n *  [[scala.collection.immutable.Nil]]).\n *\n *  \u003d\u003d\u003d Console Output \u003d\u003d\u003d\n *  For basic console output, `Predef` provides convenience methods [[print(x:Any* print]] and [[println(x:Any* println]],\n *  which are aliases of the methods in the object [[scala.Console]].\n *\n *  \u003d\u003d\u003d Assertions \u003d\u003d\u003d\n *  A set of `assert` functions are provided for use as a way to document\n *  and dynamically check invariants in code. Invocations of `assert` can be elided\n *  at compile time by providing the command line option `-Xdisable-assertions`,\n *  which raises `-Xelide-below` above `elidable.ASSERTION`, to the `scalac` command.\n *\n *  Variants of `assert` intended for use with static analysis tools are also\n *  provided: `assume`, `require` and `ensuring`. `require` and `ensuring` are\n *  intended for use as a means of design-by-contract style specification\n *  of pre- and post-conditions on functions, with the intention that these\n *  specifications could be consumed by a static analysis tool. For instance,\n *\n *  {{{\n *  def addNaturals(nats: List[Int]): Int \u003d {\n *    require(nats forall (_ \u003e\u003d 0), \"List contains negative numbers\")\n *    nats.foldLeft(0)(_ + _)\n *  } ensuring(_ \u003e\u003d 0)\n *  }}}\n *\n *  The declaration of `addNaturals` states that the list of integers passed should\n *  only contain natural numbers (i.e. non-negative), and that the result returned\n *  will also be natural. `require` is distinct from `assert` in that if the\n *  condition fails, then the caller of the function is to blame rather than a\n *  logical error having been made within `addNaturals` itself. `ensuring` is a\n *  form of `assert` that declares the guarantee the function is providing with\n *  regards to its return value.\n *\n *  \u003d\u003d\u003d Implicit Conversions \u003d\u003d\u003d\n *  A number of commonly applied implicit conversions are also defined here, and\n *  in the parent type [[scala.LowPriorityImplicits]]. Implicit conversions\n *  are provided for the \"widening\" of numeric values, for instance, converting a\n *  Short value to a Long value as required, and to add additional higher-order\n *  functions to Array values. These are described in more detail in the documentation of [[scala.Array]].\n *\n * @groupname utilities Utility Methods\n * @groupprio utilities 10\n *\n * @groupname assertions Assertions\n * @groupprio assertions 20\n * @groupdesc assertions These methods support program verification and runtime correctness.\n *\n * @groupname console-output Console Output\n * @groupprio console-output 30\n * @groupdesc console-output These methods provide output via the console.\n *\n * @groupname type-constraints Type Constraints\n * @groupprio type-constraints 40\n * @groupdesc type-constraints These entities allows constraints between types to be stipulated.\n *\n * @groupname aliases Aliases\n * @groupprio aliases 50\n * @groupdesc aliases These aliases bring selected immutable types into scope without any imports.\n *\n * @groupname conversions-string String Conversions\n * @groupprio conversions-string 60\n * @groupdesc conversions-string Conversions to and from String and StringOps.\n *\n * @groupname implicit-classes-any Implicit Classes\n * @groupprio implicit-classes-any 70\n * @groupdesc implicit-classes-any These implicit classes add useful extension methods to every type.\n *\n * @groupname implicit-classes-char CharSequence Conversions\n * @groupprio implicit-classes-char 80\n * @groupdesc implicit-classes-char These implicit classes add CharSequence methods to Array[Char] and IndexedSeq[Char] instances.\n *\n * @groupname conversions-java-to-anyval Java to Scala\n * @groupprio conversions-java-to-anyval 90\n * @groupdesc conversions-java-to-anyval Implicit conversion from Java primitive wrapper types to Scala equivalents.\n *\n * @groupname conversions-anyval-to-java Scala to Java\n * @groupprio conversions-anyval-to-java 100\n * @groupdesc conversions-anyval-to-java Implicit conversion from Scala AnyVals to Java primitive wrapper types equivalents.\n *\n * @groupname conversions-array-to-wrapped-array Array to WrappedArray\n * @groupprio conversions-array-to-wrapped-array 110\n * @groupdesc conversions-array-to-wrapped-array Conversions from Arrays to WrappedArrays.\n */\nobject Predef extends LowPriorityImplicits with DeprecatedPredef {\n  /**\n   * Retrieve the runtime representation of a class type. `classOf[T]` is equivalent to\n   * the class literal `T.class` in Java.\n   *\n   * @example {{{\n   * val listClass \u003d classOf[List[_]]\n   * // listClass is java.lang.Class[List[_]] \u003d class scala.collection.immutable.List\n   *\n   * val mapIntString \u003d classOf[Map[Int,String]]\n   * // mapIntString is java.lang.Class[Map[Int,String]] \u003d interface scala.collection.immutable.Map\n   * }}}\n   * @group utilities\n   */\n  def classOf[T]: Class[T] \u003d null // This is a stub method. The actual implementation is filled in by the compiler.\n\n  /** The `String` type in Scala has methods that come either from the underlying\n   *  Java String (see the documentation corresponding to your Java version, for\n   *  example [[http://docs.oracle.com/javase/8/docs/api/java/lang/String.html]]) or\n   *  are added implicitly through [[scala.collection.immutable.StringOps]].\n   *  @group aliases\n   */\n  type String        \u003d java.lang.String\n  /**  @group aliases */\n  type Class[T]      \u003d java.lang.Class[T]\n\n  // miscellaneous -----------------------------------------------------\n  scala.`package`                         // to force scala package object to be seen.\n  scala.collection.immutable.List         // to force Nil, :: to be seen.\n\n  /**  @group aliases */\n  type Function[-A, +B] \u003d Function1[A, B]\n\n  /**  @group aliases */\n  type Map[A, +B] \u003d immutable.Map[A, B]\n  /**  @group aliases */\n  type Set[A]     \u003d immutable.Set[A]\n  /**  @group aliases */\n  val Map         \u003d immutable.Map\n  /**  @group aliases */\n  val Set         \u003d immutable.Set\n\n  // Manifest types, companions, and incantations for summoning\n  @annotation.implicitNotFound(msg \u003d \"No ClassManifest available for ${T}.\")\n  @deprecated(\"use `scala.reflect.ClassTag` instead\", \"2.10.0\")\n  type ClassManifest[T] \u003d scala.reflect.ClassManifest[T]\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"this notion doesn\u0027t have a corresponding concept in 2.10, because scala.reflect.runtime.universe.TypeTag can capture arbitrary types. Use type tags instead of manifests, and there will be no need in opt manifests.\", \"2.10.0\")\n  type OptManifest[T]   \u003d scala.reflect.OptManifest[T]\n  @annotation.implicitNotFound(msg \u003d \"No Manifest available for ${T}.\")\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"use `scala.reflect.ClassTag` (to capture erasures) or scala.reflect.runtime.universe.TypeTag (to capture types) or both instead\", \"2.10.0\")\n  type Manifest[T]      \u003d scala.reflect.Manifest[T]\n  @deprecated(\"use `scala.reflect.ClassTag` instead\", \"2.10.0\")\n  val ClassManifest     \u003d scala.reflect.ClassManifest\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"use `scala.reflect.ClassTag` (to capture erasures) or scala.reflect.runtime.universe.TypeTag (to capture types) or both instead\", \"2.10.0\")\n  val Manifest          \u003d scala.reflect.Manifest\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"this notion doesn\u0027t have a corresponding concept in 2.10, because scala.reflect.runtime.universe.TypeTag can capture arbitrary types. Use type tags instead of manifests, and there will be no need in opt manifests.\", \"2.10.0\")\n  val NoManifest        \u003d scala.reflect.NoManifest\n\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"use scala.reflect.classTag[T] and scala.reflect.runtime.universe.typeTag[T] instead\", \"2.10.0\")\n  def manifest[T](implicit m: Manifest[T])           \u003d m\n  @deprecated(\"use scala.reflect.classTag[T] instead\", \"2.10.0\")\n  def classManifest[T](implicit m: ClassManifest[T]) \u003d m\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"this notion doesn\u0027t have a corresponding concept in 2.10, because scala.reflect.runtime.universe.TypeTag can capture arbitrary types. Use type tags instead of manifests, and there will be no need in opt manifests.\", \"2.10.0\")\n  def optManifest[T](implicit m: OptManifest[T])     \u003d m\n\n  // Minor variations on identity functions\n  /** @group utilities */\n  @inline def identity[A](x: A): A         \u003d x    // @see `conforms` for the implicit version\n  /** @group utilities */\n  @inline def implicitly[T](implicit e: T) \u003d e    // for summoning implicit values from the nether world -- TODO: when dependent method types are on by default, give this result type `e.type`, so that inliner has better chance of knowing which method to inline in calls like `implicitly[MatchingStrategy[Option]].zero`\n  /** @group utilities */\n  @inline def locally[T](x: T): T  \u003d x    // to communicate intent and avoid unmoored statements\n\n  // assertions ---------------------------------------------------------\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  Calls to this method will not be generated if `-Xelide-below`\n   *  is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assertion   the expression to test\n   *  @group assertions\n   */\n  @elidable(ASSERTION)\n  def assert(assertion: Boolean) {\n    if (!assertion)\n      throw new java.lang.AssertionError(\"assertion failed\")\n  }\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  Calls to this method will not be generated if `-Xelide-below`\n   *  is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assertion   the expression to test\n   *  @param message     a String to include in the failure message\n   *  @group assertions\n   */\n  @elidable(ASSERTION) @inline\n  final def assert(assertion: Boolean, message: \u003d\u003e Any) {\n    if (!assertion)\n      throw new java.lang.AssertionError(\"assertion failed: \"+ message)\n  }\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  This method differs from assert only in the intent expressed:\n   *  assert contains a predicate which needs to be proven, while\n   *  assume contains an axiom for a static checker.  Calls to this method\n   *  will not be generated if `-Xelide-below` is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assumption   the expression to test\n   *  @group assertions\n   */\n  @elidable(ASSERTION)\n  def assume(assumption: Boolean) {\n    if (!assumption)\n      throw new java.lang.AssertionError(\"assumption failed\")\n  }\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  This method differs from assert only in the intent expressed:\n   *  assert contains a predicate which needs to be proven, while\n   *  assume contains an axiom for a static checker.  Calls to this method\n   *  will not be generated if `-Xelide-below` is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assumption   the expression to test\n   *  @param message      a String to include in the failure message\n   *  @group assertions\n   */\n  @elidable(ASSERTION) @inline\n  final def assume(assumption: Boolean, message: \u003d\u003e Any) {\n    if (!assumption)\n      throw new java.lang.AssertionError(\"assumption failed: \"+ message)\n  }\n\n  /** Tests an expression, throwing an `IllegalArgumentException` if false.\n   *  This method is similar to `assert`, but blames the caller of the method\n   *  for violating the condition.\n   *\n   *  @param requirement   the expression to test\n   *  @group assertions\n   */\n  def require(requirement: Boolean) {\n    if (!requirement)\n      throw new IllegalArgumentException(\"requirement failed\")\n  }\n\n  /** Tests an expression, throwing an `IllegalArgumentException` if false.\n   *  This method is similar to `assert`, but blames the caller of the method\n   *  for violating the condition.\n   *\n   *  @param requirement   the expression to test\n   *  @param message       a String to include in the failure message\n   *  @group assertions\n   */\n  @inline final def require(requirement: Boolean, message: \u003d\u003e Any) {\n    if (!requirement)\n      throw new IllegalArgumentException(\"requirement failed: \"+ message)\n  }\n\n  /** `???` can be used for marking methods that remain to be implemented.\n   *  @throws NotImplementedError\n   *  @group utilities\n   */\n  def ??? : Nothing \u003d throw new NotImplementedError\n\n  // tupling ------------------------------------------------------------\n\n  @deprecated(\"use built-in tuple syntax or Tuple2 instead\", \"2.11.0\")\n  type Pair[+A, +B] \u003d Tuple2[A, B]\n  @deprecated(\"use built-in tuple syntax or Tuple2 instead\", \"2.11.0\")\n  object Pair {\n    def apply[A, B](x: A, y: B) \u003d Tuple2(x, y)\n    def unapply[A, B](x: Tuple2[A, B]): Option[Tuple2[A, B]] \u003d Some(x)\n  }\n\n  @deprecated(\"use built-in tuple syntax or Tuple3 instead\", \"2.11.0\")\n  type Triple[+A, +B, +C] \u003d Tuple3[A, B, C]\n  @deprecated(\"use built-in tuple syntax or Tuple3 instead\", \"2.11.0\")\n  object Triple {\n    def apply[A, B, C](x: A, y: B, z: C) \u003d Tuple3(x, y, z)\n    def unapply[A, B, C](x: Tuple3[A, B, C]): Option[Tuple3[A, B, C]] \u003d Some(x)\n  }\n\n  // implicit classes -----------------------------------------------------\n\n  /** @group implicit-classes-any */\n  implicit final class ArrowAssoc[A](private val self: A) extends AnyVal {\n    @inline def -\u003e [B](y: B): Tuple2[A, B] \u003d Tuple2(self, y)\n    def ?[B](y: B): Tuple2[A, B] \u003d -\u003e(y)\n  }\n\n  /** @group implicit-classes-any */\n  implicit final class Ensuring[A](private val self: A) extends AnyVal {\n    def ensuring(cond: Boolean): A \u003d { assert(cond); self }\n    def ensuring(cond: Boolean, msg: \u003d\u003e Any): A \u003d { assert(cond, msg); self }\n    def ensuring(cond: A \u003d\u003e Boolean): A \u003d { assert(cond(self)); self }\n    def ensuring(cond: A \u003d\u003e Boolean, msg: \u003d\u003e Any): A \u003d { assert(cond(self), msg); self }\n  }\n\n  /** @group implicit-classes-any */\n  implicit final class StringFormat[A](private val self: A) extends AnyVal {\n    /** Returns string formatted according to given `format` string.\n     *  Format strings are as for `String.format`\n     *  (@see java.lang.String.format).\n     */\n    @inline def formatted(fmtstr: String): String \u003d fmtstr format self\n  }\n\n  // scala/bug#8229 retaining the pre 2.11 name for source compatibility in shadowing this implicit\n  /** @group implicit-classes-any */\n  implicit final class any2stringadd[A](private val self: A) extends AnyVal {\n    def +(other: String): String \u003d String.valueOf(self) + other\n  }\n\n  implicit final class RichException(private val self: Throwable) extends AnyVal {\n    import scala.compat.Platform.EOL\n    @deprecated(\"use Throwable#getStackTrace\", \"2.11.0\") def getStackTraceString \u003d self.getStackTrace().mkString(\"\", EOL, EOL)\n  }\n\n  // Sadly we have to do `@deprecatedName(null, \"2.12.0\")` because\n  // `@deprecatedName(since\u003d\"2.12.0\")` incurs a warning about\n  //   Usage of named or default arguments transformed this annotation constructor call into a block.\n  //   The corresponding AnnotationInfo will contain references to local values and default getters\n  //   instead of the actual argument trees\n  // and `@deprecatedName(Symbol(\"\u003cnone\u003e\"), \"2.12.0\")` crashes scalac with\n  //   scala.reflect.internal.Symbols$CyclicReference: illegal cyclic reference involving object Symbol\n  // in run/repl-no-imports-no-predef-power.scala.\n  /** @group implicit-classes-char */\n  implicit final class SeqCharSequence(@deprecated(\"will be made private\", \"2.12.0\") @deprecatedName(null, \"2.12.0\") val __sequenceOfChars: scala.collection.IndexedSeq[Char]) extends CharSequence {\n    def length: Int                                     \u003d __sequenceOfChars.length\n    def charAt(index: Int): Char                        \u003d __sequenceOfChars(index)\n    def subSequence(start: Int, end: Int): CharSequence \u003d new SeqCharSequence(__sequenceOfChars.slice(start, end))\n    override def toString                               \u003d __sequenceOfChars mkString \"\"\n  }\n\n  /** @group implicit-classes-char */\n  implicit final class ArrayCharSequence(@deprecated(\"will be made private\", \"2.12.0\") @deprecatedName(null, \"2.12.0\") val __arrayOfChars: Array[Char]) extends CharSequence {\n    def length: Int                                     \u003d __arrayOfChars.length\n    def charAt(index: Int): Char                        \u003d __arrayOfChars(index)\n    def subSequence(start: Int, end: Int): CharSequence \u003d new runtime.ArrayCharSequence(__arrayOfChars, start, end)\n    override def toString                               \u003d __arrayOfChars mkString \"\"\n  }\n\n  implicit val StringCanBuildFrom: CanBuildFrom[String, Char, String] \u003d new CanBuildFrom[String, Char, String] {\n    def apply(from: String) \u003d apply()\n    def apply()             \u003d mutable.StringBuilder.newBuilder\n  }\n\n  /** @group conversions-string */\n  @inline implicit def augmentString(x: String): StringOps \u003d new StringOps(x)\n  /** @group conversions-string */\n  @inline implicit def unaugmentString(x: StringOps): String \u003d x.repr\n\n  // printing -----------------------------------------------------------\n\n  /** Prints an object to `out` using its `toString` method.\n   *\n   *  @param x the object to print; may be null.\n   *  @group console-output\n   */\n  def print(x: Any) \u003d Console.print(x)\n\n  /** Prints a newline character on the default output.\n   *  @group console-output\n   */\n  def println() \u003d Console.println()\n\n  /** Prints out an object to the default output, followed by a newline character.\n   *\n   *  @param x the object to print.\n   *  @group console-output\n   */\n  def println(x: Any) \u003d Console.println(x)\n\n  /** Prints its arguments as a formatted string to the default output,\n   *  based on a string pattern (in a fashion similar to printf in C).\n   *\n   *  The interpretation of the formatting patterns is described in\n   *  [[java.util.Formatter]].\n   *\n   *  Consider using the [[scala.StringContext.f f interpolator]] as more type safe and idiomatic.\n   *\n   *  @param text the pattern for formatting the arguments.\n   *  @param args the arguments used to instantiating the pattern.\n   *  @throws java.lang.IllegalArgumentException if there was a problem with the format string or arguments\n   *\n   *  @see [[scala.StringContext.f StringContext.f]]\n   *  @group console-output\n   */\n  def printf(text: String, xs: Any*) \u003d Console.print(text.format(xs: _*))\n\n  // views --------------------------------------------------------------\n\n  implicit def tuple2ToZippedOps[T1, T2](x: (T1, T2))                           \u003d new runtime.Tuple2Zipped.Ops(x)\n  implicit def tuple3ToZippedOps[T1, T2, T3](x: (T1, T2, T3))                   \u003d new runtime.Tuple3Zipped.Ops(x)\n\n  implicit def genericArrayOps[T](xs: Array[T]): ArrayOps[T] \u003d (xs match {\n    case x: Array[AnyRef]  \u003d\u003e refArrayOps[AnyRef](x)\n    case x: Array[Boolean] \u003d\u003e booleanArrayOps(x)\n    case x: Array[Byte]    \u003d\u003e byteArrayOps(x)\n    case x: Array[Char]    \u003d\u003e charArrayOps(x)\n    case x: Array[Double]  \u003d\u003e doubleArrayOps(x)\n    case x: Array[Float]   \u003d\u003e floatArrayOps(x)\n    case x: Array[Int]     \u003d\u003e intArrayOps(x)\n    case x: Array[Long]    \u003d\u003e longArrayOps(x)\n    case x: Array[Short]   \u003d\u003e shortArrayOps(x)\n    case x: Array[Unit]    \u003d\u003e unitArrayOps(x)\n    case null              \u003d\u003e null\n  }).asInstanceOf[ArrayOps[T]]\n\n  implicit def booleanArrayOps(xs: Array[Boolean]): ArrayOps.ofBoolean   \u003d new ArrayOps.ofBoolean(xs)\n  implicit def byteArrayOps(xs: Array[Byte]): ArrayOps.ofByte            \u003d new ArrayOps.ofByte(xs)\n  implicit def charArrayOps(xs: Array[Char]): ArrayOps.ofChar            \u003d new ArrayOps.ofChar(xs)\n  implicit def doubleArrayOps(xs: Array[Double]): ArrayOps.ofDouble      \u003d new ArrayOps.ofDouble(xs)\n  implicit def floatArrayOps(xs: Array[Float]): ArrayOps.ofFloat         \u003d new ArrayOps.ofFloat(xs)\n  implicit def intArrayOps(xs: Array[Int]): ArrayOps.ofInt               \u003d new ArrayOps.ofInt(xs)\n  implicit def longArrayOps(xs: Array[Long]): ArrayOps.ofLong            \u003d new ArrayOps.ofLong(xs)\n  implicit def refArrayOps[T \u003c: AnyRef](xs: Array[T]): ArrayOps.ofRef[T] \u003d new ArrayOps.ofRef[T](xs)\n  implicit def shortArrayOps(xs: Array[Short]): ArrayOps.ofShort         \u003d new ArrayOps.ofShort(xs)\n  implicit def unitArrayOps(xs: Array[Unit]): ArrayOps.ofUnit            \u003d new ArrayOps.ofUnit(xs)\n\n  // \"Autoboxing\" and \"Autounboxing\" ---------------------------------------------------\n\n  /** @group conversions-anyval-to-java */\n  implicit def byte2Byte(x: Byte): java.lang.Byte             \u003d x.asInstanceOf[java.lang.Byte]\n  /** @group conversions-anyval-to-java */\n  implicit def short2Short(x: Short): java.lang.Short         \u003d x.asInstanceOf[java.lang.Short]\n  /** @group conversions-anyval-to-java */\n  implicit def char2Character(x: Char): java.lang.Character   \u003d x.asInstanceOf[java.lang.Character]\n  /** @group conversions-anyval-to-java */\n  implicit def int2Integer(x: Int): java.lang.Integer         \u003d x.asInstanceOf[java.lang.Integer]\n  /** @group conversions-anyval-to-java */\n  implicit def long2Long(x: Long): java.lang.Long             \u003d x.asInstanceOf[java.lang.Long]\n  /** @group conversions-anyval-to-java */\n  implicit def float2Float(x: Float): java.lang.Float         \u003d x.asInstanceOf[java.lang.Float]\n  /** @group conversions-anyval-to-java */\n  implicit def double2Double(x: Double): java.lang.Double     \u003d x.asInstanceOf[java.lang.Double]\n  /** @group conversions-anyval-to-java */\n  implicit def boolean2Boolean(x: Boolean): java.lang.Boolean \u003d x.asInstanceOf[java.lang.Boolean]\n\n  /** @group conversions-java-to-anyval */\n  implicit def Byte2byte(x: java.lang.Byte): Byte             \u003d x.asInstanceOf[Byte]\n  /** @group conversions-java-to-anyval */\n  implicit def Short2short(x: java.lang.Short): Short         \u003d x.asInstanceOf[Short]\n  /** @group conversions-java-to-anyval */\n  implicit def Character2char(x: java.lang.Character): Char   \u003d x.asInstanceOf[Char]\n  /** @group conversions-java-to-anyval */\n  implicit def Integer2int(x: java.lang.Integer): Int         \u003d x.asInstanceOf[Int]\n  /** @group conversions-java-to-anyval */\n  implicit def Long2long(x: java.lang.Long): Long             \u003d x.asInstanceOf[Long]\n  /** @group conversions-java-to-anyval */\n  implicit def Float2float(x: java.lang.Float): Float         \u003d x.asInstanceOf[Float]\n  /** @group conversions-java-to-anyval */\n  implicit def Double2double(x: java.lang.Double): Double     \u003d x.asInstanceOf[Double]\n  /** @group conversions-java-to-anyval */\n  implicit def Boolean2boolean(x: java.lang.Boolean): Boolean \u003d x.asInstanceOf[Boolean]\n\n  // Type Constraints --------------------------------------------------------------\n\n  /**\n   * An instance of `A \u003c:\u003c B` witnesses that `A` is a subtype of `B`.\n   * Requiring an implicit argument of the type `A \u003c:\u003c B` encodes\n   * the generalized constraint `A \u003c: B`.\n   *\n   * @note we need a new type constructor `\u003c:\u003c` and evidence `conforms`,\n   * as reusing `Function1` and `identity` leads to ambiguities in\n   * case of type errors (`any2stringadd` is inferred)\n   *\n   * To constrain any abstract type T that\u0027s in scope in a method\u0027s\n   * argument list (not just the method\u0027s own type parameters) simply\n   * add an implicit argument of type `T \u003c:\u003c U`, where `U` is the required\n   * upper bound; or for lower-bounds, use: `L \u003c:\u003c T`, where `L` is the\n   * required lower bound.\n   *\n   * In part contributed by Jason Zaugg.\n   * @group type-constraints\n   */\n  @implicitNotFound(msg \u003d \"Cannot prove that ${From} \u003c:\u003c ${To}.\")\n  sealed abstract class \u003c:\u003c[-From, +To] extends (From \u003d\u003e To) with Serializable\n  private[this] final val singleton_\u003c:\u003c \u003d new \u003c:\u003c[Any,Any] { def apply(x: Any): Any \u003d x }\n  // The dollar prefix is to dodge accidental shadowing of this method\n  // by a user-defined method of the same name (scala/bug#7788).\n  // The collections rely on this method.\n  /** @group type-constraints */\n  implicit def $conforms[A]: A \u003c:\u003c A \u003d singleton_\u003c:\u003c.asInstanceOf[A \u003c:\u003c A]\n\n  @deprecated(\"use `implicitly[T \u003c:\u003c U]` or `identity` instead.\", \"2.11.0\")\n  def conforms[A]: A \u003c:\u003c A \u003d $conforms[A]\n\n  /** An instance of `A \u003d:\u003d B` witnesses that the types `A` and `B` are equal.\n   *\n   * @see `\u003c:\u003c` for expressing subtyping constraints\n   * @group type-constraints\n   */\n  @implicitNotFound(msg \u003d \"Cannot prove that ${From} \u003d:\u003d ${To}.\")\n  sealed abstract class \u003d:\u003d[From, To] extends (From \u003d\u003e To) with Serializable\n  private[this] final val singleton_\u003d:\u003d \u003d new \u003d:\u003d[Any,Any] { def apply(x: Any): Any \u003d x }\n  /** @group type-constraints */\n  object \u003d:\u003d {\n     implicit def tpEquals[A]: A \u003d:\u003d A \u003d singleton_\u003d:\u003d.asInstanceOf[A \u003d:\u003d A]\n  }\n\n  /** A type for which there is always an implicit value.\n   *  @see [[scala.Array$]], method `fallbackCanBuildFrom`\n   */\n  class DummyImplicit\n\n  object DummyImplicit {\n\n    /** An implicit value yielding a `DummyImplicit`.\n     *   @see [[scala.Array$]], method `fallbackCanBuildFrom`\n     */\n    implicit def dummyImplicit: DummyImplicit \u003d new DummyImplicit\n  }\n}\n\nprivate[scala] trait DeprecatedPredef {\n  self: Predef.type \u003d\u003e\n\n  // Deprecated stubs for any who may have been calling these methods directly.\n  @deprecated(\"use `ArrowAssoc`\", \"2.11.0\") def any2ArrowAssoc[A](x: A): ArrowAssoc[A]                                      \u003d new ArrowAssoc(x)\n  @deprecated(\"use `Ensuring`\", \"2.11.0\") def any2Ensuring[A](x: A): Ensuring[A]                                            \u003d new Ensuring(x)\n  @deprecated(\"use `StringFormat`\", \"2.11.0\") def any2stringfmt(x: Any): StringFormat[Any]                                  \u003d new StringFormat(x)\n  @deprecated(\"use `Throwable` directly\", \"2.11.0\") def exceptionWrapper(exc: Throwable)                                    \u003d new RichException(exc)\n  @deprecated(\"use `SeqCharSequence`\", \"2.11.0\") def seqToCharSequence(xs: scala.collection.IndexedSeq[Char]): CharSequence \u003d new SeqCharSequence(xs)\n  @deprecated(\"use `ArrayCharSequence`\", \"2.11.0\") def arrayToCharSequence(xs: Array[Char]): CharSequence                   \u003d new ArrayCharSequence(xs)\n\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readLine(): String                 \u003d StdIn.readLine()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readLine(text: String, args: Any*) \u003d StdIn.readLine(text, args: _*)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readBoolean()                      \u003d StdIn.readBoolean()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readByte()                         \u003d StdIn.readByte()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readShort()                        \u003d StdIn.readShort()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readChar()                         \u003d StdIn.readChar()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readInt()                          \u003d StdIn.readInt()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readLong()                         \u003d StdIn.readLong()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readFloat()                        \u003d StdIn.readFloat()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readDouble()                       \u003d StdIn.readDouble()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf(format: String)              \u003d StdIn.readf(format)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf1(format: String)             \u003d StdIn.readf1(format)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf2(format: String)             \u003d StdIn.readf2(format)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf3(format: String)             \u003d StdIn.readf3(format)\n}\n\n/** The `LowPriorityImplicits` class provides implicit values that\n*  are valid in all Scala compilation units without explicit qualification,\n*  but that are partially overridden by higher-priority conversions in object\n*  `Predef`.\n*\n*  @author  Martin Odersky\n*  @since 2.8\n*/\n// scala/bug#7335 Parents of Predef are defined in the same compilation unit to avoid\n// cyclic reference errors compiling the standard library *without* a previously\n// compiled copy on the classpath.\nprivate[scala] abstract class LowPriorityImplicits {\n  import mutable.WrappedArray\n  import immutable.WrappedString\n\n  /** We prefer the java.lang.* boxed types to these wrappers in\n   *  any potential conflicts.  Conflicts do exist because the wrappers\n   *  need to implement ScalaNumber in order to have a symmetric equals\n   *  method, but that implies implementing java.lang.Number as well.\n   *\n   *  Note - these are inlined because they are value classes, but\n   *  the call to xxxWrapper is not eliminated even though it does nothing.\n   *  Even inlined, every call site does a no-op retrieval of Predef\u0027s MODULE$\n   *  because maybe loading Predef has side effects!\n   */\n  @inline implicit def byteWrapper(x: Byte)       \u003d new runtime.RichByte(x)\n  @inline implicit def shortWrapper(x: Short)     \u003d new runtime.RichShort(x)\n  @inline implicit def intWrapper(x: Int)         \u003d new runtime.RichInt(x)\n  @inline implicit def charWrapper(c: Char)       \u003d new runtime.RichChar(c)\n  @inline implicit def longWrapper(x: Long)       \u003d new runtime.RichLong(x)\n  @inline implicit def floatWrapper(x: Float)     \u003d new runtime.RichFloat(x)\n  @inline implicit def doubleWrapper(x: Double)   \u003d new runtime.RichDouble(x)\n  @inline implicit def booleanWrapper(x: Boolean) \u003d new runtime.RichBoolean(x)\n\n  /** @group conversions-array-to-wrapped-array */\n  implicit def genericWrapArray[T](xs: Array[T]): WrappedArray[T] \u003d\n    if (xs eq null) null\n    else WrappedArray.make(xs)\n\n  // Since the JVM thinks arrays are covariant, one 0-length Array[AnyRef]\n  // is as good as another for all T \u003c: AnyRef.  Instead of creating 100,000,000\n  // unique ones by way of this implicit, let\u0027s share one.\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapRefArray[T \u003c: AnyRef](xs: Array[T]): WrappedArray[T] \u003d {\n    if (xs eq null) null\n    else if (xs.length \u003d\u003d 0) WrappedArray.empty[T]\n    else new WrappedArray.ofRef[T](xs)\n  }\n\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapIntArray(xs: Array[Int]): WrappedArray[Int] \u003d if (xs ne null) new WrappedArray.ofInt(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapDoubleArray(xs: Array[Double]): WrappedArray[Double] \u003d if (xs ne null) new WrappedArray.ofDouble(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapLongArray(xs: Array[Long]): WrappedArray[Long] \u003d if (xs ne null) new WrappedArray.ofLong(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapFloatArray(xs: Array[Float]): WrappedArray[Float] \u003d if (xs ne null) new WrappedArray.ofFloat(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapCharArray(xs: Array[Char]): WrappedArray[Char] \u003d if (xs ne null) new WrappedArray.ofChar(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapByteArray(xs: Array[Byte]): WrappedArray[Byte] \u003d if (xs ne null) new WrappedArray.ofByte(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapShortArray(xs: Array[Short]): WrappedArray[Short] \u003d if (xs ne null) new WrappedArray.ofShort(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapBooleanArray(xs: Array[Boolean]): WrappedArray[Boolean] \u003d if (xs ne null) new WrappedArray.ofBoolean(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapUnitArray(xs: Array[Unit]): WrappedArray[Unit] \u003d if (xs ne null) new WrappedArray.ofUnit(xs) else null\n\n  /** @group conversions-string */\n  implicit def wrapString(s: String): WrappedString \u003d if (s ne null) new WrappedString(s) else null\n  /** @group conversions-string */\n  implicit def unwrapString(ws: WrappedString): String \u003d if (ws ne null) ws.self else null\n\n  implicit def fallbackStringCanBuildFrom[T]: CanBuildFrom[String, T, immutable.IndexedSeq[T]] \u003d\n    new CanBuildFrom[String, T, immutable.IndexedSeq[T]] {\n      def apply(from: String) \u003d immutable.IndexedSeq.newBuilder[T]\n      def apply() \u003d immutable.IndexedSeq.newBuilder[T]\n    }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

2020.11.11 18:57:15 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:57:15 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:57:15 INFO  time: compiled task1-scala in 0.75s
2020.11.11 18:57:57 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:57:57 INFO  time: compiled task1-scala in 0.12s
2020.11.11 18:58:30 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:58:30 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:58:30 INFO  time: compiled task1-scala in 0.67s
2020.11.11 18:58:50 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:58:50 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:58:50 INFO  time: compiled task1-scala in 0.66s
2020.11.11 18:59:03 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:59:03 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:59:03 INFO  time: compiled task1-scala in 0.64s
2020.11.11 18:59:13 INFO  compiling task1-scala (1 scala source)
2020.11.11 18:59:13 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 18:59:13 INFO  time: compiled task1-scala in 0.66s
something's wrong: no file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala in Array[Int]RangePosition(file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala, 724, 724, 734)
something's wrong: no file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala in Array[Int]RangePosition(file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala, 724, 724, 734)
Nov 11, 2020 7:20:58 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2076
2020.11.11 19:21:05 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:21:05 INFO  time: compiled task1-scala in 0.13s
Nov 11, 2020 7:22:08 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/package.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\n/**\n * Core Scala types. They are always available without an explicit import.\n * @contentDiagram hideNodes \"scala.Serializable\"\n */\npackage object scala {\n  type Throwable \u003d java.lang.Throwable\n  type Exception \u003d java.lang.Exception\n  type Error     \u003d java.lang.Error\n\n  type RuntimeException                \u003d java.lang.RuntimeException\n  type NullPointerException            \u003d java.lang.NullPointerException\n  type ClassCastException              \u003d java.lang.ClassCastException\n  type IndexOutOfBoundsException       \u003d java.lang.IndexOutOfBoundsException\n  type ArrayIndexOutOfBoundsException  \u003d java.lang.ArrayIndexOutOfBoundsException\n  type StringIndexOutOfBoundsException \u003d java.lang.StringIndexOutOfBoundsException\n  type UnsupportedOperationException   \u003d java.lang.UnsupportedOperationException\n  type IllegalArgumentException        \u003d java.lang.IllegalArgumentException\n  type NoSuchElementException          \u003d java.util.NoSuchElementException\n  type NumberFormatException           \u003d java.lang.NumberFormatException\n  type AbstractMethodError             \u003d java.lang.AbstractMethodError\n  type InterruptedException            \u003d java.lang.InterruptedException\n\n  // A dummy used by the specialization annotation.\n  val AnyRef \u003d new Specializable {\n    override def toString \u003d \"object AnyRef\"\n  }\n\n  type TraversableOnce[+A] \u003d scala.collection.TraversableOnce[A]\n\n  type Traversable[+A] \u003d scala.collection.Traversable[A]\n  val Traversable \u003d scala.collection.Traversable\n\n  type Iterable[+A] \u003d scala.collection.Iterable[A]\n  val Iterable \u003d scala.collection.Iterable\n\n  type Seq[+A] \u003d scala.collection.Seq[A]\n  val Seq \u003d scala.collection.Seq\n\n  type IndexedSeq[+A] \u003d scala.collection.IndexedSeq[A]\n  val IndexedSeq \u003d scala.collection.IndexedSeq\n\n  type Iterator[+A] \u003d scala.collection.Iterator[A]\n  val Iterator \u003d scala.collection.Iterator\n\n  type BufferedIterator[+A] \u003d scala.collection.BufferedIterator[A]\n\n  type List[+A] \u003d scala.collection.immutable.List[A]\n  val List \u003d scala.collection.immutable.List\n\n  val Nil \u003d scala.collection.immutable.Nil\n\n  type ::[A] \u003d scala.collection.immutable.::[A]\n  val :: \u003d scala.collection.immutable.::\n\n  val +: \u003d scala.collection.+:\n  val :+ \u003d scala.collection.:+\n\n  type Stream[+A] \u003d scala.collection.immutable.Stream[A]\n  val Stream \u003d scala.collection.immutable.Stream\n  val #:: \u003d scala.collection.immutable.Stream.#::\n\n  type Vector[+A] \u003d scala.collection.immutable.Vector[A]\n  val Vector \u003d scala.collection.immutable.Vector\n\n  type StringBuilder \u003d scala.collection.mutable.StringBuilder\n  val StringBuilder \u003d scala.collection.mutable.StringBuilder\n\n  type Range \u003d scala.collection.immutable.Range\n  val Range \u003d scala.collection.immutable.Range\n\n  // Numeric types which were moved into scala.math.*\n\n  type BigDecimal \u003d scala.math.BigDecimal\n  val BigDecimal \u003d scala.math.BigDecimal\n\n  type BigInt \u003d scala.math.BigInt\n  val BigInt \u003d scala.math.BigInt\n\n  type Equiv[T] \u003d scala.math.Equiv[T]\n  val Equiv \u003d scala.math.Equiv\n\n  type Fractional[T] \u003d scala.math.Fractional[T]\n  val Fractional \u003d scala.math.Fractional\n\n  type Integral[T] \u003d scala.math.Integral[T]\n  val Integral \u003d scala.math.Integral\n\n  type Numeric[T] \u003d scala.math.Numeric[T]\n  val Numeric \u003d scala.math.Numeric\n\n  type Ordered[T] \u003d scala.math.Ordered[T]\n  val Ordered \u003d scala.math.Ordered\n\n  type Ordering[T] \u003d scala.math.Ordering[T]\n  val Ordering \u003d scala.math.Ordering\n\n  type PartialOrdering[T] \u003d scala.math.PartialOrdering[T]\n  type PartiallyOrdered[T] \u003d scala.math.PartiallyOrdered[T]\n\n  type Either[+A, +B] \u003d scala.util.Either[A, B]\n  val Either \u003d scala.util.Either\n\n  type Left[+A, +B] \u003d scala.util.Left[A, B]\n  val Left \u003d scala.util.Left\n\n  type Right[+A, +B] \u003d scala.util.Right[A, B]\n  val Right \u003d scala.util.Right\n\n  // Annotations which we might move to annotation.*\n/*\n  type SerialVersionUID \u003d annotation.SerialVersionUID\n  type deprecated \u003d annotation.deprecated\n  type deprecatedName \u003d annotation.deprecatedName\n  type inline \u003d annotation.inline\n  type native \u003d annotation.native\n  type noinline \u003d annotation.noinline\n  type remote \u003d annotation.remote\n  type specialized \u003d annotation.specialized\n  type transient \u003d annotation.transient\n  type throws  \u003d annotation.throws\n  type unchecked \u003d annotation.unchecked.unchecked\n  type volatile \u003d annotation.volatile\n  */\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

2020.11.11 19:22:10 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:22:10 INFO  time: compiled task1-scala in 0.12s
Nov 11, 2020 7:23:00 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2171
2020.11.11 19:23:42 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:23:42 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 19:23:42 INFO  time: compiled task1-scala in 0.64s
Nov 11, 2020 7:23:47 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Predef.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\npackage scala\n\nimport scala.language.implicitConversions\n\nimport scala.collection.{ mutable, immutable, generic }\nimport immutable.StringOps\nimport mutable.ArrayOps\nimport generic.CanBuildFrom\nimport scala.annotation.{ elidable, implicitNotFound }\nimport scala.annotation.elidable.ASSERTION\nimport scala.io.StdIn\n\n/** The `Predef` object provides definitions that are accessible in all Scala\n *  compilation units without explicit qualification.\n *\n *  \u003d\u003d\u003d Commonly Used Types \u003d\u003d\u003d\n *  Predef provides type aliases for types which are commonly used, such as\n *  the immutable collection types [[scala.collection.immutable.Map]],\n *  [[scala.collection.immutable.Set]], and the [[scala.collection.immutable.List]]\n *  constructors ([[scala.collection.immutable.::]] and\n *  [[scala.collection.immutable.Nil]]).\n *\n *  \u003d\u003d\u003d Console Output \u003d\u003d\u003d\n *  For basic console output, `Predef` provides convenience methods [[print(x:Any* print]] and [[println(x:Any* println]],\n *  which are aliases of the methods in the object [[scala.Console]].\n *\n *  \u003d\u003d\u003d Assertions \u003d\u003d\u003d\n *  A set of `assert` functions are provided for use as a way to document\n *  and dynamically check invariants in code. Invocations of `assert` can be elided\n *  at compile time by providing the command line option `-Xdisable-assertions`,\n *  which raises `-Xelide-below` above `elidable.ASSERTION`, to the `scalac` command.\n *\n *  Variants of `assert` intended for use with static analysis tools are also\n *  provided: `assume`, `require` and `ensuring`. `require` and `ensuring` are\n *  intended for use as a means of design-by-contract style specification\n *  of pre- and post-conditions on functions, with the intention that these\n *  specifications could be consumed by a static analysis tool. For instance,\n *\n *  {{{\n *  def addNaturals(nats: List[Int]): Int \u003d {\n *    require(nats forall (_ \u003e\u003d 0), \"List contains negative numbers\")\n *    nats.foldLeft(0)(_ + _)\n *  } ensuring(_ \u003e\u003d 0)\n *  }}}\n *\n *  The declaration of `addNaturals` states that the list of integers passed should\n *  only contain natural numbers (i.e. non-negative), and that the result returned\n *  will also be natural. `require` is distinct from `assert` in that if the\n *  condition fails, then the caller of the function is to blame rather than a\n *  logical error having been made within `addNaturals` itself. `ensuring` is a\n *  form of `assert` that declares the guarantee the function is providing with\n *  regards to its return value.\n *\n *  \u003d\u003d\u003d Implicit Conversions \u003d\u003d\u003d\n *  A number of commonly applied implicit conversions are also defined here, and\n *  in the parent type [[scala.LowPriorityImplicits]]. Implicit conversions\n *  are provided for the \"widening\" of numeric values, for instance, converting a\n *  Short value to a Long value as required, and to add additional higher-order\n *  functions to Array values. These are described in more detail in the documentation of [[scala.Array]].\n *\n * @groupname utilities Utility Methods\n * @groupprio utilities 10\n *\n * @groupname assertions Assertions\n * @groupprio assertions 20\n * @groupdesc assertions These methods support program verification and runtime correctness.\n *\n * @groupname console-output Console Output\n * @groupprio console-output 30\n * @groupdesc console-output These methods provide output via the console.\n *\n * @groupname type-constraints Type Constraints\n * @groupprio type-constraints 40\n * @groupdesc type-constraints These entities allows constraints between types to be stipulated.\n *\n * @groupname aliases Aliases\n * @groupprio aliases 50\n * @groupdesc aliases These aliases bring selected immutable types into scope without any imports.\n *\n * @groupname conversions-string String Conversions\n * @groupprio conversions-string 60\n * @groupdesc conversions-string Conversions to and from String and StringOps.\n *\n * @groupname implicit-classes-any Implicit Classes\n * @groupprio implicit-classes-any 70\n * @groupdesc implicit-classes-any These implicit classes add useful extension methods to every type.\n *\n * @groupname implicit-classes-char CharSequence Conversions\n * @groupprio implicit-classes-char 80\n * @groupdesc implicit-classes-char These implicit classes add CharSequence methods to Array[Char] and IndexedSeq[Char] instances.\n *\n * @groupname conversions-java-to-anyval Java to Scala\n * @groupprio conversions-java-to-anyval 90\n * @groupdesc conversions-java-to-anyval Implicit conversion from Java primitive wrapper types to Scala equivalents.\n *\n * @groupname conversions-anyval-to-java Scala to Java\n * @groupprio conversions-anyval-to-java 100\n * @groupdesc conversions-anyval-to-java Implicit conversion from Scala AnyVals to Java primitive wrapper types equivalents.\n *\n * @groupname conversions-array-to-wrapped-array Array to WrappedArray\n * @groupprio conversions-array-to-wrapped-array 110\n * @groupdesc conversions-array-to-wrapped-array Conversions from Arrays to WrappedArrays.\n */\nobject Predef extends LowPriorityImplicits with DeprecatedPredef {\n  /**\n   * Retrieve the runtime representation of a class type. `classOf[T]` is equivalent to\n   * the class literal `T.class` in Java.\n   *\n   * @example {{{\n   * val listClass \u003d classOf[List[_]]\n   * // listClass is java.lang.Class[List[_]] \u003d class scala.collection.immutable.List\n   *\n   * val mapIntString \u003d classOf[Map[Int,String]]\n   * // mapIntString is java.lang.Class[Map[Int,String]] \u003d interface scala.collection.immutable.Map\n   * }}}\n   * @group utilities\n   */\n  def classOf[T]: Class[T] \u003d null // This is a stub method. The actual implementation is filled in by the compiler.\n\n  /** The `String` type in Scala has methods that come either from the underlying\n   *  Java String (see the documentation corresponding to your Java version, for\n   *  example [[http://docs.oracle.com/javase/8/docs/api/java/lang/String.html]]) or\n   *  are added implicitly through [[scala.collection.immutable.StringOps]].\n   *  @group aliases\n   */\n  type String        \u003d java.lang.String\n  /**  @group aliases */\n  type Class[T]      \u003d java.lang.Class[T]\n\n  // miscellaneous -----------------------------------------------------\n  scala.`package`                         // to force scala package object to be seen.\n  scala.collection.immutable.List         // to force Nil, :: to be seen.\n\n  /**  @group aliases */\n  type Function[-A, +B] \u003d Function1[A, B]\n\n  /**  @group aliases */\n  type Map[A, +B] \u003d immutable.Map[A, B]\n  /**  @group aliases */\n  type Set[A]     \u003d immutable.Set[A]\n  /**  @group aliases */\n  val Map         \u003d immutable.Map\n  /**  @group aliases */\n  val Set         \u003d immutable.Set\n\n  // Manifest types, companions, and incantations for summoning\n  @annotation.implicitNotFound(msg \u003d \"No ClassManifest available for ${T}.\")\n  @deprecated(\"use `scala.reflect.ClassTag` instead\", \"2.10.0\")\n  type ClassManifest[T] \u003d scala.reflect.ClassManifest[T]\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"this notion doesn\u0027t have a corresponding concept in 2.10, because scala.reflect.runtime.universe.TypeTag can capture arbitrary types. Use type tags instead of manifests, and there will be no need in opt manifests.\", \"2.10.0\")\n  type OptManifest[T]   \u003d scala.reflect.OptManifest[T]\n  @annotation.implicitNotFound(msg \u003d \"No Manifest available for ${T}.\")\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"use `scala.reflect.ClassTag` (to capture erasures) or scala.reflect.runtime.universe.TypeTag (to capture types) or both instead\", \"2.10.0\")\n  type Manifest[T]      \u003d scala.reflect.Manifest[T]\n  @deprecated(\"use `scala.reflect.ClassTag` instead\", \"2.10.0\")\n  val ClassManifest     \u003d scala.reflect.ClassManifest\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"use `scala.reflect.ClassTag` (to capture erasures) or scala.reflect.runtime.universe.TypeTag (to capture types) or both instead\", \"2.10.0\")\n  val Manifest          \u003d scala.reflect.Manifest\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"this notion doesn\u0027t have a corresponding concept in 2.10, because scala.reflect.runtime.universe.TypeTag can capture arbitrary types. Use type tags instead of manifests, and there will be no need in opt manifests.\", \"2.10.0\")\n  val NoManifest        \u003d scala.reflect.NoManifest\n\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"use scala.reflect.classTag[T] and scala.reflect.runtime.universe.typeTag[T] instead\", \"2.10.0\")\n  def manifest[T](implicit m: Manifest[T])           \u003d m\n  @deprecated(\"use scala.reflect.classTag[T] instead\", \"2.10.0\")\n  def classManifest[T](implicit m: ClassManifest[T]) \u003d m\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"this notion doesn\u0027t have a corresponding concept in 2.10, because scala.reflect.runtime.universe.TypeTag can capture arbitrary types. Use type tags instead of manifests, and there will be no need in opt manifests.\", \"2.10.0\")\n  def optManifest[T](implicit m: OptManifest[T])     \u003d m\n\n  // Minor variations on identity functions\n  /** @group utilities */\n  @inline def identity[A](x: A): A         \u003d x    // @see `conforms` for the implicit version\n  /** @group utilities */\n  @inline def implicitly[T](implicit e: T) \u003d e    // for summoning implicit values from the nether world -- TODO: when dependent method types are on by default, give this result type `e.type`, so that inliner has better chance of knowing which method to inline in calls like `implicitly[MatchingStrategy[Option]].zero`\n  /** @group utilities */\n  @inline def locally[T](x: T): T  \u003d x    // to communicate intent and avoid unmoored statements\n\n  // assertions ---------------------------------------------------------\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  Calls to this method will not be generated if `-Xelide-below`\n   *  is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assertion   the expression to test\n   *  @group assertions\n   */\n  @elidable(ASSERTION)\n  def assert(assertion: Boolean) {\n    if (!assertion)\n      throw new java.lang.AssertionError(\"assertion failed\")\n  }\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  Calls to this method will not be generated if `-Xelide-below`\n   *  is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assertion   the expression to test\n   *  @param message     a String to include in the failure message\n   *  @group assertions\n   */\n  @elidable(ASSERTION) @inline\n  final def assert(assertion: Boolean, message: \u003d\u003e Any) {\n    if (!assertion)\n      throw new java.lang.AssertionError(\"assertion failed: \"+ message)\n  }\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  This method differs from assert only in the intent expressed:\n   *  assert contains a predicate which needs to be proven, while\n   *  assume contains an axiom for a static checker.  Calls to this method\n   *  will not be generated if `-Xelide-below` is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assumption   the expression to test\n   *  @group assertions\n   */\n  @elidable(ASSERTION)\n  def assume(assumption: Boolean) {\n    if (!assumption)\n      throw new java.lang.AssertionError(\"assumption failed\")\n  }\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  This method differs from assert only in the intent expressed:\n   *  assert contains a predicate which needs to be proven, while\n   *  assume contains an axiom for a static checker.  Calls to this method\n   *  will not be generated if `-Xelide-below` is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assumption   the expression to test\n   *  @param message      a String to include in the failure message\n   *  @group assertions\n   */\n  @elidable(ASSERTION) @inline\n  final def assume(assumption: Boolean, message: \u003d\u003e Any) {\n    if (!assumption)\n      throw new java.lang.AssertionError(\"assumption failed: \"+ message)\n  }\n\n  /** Tests an expression, throwing an `IllegalArgumentException` if false.\n   *  This method is similar to `assert`, but blames the caller of the method\n   *  for violating the condition.\n   *\n   *  @param requirement   the expression to test\n   *  @group assertions\n   */\n  def require(requirement: Boolean) {\n    if (!requirement)\n      throw new IllegalArgumentException(\"requirement failed\")\n  }\n\n  /** Tests an expression, throwing an `IllegalArgumentException` if false.\n   *  This method is similar to `assert`, but blames the caller of the method\n   *  for violating the condition.\n   *\n   *  @param requirement   the expression to test\n   *  @param message       a String to include in the failure message\n   *  @group assertions\n   */\n  @inline final def require(requirement: Boolean, message: \u003d\u003e Any) {\n    if (!requirement)\n      throw new IllegalArgumentException(\"requirement failed: \"+ message)\n  }\n\n  /** `???` can be used for marking methods that remain to be implemented.\n   *  @throws NotImplementedError\n   *  @group utilities\n   */\n  def ??? : Nothing \u003d throw new NotImplementedError\n\n  // tupling ------------------------------------------------------------\n\n  @deprecated(\"use built-in tuple syntax or Tuple2 instead\", \"2.11.0\")\n  type Pair[+A, +B] \u003d Tuple2[A, B]\n  @deprecated(\"use built-in tuple syntax or Tuple2 instead\", \"2.11.0\")\n  object Pair {\n    def apply[A, B](x: A, y: B) \u003d Tuple2(x, y)\n    def unapply[A, B](x: Tuple2[A, B]): Option[Tuple2[A, B]] \u003d Some(x)\n  }\n\n  @deprecated(\"use built-in tuple syntax or Tuple3 instead\", \"2.11.0\")\n  type Triple[+A, +B, +C] \u003d Tuple3[A, B, C]\n  @deprecated(\"use built-in tuple syntax or Tuple3 instead\", \"2.11.0\")\n  object Triple {\n    def apply[A, B, C](x: A, y: B, z: C) \u003d Tuple3(x, y, z)\n    def unapply[A, B, C](x: Tuple3[A, B, C]): Option[Tuple3[A, B, C]] \u003d Some(x)\n  }\n\n  // implicit classes -----------------------------------------------------\n\n  /** @group implicit-classes-any */\n  implicit final class ArrowAssoc[A](private val self: A) extends AnyVal {\n    @inline def -\u003e [B](y: B): Tuple2[A, B] \u003d Tuple2(self, y)\n    def ?[B](y: B): Tuple2[A, B] \u003d -\u003e(y)\n  }\n\n  /** @group implicit-classes-any */\n  implicit final class Ensuring[A](private val self: A) extends AnyVal {\n    def ensuring(cond: Boolean): A \u003d { assert(cond); self }\n    def ensuring(cond: Boolean, msg: \u003d\u003e Any): A \u003d { assert(cond, msg); self }\n    def ensuring(cond: A \u003d\u003e Boolean): A \u003d { assert(cond(self)); self }\n    def ensuring(cond: A \u003d\u003e Boolean, msg: \u003d\u003e Any): A \u003d { assert(cond(self), msg); self }\n  }\n\n  /** @group implicit-classes-any */\n  implicit final class StringFormat[A](private val self: A) extends AnyVal {\n    /** Returns string formatted according to given `format` string.\n     *  Format strings are as for `String.format`\n     *  (@see java.lang.String.format).\n     */\n    @inline def formatted(fmtstr: String): String \u003d fmtstr format self\n  }\n\n  // scala/bug#8229 retaining the pre 2.11 name for source compatibility in shadowing this implicit\n  /** @group implicit-classes-any */\n  implicit final class any2stringadd[A](private val self: A) extends AnyVal {\n    def +(other: String): String \u003d String.valueOf(self) + other\n  }\n\n  implicit final class RichException(private val self: Throwable) extends AnyVal {\n    import scala.compat.Platform.EOL\n    @deprecated(\"use Throwable#getStackTrace\", \"2.11.0\") def getStackTraceString \u003d self.getStackTrace().mkString(\"\", EOL, EOL)\n  }\n\n  // Sadly we have to do `@deprecatedName(null, \"2.12.0\")` because\n  // `@deprecatedName(since\u003d\"2.12.0\")` incurs a warning about\n  //   Usage of named or default arguments transformed this annotation constructor call into a block.\n  //   The corresponding AnnotationInfo will contain references to local values and default getters\n  //   instead of the actual argument trees\n  // and `@deprecatedName(Symbol(\"\u003cnone\u003e\"), \"2.12.0\")` crashes scalac with\n  //   scala.reflect.internal.Symbols$CyclicReference: illegal cyclic reference involving object Symbol\n  // in run/repl-no-imports-no-predef-power.scala.\n  /** @group implicit-classes-char */\n  implicit final class SeqCharSequence(@deprecated(\"will be made private\", \"2.12.0\") @deprecatedName(null, \"2.12.0\") val __sequenceOfChars: scala.collection.IndexedSeq[Char]) extends CharSequence {\n    def length: Int                                     \u003d __sequenceOfChars.length\n    def charAt(index: Int): Char                        \u003d __sequenceOfChars(index)\n    def subSequence(start: Int, end: Int): CharSequence \u003d new SeqCharSequence(__sequenceOfChars.slice(start, end))\n    override def toString                               \u003d __sequenceOfChars mkString \"\"\n  }\n\n  /** @group implicit-classes-char */\n  implicit final class ArrayCharSequence(@deprecated(\"will be made private\", \"2.12.0\") @deprecatedName(null, \"2.12.0\") val __arrayOfChars: Array[Char]) extends CharSequence {\n    def length: Int                                     \u003d __arrayOfChars.length\n    def charAt(index: Int): Char                        \u003d __arrayOfChars(index)\n    def subSequence(start: Int, end: Int): CharSequence \u003d new runtime.ArrayCharSequence(__arrayOfChars, start, end)\n    override def toString                               \u003d __arrayOfChars mkString \"\"\n  }\n\n  implicit val StringCanBuildFrom: CanBuildFrom[String, Char, String] \u003d new CanBuildFrom[String, Char, String] {\n    def apply(from: String) \u003d apply()\n    def apply()             \u003d mutable.StringBuilder.newBuilder\n  }\n\n  /** @group conversions-string */\n  @inline implicit def augmentString(x: String): StringOps \u003d new StringOps(x)\n  /** @group conversions-string */\n  @inline implicit def unaugmentString(x: StringOps): String \u003d x.repr\n\n  // printing -----------------------------------------------------------\n\n  /** Prints an object to `out` using its `toString` method.\n   *\n   *  @param x the object to print; may be null.\n   *  @group console-output\n   */\n  def print(x: Any) \u003d Console.print(x)\n\n  /** Prints a newline character on the default output.\n   *  @group console-output\n   */\n  def println() \u003d Console.println()\n\n  /** Prints out an object to the default output, followed by a newline character.\n   *\n   *  @param x the object to print.\n   *  @group console-output\n   */\n  def println(x: Any) \u003d Console.println(x)\n\n  /** Prints its arguments as a formatted string to the default output,\n   *  based on a string pattern (in a fashion similar to printf in C).\n   *\n   *  The interpretation of the formatting patterns is described in\n   *  [[java.util.Formatter]].\n   *\n   *  Consider using the [[scala.StringContext.f f interpolator]] as more type safe and idiomatic.\n   *\n   *  @param text the pattern for formatting the arguments.\n   *  @param args the arguments used to instantiating the pattern.\n   *  @throws java.lang.IllegalArgumentException if there was a problem with the format string or arguments\n   *\n   *  @see [[scala.StringContext.f StringContext.f]]\n   *  @group console-output\n   */\n  def printf(text: String, xs: Any*) \u003d Console.print(text.format(xs: _*))\n\n  // views --------------------------------------------------------------\n\n  implicit def tuple2ToZippedOps[T1, T2](x: (T1, T2))                           \u003d new runtime.Tuple2Zipped.Ops(x)\n  implicit def tuple3ToZippedOps[T1, T2, T3](x: (T1, T2, T3))                   \u003d new runtime.Tuple3Zipped.Ops(x)\n\n  implicit def genericArrayOps[T](xs: Array[T]): ArrayOps[T] \u003d (xs match {\n    case x: Array[AnyRef]  \u003d\u003e refArrayOps[AnyRef](x)\n    case x: Array[Boolean] \u003d\u003e booleanArrayOps(x)\n    case x: Array[Byte]    \u003d\u003e byteArrayOps(x)\n    case x: Array[Char]    \u003d\u003e charArrayOps(x)\n    case x: Array[Double]  \u003d\u003e doubleArrayOps(x)\n    case x: Array[Float]   \u003d\u003e floatArrayOps(x)\n    case x: Array[Int]     \u003d\u003e intArrayOps(x)\n    case x: Array[Long]    \u003d\u003e longArrayOps(x)\n    case x: Array[Short]   \u003d\u003e shortArrayOps(x)\n    case x: Array[Unit]    \u003d\u003e unitArrayOps(x)\n    case null              \u003d\u003e null\n  }).asInstanceOf[ArrayOps[T]]\n\n  implicit def booleanArrayOps(xs: Array[Boolean]): ArrayOps.ofBoolean   \u003d new ArrayOps.ofBoolean(xs)\n  implicit def byteArrayOps(xs: Array[Byte]): ArrayOps.ofByte            \u003d new ArrayOps.ofByte(xs)\n  implicit def charArrayOps(xs: Array[Char]): ArrayOps.ofChar            \u003d new ArrayOps.ofChar(xs)\n  implicit def doubleArrayOps(xs: Array[Double]): ArrayOps.ofDouble      \u003d new ArrayOps.ofDouble(xs)\n  implicit def floatArrayOps(xs: Array[Float]): ArrayOps.ofFloat         \u003d new ArrayOps.ofFloat(xs)\n  implicit def intArrayOps(xs: Array[Int]): ArrayOps.ofInt               \u003d new ArrayOps.ofInt(xs)\n  implicit def longArrayOps(xs: Array[Long]): ArrayOps.ofLong            \u003d new ArrayOps.ofLong(xs)\n  implicit def refArrayOps[T \u003c: AnyRef](xs: Array[T]): ArrayOps.ofRef[T] \u003d new ArrayOps.ofRef[T](xs)\n  implicit def shortArrayOps(xs: Array[Short]): ArrayOps.ofShort         \u003d new ArrayOps.ofShort(xs)\n  implicit def unitArrayOps(xs: Array[Unit]): ArrayOps.ofUnit            \u003d new ArrayOps.ofUnit(xs)\n\n  // \"Autoboxing\" and \"Autounboxing\" ---------------------------------------------------\n\n  /** @group conversions-anyval-to-java */\n  implicit def byte2Byte(x: Byte): java.lang.Byte             \u003d x.asInstanceOf[java.lang.Byte]\n  /** @group conversions-anyval-to-java */\n  implicit def short2Short(x: Short): java.lang.Short         \u003d x.asInstanceOf[java.lang.Short]\n  /** @group conversions-anyval-to-java */\n  implicit def char2Character(x: Char): java.lang.Character   \u003d x.asInstanceOf[java.lang.Character]\n  /** @group conversions-anyval-to-java */\n  implicit def int2Integer(x: Int): java.lang.Integer         \u003d x.asInstanceOf[java.lang.Integer]\n  /** @group conversions-anyval-to-java */\n  implicit def long2Long(x: Long): java.lang.Long             \u003d x.asInstanceOf[java.lang.Long]\n  /** @group conversions-anyval-to-java */\n  implicit def float2Float(x: Float): java.lang.Float         \u003d x.asInstanceOf[java.lang.Float]\n  /** @group conversions-anyval-to-java */\n  implicit def double2Double(x: Double): java.lang.Double     \u003d x.asInstanceOf[java.lang.Double]\n  /** @group conversions-anyval-to-java */\n  implicit def boolean2Boolean(x: Boolean): java.lang.Boolean \u003d x.asInstanceOf[java.lang.Boolean]\n\n  /** @group conversions-java-to-anyval */\n  implicit def Byte2byte(x: java.lang.Byte): Byte             \u003d x.asInstanceOf[Byte]\n  /** @group conversions-java-to-anyval */\n  implicit def Short2short(x: java.lang.Short): Short         \u003d x.asInstanceOf[Short]\n  /** @group conversions-java-to-anyval */\n  implicit def Character2char(x: java.lang.Character): Char   \u003d x.asInstanceOf[Char]\n  /** @group conversions-java-to-anyval */\n  implicit def Integer2int(x: java.lang.Integer): Int         \u003d x.asInstanceOf[Int]\n  /** @group conversions-java-to-anyval */\n  implicit def Long2long(x: java.lang.Long): Long             \u003d x.asInstanceOf[Long]\n  /** @group conversions-java-to-anyval */\n  implicit def Float2float(x: java.lang.Float): Float         \u003d x.asInstanceOf[Float]\n  /** @group conversions-java-to-anyval */\n  implicit def Double2double(x: java.lang.Double): Double     \u003d x.asInstanceOf[Double]\n  /** @group conversions-java-to-anyval */\n  implicit def Boolean2boolean(x: java.lang.Boolean): Boolean \u003d x.asInstanceOf[Boolean]\n\n  // Type Constraints --------------------------------------------------------------\n\n  /**\n   * An instance of `A \u003c:\u003c B` witnesses that `A` is a subtype of `B`.\n   * Requiring an implicit argument of the type `A \u003c:\u003c B` encodes\n   * the generalized constraint `A \u003c: B`.\n   *\n   * @note we need a new type constructor `\u003c:\u003c` and evidence `conforms`,\n   * as reusing `Function1` and `identity` leads to ambiguities in\n   * case of type errors (`any2stringadd` is inferred)\n   *\n   * To constrain any abstract type T that\u0027s in scope in a method\u0027s\n   * argument list (not just the method\u0027s own type parameters) simply\n   * add an implicit argument of type `T \u003c:\u003c U`, where `U` is the required\n   * upper bound; or for lower-bounds, use: `L \u003c:\u003c T`, where `L` is the\n   * required lower bound.\n   *\n   * In part contributed by Jason Zaugg.\n   * @group type-constraints\n   */\n  @implicitNotFound(msg \u003d \"Cannot prove that ${From} \u003c:\u003c ${To}.\")\n  sealed abstract class \u003c:\u003c[-From, +To] extends (From \u003d\u003e To) with Serializable\n  private[this] final val singleton_\u003c:\u003c \u003d new \u003c:\u003c[Any,Any] { def apply(x: Any): Any \u003d x }\n  // The dollar prefix is to dodge accidental shadowing of this method\n  // by a user-defined method of the same name (scala/bug#7788).\n  // The collections rely on this method.\n  /** @group type-constraints */\n  implicit def $conforms[A]: A \u003c:\u003c A \u003d singleton_\u003c:\u003c.asInstanceOf[A \u003c:\u003c A]\n\n  @deprecated(\"use `implicitly[T \u003c:\u003c U]` or `identity` instead.\", \"2.11.0\")\n  def conforms[A]: A \u003c:\u003c A \u003d $conforms[A]\n\n  /** An instance of `A \u003d:\u003d B` witnesses that the types `A` and `B` are equal.\n   *\n   * @see `\u003c:\u003c` for expressing subtyping constraints\n   * @group type-constraints\n   */\n  @implicitNotFound(msg \u003d \"Cannot prove that ${From} \u003d:\u003d ${To}.\")\n  sealed abstract class \u003d:\u003d[From, To] extends (From \u003d\u003e To) with Serializable\n  private[this] final val singleton_\u003d:\u003d \u003d new \u003d:\u003d[Any,Any] { def apply(x: Any): Any \u003d x }\n  /** @group type-constraints */\n  object \u003d:\u003d {\n     implicit def tpEquals[A]: A \u003d:\u003d A \u003d singleton_\u003d:\u003d.asInstanceOf[A \u003d:\u003d A]\n  }\n\n  /** A type for which there is always an implicit value.\n   *  @see [[scala.Array$]], method `fallbackCanBuildFrom`\n   */\n  class DummyImplicit\n\n  object DummyImplicit {\n\n    /** An implicit value yielding a `DummyImplicit`.\n     *   @see [[scala.Array$]], method `fallbackCanBuildFrom`\n     */\n    implicit def dummyImplicit: DummyImplicit \u003d new DummyImplicit\n  }\n}\n\nprivate[scala] trait DeprecatedPredef {\n  self: Predef.type \u003d\u003e\n\n  // Deprecated stubs for any who may have been calling these methods directly.\n  @deprecated(\"use `ArrowAssoc`\", \"2.11.0\") def any2ArrowAssoc[A](x: A): ArrowAssoc[A]                                      \u003d new ArrowAssoc(x)\n  @deprecated(\"use `Ensuring`\", \"2.11.0\") def any2Ensuring[A](x: A): Ensuring[A]                                            \u003d new Ensuring(x)\n  @deprecated(\"use `StringFormat`\", \"2.11.0\") def any2stringfmt(x: Any): StringFormat[Any]                                  \u003d new StringFormat(x)\n  @deprecated(\"use `Throwable` directly\", \"2.11.0\") def exceptionWrapper(exc: Throwable)                                    \u003d new RichException(exc)\n  @deprecated(\"use `SeqCharSequence`\", \"2.11.0\") def seqToCharSequence(xs: scala.collection.IndexedSeq[Char]): CharSequence \u003d new SeqCharSequence(xs)\n  @deprecated(\"use `ArrayCharSequence`\", \"2.11.0\") def arrayToCharSequence(xs: Array[Char]): CharSequence                   \u003d new ArrayCharSequence(xs)\n\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readLine(): String                 \u003d StdIn.readLine()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readLine(text: String, args: Any*) \u003d StdIn.readLine(text, args: _*)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readBoolean()                      \u003d StdIn.readBoolean()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readByte()                         \u003d StdIn.readByte()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readShort()                        \u003d StdIn.readShort()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readChar()                         \u003d StdIn.readChar()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readInt()                          \u003d StdIn.readInt()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readLong()                         \u003d StdIn.readLong()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readFloat()                        \u003d StdIn.readFloat()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readDouble()                       \u003d StdIn.readDouble()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf(format: String)              \u003d StdIn.readf(format)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf1(format: String)             \u003d StdIn.readf1(format)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf2(format: String)             \u003d StdIn.readf2(format)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf3(format: String)             \u003d StdIn.readf3(format)\n}\n\n/** The `LowPriorityImplicits` class provides implicit values that\n*  are valid in all Scala compilation units without explicit qualification,\n*  but that are partially overridden by higher-priority conversions in object\n*  `Predef`.\n*\n*  @author  Martin Odersky\n*  @since 2.8\n*/\n// scala/bug#7335 Parents of Predef are defined in the same compilation unit to avoid\n// cyclic reference errors compiling the standard library *without* a previously\n// compiled copy on the classpath.\nprivate[scala] abstract class LowPriorityImplicits {\n  import mutable.WrappedArray\n  import immutable.WrappedString\n\n  /** We prefer the java.lang.* boxed types to these wrappers in\n   *  any potential conflicts.  Conflicts do exist because the wrappers\n   *  need to implement ScalaNumber in order to have a symmetric equals\n   *  method, but that implies implementing java.lang.Number as well.\n   *\n   *  Note - these are inlined because they are value classes, but\n   *  the call to xxxWrapper is not eliminated even though it does nothing.\n   *  Even inlined, every call site does a no-op retrieval of Predef\u0027s MODULE$\n   *  because maybe loading Predef has side effects!\n   */\n  @inline implicit def byteWrapper(x: Byte)       \u003d new runtime.RichByte(x)\n  @inline implicit def shortWrapper(x: Short)     \u003d new runtime.RichShort(x)\n  @inline implicit def intWrapper(x: Int)         \u003d new runtime.RichInt(x)\n  @inline implicit def charWrapper(c: Char)       \u003d new runtime.RichChar(c)\n  @inline implicit def longWrapper(x: Long)       \u003d new runtime.RichLong(x)\n  @inline implicit def floatWrapper(x: Float)     \u003d new runtime.RichFloat(x)\n  @inline implicit def doubleWrapper(x: Double)   \u003d new runtime.RichDouble(x)\n  @inline implicit def booleanWrapper(x: Boolean) \u003d new runtime.RichBoolean(x)\n\n  /** @group conversions-array-to-wrapped-array */\n  implicit def genericWrapArray[T](xs: Array[T]): WrappedArray[T] \u003d\n    if (xs eq null) null\n    else WrappedArray.make(xs)\n\n  // Since the JVM thinks arrays are covariant, one 0-length Array[AnyRef]\n  // is as good as another for all T \u003c: AnyRef.  Instead of creating 100,000,000\n  // unique ones by way of this implicit, let\u0027s share one.\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapRefArray[T \u003c: AnyRef](xs: Array[T]): WrappedArray[T] \u003d {\n    if (xs eq null) null\n    else if (xs.length \u003d\u003d 0) WrappedArray.empty[T]\n    else new WrappedArray.ofRef[T](xs)\n  }\n\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapIntArray(xs: Array[Int]): WrappedArray[Int] \u003d if (xs ne null) new WrappedArray.ofInt(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapDoubleArray(xs: Array[Double]): WrappedArray[Double] \u003d if (xs ne null) new WrappedArray.ofDouble(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapLongArray(xs: Array[Long]): WrappedArray[Long] \u003d if (xs ne null) new WrappedArray.ofLong(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapFloatArray(xs: Array[Float]): WrappedArray[Float] \u003d if (xs ne null) new WrappedArray.ofFloat(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapCharArray(xs: Array[Char]): WrappedArray[Char] \u003d if (xs ne null) new WrappedArray.ofChar(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapByteArray(xs: Array[Byte]): WrappedArray[Byte] \u003d if (xs ne null) new WrappedArray.ofByte(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapShortArray(xs: Array[Short]): WrappedArray[Short] \u003d if (xs ne null) new WrappedArray.ofShort(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapBooleanArray(xs: Array[Boolean]): WrappedArray[Boolean] \u003d if (xs ne null) new WrappedArray.ofBoolean(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapUnitArray(xs: Array[Unit]): WrappedArray[Unit] \u003d if (xs ne null) new WrappedArray.ofUnit(xs) else null\n\n  /** @group conversions-string */\n  implicit def wrapString(s: String): WrappedString \u003d if (s ne null) new WrappedString(s) else null\n  /** @group conversions-string */\n  implicit def unwrapString(ws: WrappedString): String \u003d if (ws ne null) ws.self else null\n\n  implicit def fallbackStringCanBuildFrom[T]: CanBuildFrom[String, T, immutable.IndexedSeq[T]] \u003d\n    new CanBuildFrom[String, T, immutable.IndexedSeq[T]] {\n      def apply(from: String) \u003d immutable.IndexedSeq.newBuilder[T]\n      def apply() \u003d immutable.IndexedSeq.newBuilder[T]\n    }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

2020.11.11 19:23:59 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:23:59 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 19:23:59 INFO  time: compiled task1-scala in 0.68s
Nov 11, 2020 7:24:29 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Predef.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\npackage scala\n\nimport scala.language.implicitConversions\n\nimport scala.collection.{ mutable, immutable, generic }\nimport immutable.StringOps\nimport mutable.ArrayOps\nimport generic.CanBuildFrom\nimport scala.annotation.{ elidable, implicitNotFound }\nimport scala.annotation.elidable.ASSERTION\nimport scala.io.StdIn\n\n/** The `Predef` object provides definitions that are accessible in all Scala\n *  compilation units without explicit qualification.\n *\n *  \u003d\u003d\u003d Commonly Used Types \u003d\u003d\u003d\n *  Predef provides type aliases for types which are commonly used, such as\n *  the immutable collection types [[scala.collection.immutable.Map]],\n *  [[scala.collection.immutable.Set]], and the [[scala.collection.immutable.List]]\n *  constructors ([[scala.collection.immutable.::]] and\n *  [[scala.collection.immutable.Nil]]).\n *\n *  \u003d\u003d\u003d Console Output \u003d\u003d\u003d\n *  For basic console output, `Predef` provides convenience methods [[print(x:Any* print]] and [[println(x:Any* println]],\n *  which are aliases of the methods in the object [[scala.Console]].\n *\n *  \u003d\u003d\u003d Assertions \u003d\u003d\u003d\n *  A set of `assert` functions are provided for use as a way to document\n *  and dynamically check invariants in code. Invocations of `assert` can be elided\n *  at compile time by providing the command line option `-Xdisable-assertions`,\n *  which raises `-Xelide-below` above `elidable.ASSERTION`, to the `scalac` command.\n *\n *  Variants of `assert` intended for use with static analysis tools are also\n *  provided: `assume`, `require` and `ensuring`. `require` and `ensuring` are\n *  intended for use as a means of design-by-contract style specification\n *  of pre- and post-conditions on functions, with the intention that these\n *  specifications could be consumed by a static analysis tool. For instance,\n *\n *  {{{\n *  def addNaturals(nats: List[Int]): Int \u003d {\n *    require(nats forall (_ \u003e\u003d 0), \"List contains negative numbers\")\n *    nats.foldLeft(0)(_ + _)\n *  } ensuring(_ \u003e\u003d 0)\n *  }}}\n *\n *  The declaration of `addNaturals` states that the list of integers passed should\n *  only contain natural numbers (i.e. non-negative), and that the result returned\n *  will also be natural. `require` is distinct from `assert` in that if the\n *  condition fails, then the caller of the function is to blame rather than a\n *  logical error having been made within `addNaturals` itself. `ensuring` is a\n *  form of `assert` that declares the guarantee the function is providing with\n *  regards to its return value.\n *\n *  \u003d\u003d\u003d Implicit Conversions \u003d\u003d\u003d\n *  A number of commonly applied implicit conversions are also defined here, and\n *  in the parent type [[scala.LowPriorityImplicits]]. Implicit conversions\n *  are provided for the \"widening\" of numeric values, for instance, converting a\n *  Short value to a Long value as required, and to add additional higher-order\n *  functions to Array values. These are described in more detail in the documentation of [[scala.Array]].\n *\n * @groupname utilities Utility Methods\n * @groupprio utilities 10\n *\n * @groupname assertions Assertions\n * @groupprio assertions 20\n * @groupdesc assertions These methods support program verification and runtime correctness.\n *\n * @groupname console-output Console Output\n * @groupprio console-output 30\n * @groupdesc console-output These methods provide output via the console.\n *\n * @groupname type-constraints Type Constraints\n * @groupprio type-constraints 40\n * @groupdesc type-constraints These entities allows constraints between types to be stipulated.\n *\n * @groupname aliases Aliases\n * @groupprio aliases 50\n * @groupdesc aliases These aliases bring selected immutable types into scope without any imports.\n *\n * @groupname conversions-string String Conversions\n * @groupprio conversions-string 60\n * @groupdesc conversions-string Conversions to and from String and StringOps.\n *\n * @groupname implicit-classes-any Implicit Classes\n * @groupprio implicit-classes-any 70\n * @groupdesc implicit-classes-any These implicit classes add useful extension methods to every type.\n *\n * @groupname implicit-classes-char CharSequence Conversions\n * @groupprio implicit-classes-char 80\n * @groupdesc implicit-classes-char These implicit classes add CharSequence methods to Array[Char] and IndexedSeq[Char] instances.\n *\n * @groupname conversions-java-to-anyval Java to Scala\n * @groupprio conversions-java-to-anyval 90\n * @groupdesc conversions-java-to-anyval Implicit conversion from Java primitive wrapper types to Scala equivalents.\n *\n * @groupname conversions-anyval-to-java Scala to Java\n * @groupprio conversions-anyval-to-java 100\n * @groupdesc conversions-anyval-to-java Implicit conversion from Scala AnyVals to Java primitive wrapper types equivalents.\n *\n * @groupname conversions-array-to-wrapped-array Array to WrappedArray\n * @groupprio conversions-array-to-wrapped-array 110\n * @groupdesc conversions-array-to-wrapped-array Conversions from Arrays to WrappedArrays.\n */\nobject Predef extends LowPriorityImplicits with DeprecatedPredef {\n  /**\n   * Retrieve the runtime representation of a class type. `classOf[T]` is equivalent to\n   * the class literal `T.class` in Java.\n   *\n   * @example {{{\n   * val listClass \u003d classOf[List[_]]\n   * // listClass is java.lang.Class[List[_]] \u003d class scala.collection.immutable.List\n   *\n   * val mapIntString \u003d classOf[Map[Int,String]]\n   * // mapIntString is java.lang.Class[Map[Int,String]] \u003d interface scala.collection.immutable.Map\n   * }}}\n   * @group utilities\n   */\n  def classOf[T]: Class[T] \u003d null // This is a stub method. The actual implementation is filled in by the compiler.\n\n  /** The `String` type in Scala has methods that come either from the underlying\n   *  Java String (see the documentation corresponding to your Java version, for\n   *  example [[http://docs.oracle.com/javase/8/docs/api/java/lang/String.html]]) or\n   *  are added implicitly through [[scala.collection.immutable.StringOps]].\n   *  @group aliases\n   */\n  type String        \u003d java.lang.String\n  /**  @group aliases */\n  type Class[T]      \u003d java.lang.Class[T]\n\n  // miscellaneous -----------------------------------------------------\n  scala.`package`                         // to force scala package object to be seen.\n  scala.collection.immutable.List         // to force Nil, :: to be seen.\n\n  /**  @group aliases */\n  type Function[-A, +B] \u003d Function1[A, B]\n\n  /**  @group aliases */\n  type Map[A, +B] \u003d immutable.Map[A, B]\n  /**  @group aliases */\n  type Set[A]     \u003d immutable.Set[A]\n  /**  @group aliases */\n  val Map         \u003d immutable.Map\n  /**  @group aliases */\n  val Set         \u003d immutable.Set\n\n  // Manifest types, companions, and incantations for summoning\n  @annotation.implicitNotFound(msg \u003d \"No ClassManifest available for ${T}.\")\n  @deprecated(\"use `scala.reflect.ClassTag` instead\", \"2.10.0\")\n  type ClassManifest[T] \u003d scala.reflect.ClassManifest[T]\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"this notion doesn\u0027t have a corresponding concept in 2.10, because scala.reflect.runtime.universe.TypeTag can capture arbitrary types. Use type tags instead of manifests, and there will be no need in opt manifests.\", \"2.10.0\")\n  type OptManifest[T]   \u003d scala.reflect.OptManifest[T]\n  @annotation.implicitNotFound(msg \u003d \"No Manifest available for ${T}.\")\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"use `scala.reflect.ClassTag` (to capture erasures) or scala.reflect.runtime.universe.TypeTag (to capture types) or both instead\", \"2.10.0\")\n  type Manifest[T]      \u003d scala.reflect.Manifest[T]\n  @deprecated(\"use `scala.reflect.ClassTag` instead\", \"2.10.0\")\n  val ClassManifest     \u003d scala.reflect.ClassManifest\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"use `scala.reflect.ClassTag` (to capture erasures) or scala.reflect.runtime.universe.TypeTag (to capture types) or both instead\", \"2.10.0\")\n  val Manifest          \u003d scala.reflect.Manifest\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"this notion doesn\u0027t have a corresponding concept in 2.10, because scala.reflect.runtime.universe.TypeTag can capture arbitrary types. Use type tags instead of manifests, and there will be no need in opt manifests.\", \"2.10.0\")\n  val NoManifest        \u003d scala.reflect.NoManifest\n\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"use scala.reflect.classTag[T] and scala.reflect.runtime.universe.typeTag[T] instead\", \"2.10.0\")\n  def manifest[T](implicit m: Manifest[T])           \u003d m\n  @deprecated(\"use scala.reflect.classTag[T] instead\", \"2.10.0\")\n  def classManifest[T](implicit m: ClassManifest[T]) \u003d m\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"this notion doesn\u0027t have a corresponding concept in 2.10, because scala.reflect.runtime.universe.TypeTag can capture arbitrary types. Use type tags instead of manifests, and there will be no need in opt manifests.\", \"2.10.0\")\n  def optManifest[T](implicit m: OptManifest[T])     \u003d m\n\n  // Minor variations on identity functions\n  /** @group utilities */\n  @inline def identity[A](x: A): A         \u003d x    // @see `conforms` for the implicit version\n  /** @group utilities */\n  @inline def implicitly[T](implicit e: T) \u003d e    // for summoning implicit values from the nether world -- TODO: when dependent method types are on by default, give this result type `e.type`, so that inliner has better chance of knowing which method to inline in calls like `implicitly[MatchingStrategy[Option]].zero`\n  /** @group utilities */\n  @inline def locally[T](x: T): T  \u003d x    // to communicate intent and avoid unmoored statements\n\n  // assertions ---------------------------------------------------------\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  Calls to this method will not be generated if `-Xelide-below`\n   *  is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assertion   the expression to test\n   *  @group assertions\n   */\n  @elidable(ASSERTION)\n  def assert(assertion: Boolean) {\n    if (!assertion)\n      throw new java.lang.AssertionError(\"assertion failed\")\n  }\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  Calls to this method will not be generated if `-Xelide-below`\n   *  is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assertion   the expression to test\n   *  @param message     a String to include in the failure message\n   *  @group assertions\n   */\n  @elidable(ASSERTION) @inline\n  final def assert(assertion: Boolean, message: \u003d\u003e Any) {\n    if (!assertion)\n      throw new java.lang.AssertionError(\"assertion failed: \"+ message)\n  }\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  This method differs from assert only in the intent expressed:\n   *  assert contains a predicate which needs to be proven, while\n   *  assume contains an axiom for a static checker.  Calls to this method\n   *  will not be generated if `-Xelide-below` is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assumption   the expression to test\n   *  @group assertions\n   */\n  @elidable(ASSERTION)\n  def assume(assumption: Boolean) {\n    if (!assumption)\n      throw new java.lang.AssertionError(\"assumption failed\")\n  }\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  This method differs from assert only in the intent expressed:\n   *  assert contains a predicate which needs to be proven, while\n   *  assume contains an axiom for a static checker.  Calls to this method\n   *  will not be generated if `-Xelide-below` is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assumption   the expression to test\n   *  @param message      a String to include in the failure message\n   *  @group assertions\n   */\n  @elidable(ASSERTION) @inline\n  final def assume(assumption: Boolean, message: \u003d\u003e Any) {\n    if (!assumption)\n      throw new java.lang.AssertionError(\"assumption failed: \"+ message)\n  }\n\n  /** Tests an expression, throwing an `IllegalArgumentException` if false.\n   *  This method is similar to `assert`, but blames the caller of the method\n   *  for violating the condition.\n   *\n   *  @param requirement   the expression to test\n   *  @group assertions\n   */\n  def require(requirement: Boolean) {\n    if (!requirement)\n      throw new IllegalArgumentException(\"requirement failed\")\n  }\n\n  /** Tests an expression, throwing an `IllegalArgumentException` if false.\n   *  This method is similar to `assert`, but blames the caller of the method\n   *  for violating the condition.\n   *\n   *  @param requirement   the expression to test\n   *  @param message       a String to include in the failure message\n   *  @group assertions\n   */\n  @inline final def require(requirement: Boolean, message: \u003d\u003e Any) {\n    if (!requirement)\n      throw new IllegalArgumentException(\"requirement failed: \"+ message)\n  }\n\n  /** `???` can be used for marking methods that remain to be implemented.\n   *  @throws NotImplementedError\n   *  @group utilities\n   */\n  def ??? : Nothing \u003d throw new NotImplementedError\n\n  // tupling ------------------------------------------------------------\n\n  @deprecated(\"use built-in tuple syntax or Tuple2 instead\", \"2.11.0\")\n  type Pair[+A, +B] \u003d Tuple2[A, B]\n  @deprecated(\"use built-in tuple syntax or Tuple2 instead\", \"2.11.0\")\n  object Pair {\n    def apply[A, B](x: A, y: B) \u003d Tuple2(x, y)\n    def unapply[A, B](x: Tuple2[A, B]): Option[Tuple2[A, B]] \u003d Some(x)\n  }\n\n  @deprecated(\"use built-in tuple syntax or Tuple3 instead\", \"2.11.0\")\n  type Triple[+A, +B, +C] \u003d Tuple3[A, B, C]\n  @deprecated(\"use built-in tuple syntax or Tuple3 instead\", \"2.11.0\")\n  object Triple {\n    def apply[A, B, C](x: A, y: B, z: C) \u003d Tuple3(x, y, z)\n    def unapply[A, B, C](x: Tuple3[A, B, C]): Option[Tuple3[A, B, C]] \u003d Some(x)\n  }\n\n  // implicit classes -----------------------------------------------------\n\n  /** @group implicit-classes-any */\n  implicit final class ArrowAssoc[A](private val self: A) extends AnyVal {\n    @inline def -\u003e [B](y: B): Tuple2[A, B] \u003d Tuple2(self, y)\n    def ?[B](y: B): Tuple2[A, B] \u003d -\u003e(y)\n  }\n\n  /** @group implicit-classes-any */\n  implicit final class Ensuring[A](private val self: A) extends AnyVal {\n    def ensuring(cond: Boolean): A \u003d { assert(cond); self }\n    def ensuring(cond: Boolean, msg: \u003d\u003e Any): A \u003d { assert(cond, msg); self }\n    def ensuring(cond: A \u003d\u003e Boolean): A \u003d { assert(cond(self)); self }\n    def ensuring(cond: A \u003d\u003e Boolean, msg: \u003d\u003e Any): A \u003d { assert(cond(self), msg); self }\n  }\n\n  /** @group implicit-classes-any */\n  implicit final class StringFormat[A](private val self: A) extends AnyVal {\n    /** Returns string formatted according to given `format` string.\n     *  Format strings are as for `String.format`\n     *  (@see java.lang.String.format).\n     */\n    @inline def formatted(fmtstr: String): String \u003d fmtstr format self\n  }\n\n  // scala/bug#8229 retaining the pre 2.11 name for source compatibility in shadowing this implicit\n  /** @group implicit-classes-any */\n  implicit final class any2stringadd[A](private val self: A) extends AnyVal {\n    def +(other: String): String \u003d String.valueOf(self) + other\n  }\n\n  implicit final class RichException(private val self: Throwable) extends AnyVal {\n    import scala.compat.Platform.EOL\n    @deprecated(\"use Throwable#getStackTrace\", \"2.11.0\") def getStackTraceString \u003d self.getStackTrace().mkString(\"\", EOL, EOL)\n  }\n\n  // Sadly we have to do `@deprecatedName(null, \"2.12.0\")` because\n  // `@deprecatedName(since\u003d\"2.12.0\")` incurs a warning about\n  //   Usage of named or default arguments transformed this annotation constructor call into a block.\n  //   The corresponding AnnotationInfo will contain references to local values and default getters\n  //   instead of the actual argument trees\n  // and `@deprecatedName(Symbol(\"\u003cnone\u003e\"), \"2.12.0\")` crashes scalac with\n  //   scala.reflect.internal.Symbols$CyclicReference: illegal cyclic reference involving object Symbol\n  // in run/repl-no-imports-no-predef-power.scala.\n  /** @group implicit-classes-char */\n  implicit final class SeqCharSequence(@deprecated(\"will be made private\", \"2.12.0\") @deprecatedName(null, \"2.12.0\") val __sequenceOfChars: scala.collection.IndexedSeq[Char]) extends CharSequence {\n    def length: Int                                     \u003d __sequenceOfChars.length\n    def charAt(index: Int): Char                        \u003d __sequenceOfChars(index)\n    def subSequence(start: Int, end: Int): CharSequence \u003d new SeqCharSequence(__sequenceOfChars.slice(start, end))\n    override def toString                               \u003d __sequenceOfChars mkString \"\"\n  }\n\n  /** @group implicit-classes-char */\n  implicit final class ArrayCharSequence(@deprecated(\"will be made private\", \"2.12.0\") @deprecatedName(null, \"2.12.0\") val __arrayOfChars: Array[Char]) extends CharSequence {\n    def length: Int                                     \u003d __arrayOfChars.length\n    def charAt(index: Int): Char                        \u003d __arrayOfChars(index)\n    def subSequence(start: Int, end: Int): CharSequence \u003d new runtime.ArrayCharSequence(__arrayOfChars, start, end)\n    override def toString                               \u003d __arrayOfChars mkString \"\"\n  }\n\n  implicit val StringCanBuildFrom: CanBuildFrom[String, Char, String] \u003d new CanBuildFrom[String, Char, String] {\n    def apply(from: String) \u003d apply()\n    def apply()             \u003d mutable.StringBuilder.newBuilder\n  }\n\n  /** @group conversions-string */\n  @inline implicit def augmentString(x: String): StringOps \u003d new StringOps(x)\n  /** @group conversions-string */\n  @inline implicit def unaugmentString(x: StringOps): String \u003d x.repr\n\n  // printing -----------------------------------------------------------\n\n  /** Prints an object to `out` using its `toString` method.\n   *\n   *  @param x the object to print; may be null.\n   *  @group console-output\n   */\n  def print(x: Any) \u003d Console.print(x)\n\n  /** Prints a newline character on the default output.\n   *  @group console-output\n   */\n  def println() \u003d Console.println()\n\n  /** Prints out an object to the default output, followed by a newline character.\n   *\n   *  @param x the object to print.\n   *  @group console-output\n   */\n  def println(x: Any) \u003d Console.println(x)\n\n  /** Prints its arguments as a formatted string to the default output,\n   *  based on a string pattern (in a fashion similar to printf in C).\n   *\n   *  The interpretation of the formatting patterns is described in\n   *  [[java.util.Formatter]].\n   *\n   *  Consider using the [[scala.StringContext.f f interpolator]] as more type safe and idiomatic.\n   *\n   *  @param text the pattern for formatting the arguments.\n   *  @param args the arguments used to instantiating the pattern.\n   *  @throws java.lang.IllegalArgumentException if there was a problem with the format string or arguments\n   *\n   *  @see [[scala.StringContext.f StringContext.f]]\n   *  @group console-output\n   */\n  def printf(text: String, xs: Any*) \u003d Console.print(text.format(xs: _*))\n\n  // views --------------------------------------------------------------\n\n  implicit def tuple2ToZippedOps[T1, T2](x: (T1, T2))                           \u003d new runtime.Tuple2Zipped.Ops(x)\n  implicit def tuple3ToZippedOps[T1, T2, T3](x: (T1, T2, T3))                   \u003d new runtime.Tuple3Zipped.Ops(x)\n\n  implicit def genericArrayOps[T](xs: Array[T]): ArrayOps[T] \u003d (xs match {\n    case x: Array[AnyRef]  \u003d\u003e refArrayOps[AnyRef](x)\n    case x: Array[Boolean] \u003d\u003e booleanArrayOps(x)\n    case x: Array[Byte]    \u003d\u003e byteArrayOps(x)\n    case x: Array[Char]    \u003d\u003e charArrayOps(x)\n    case x: Array[Double]  \u003d\u003e doubleArrayOps(x)\n    case x: Array[Float]   \u003d\u003e floatArrayOps(x)\n    case x: Array[Int]     \u003d\u003e intArrayOps(x)\n    case x: Array[Long]    \u003d\u003e longArrayOps(x)\n    case x: Array[Short]   \u003d\u003e shortArrayOps(x)\n    case x: Array[Unit]    \u003d\u003e unitArrayOps(x)\n    case null              \u003d\u003e null\n  }).asInstanceOf[ArrayOps[T]]\n\n  implicit def booleanArrayOps(xs: Array[Boolean]): ArrayOps.ofBoolean   \u003d new ArrayOps.ofBoolean(xs)\n  implicit def byteArrayOps(xs: Array[Byte]): ArrayOps.ofByte            \u003d new ArrayOps.ofByte(xs)\n  implicit def charArrayOps(xs: Array[Char]): ArrayOps.ofChar            \u003d new ArrayOps.ofChar(xs)\n  implicit def doubleArrayOps(xs: Array[Double]): ArrayOps.ofDouble      \u003d new ArrayOps.ofDouble(xs)\n  implicit def floatArrayOps(xs: Array[Float]): ArrayOps.ofFloat         \u003d new ArrayOps.ofFloat(xs)\n  implicit def intArrayOps(xs: Array[Int]): ArrayOps.ofInt               \u003d new ArrayOps.ofInt(xs)\n  implicit def longArrayOps(xs: Array[Long]): ArrayOps.ofLong            \u003d new ArrayOps.ofLong(xs)\n  implicit def refArrayOps[T \u003c: AnyRef](xs: Array[T]): ArrayOps.ofRef[T] \u003d new ArrayOps.ofRef[T](xs)\n  implicit def shortArrayOps(xs: Array[Short]): ArrayOps.ofShort         \u003d new ArrayOps.ofShort(xs)\n  implicit def unitArrayOps(xs: Array[Unit]): ArrayOps.ofUnit            \u003d new ArrayOps.ofUnit(xs)\n\n  // \"Autoboxing\" and \"Autounboxing\" ---------------------------------------------------\n\n  /** @group conversions-anyval-to-java */\n  implicit def byte2Byte(x: Byte): java.lang.Byte             \u003d x.asInstanceOf[java.lang.Byte]\n  /** @group conversions-anyval-to-java */\n  implicit def short2Short(x: Short): java.lang.Short         \u003d x.asInstanceOf[java.lang.Short]\n  /** @group conversions-anyval-to-java */\n  implicit def char2Character(x: Char): java.lang.Character   \u003d x.asInstanceOf[java.lang.Character]\n  /** @group conversions-anyval-to-java */\n  implicit def int2Integer(x: Int): java.lang.Integer         \u003d x.asInstanceOf[java.lang.Integer]\n  /** @group conversions-anyval-to-java */\n  implicit def long2Long(x: Long): java.lang.Long             \u003d x.asInstanceOf[java.lang.Long]\n  /** @group conversions-anyval-to-java */\n  implicit def float2Float(x: Float): java.lang.Float         \u003d x.asInstanceOf[java.lang.Float]\n  /** @group conversions-anyval-to-java */\n  implicit def double2Double(x: Double): java.lang.Double     \u003d x.asInstanceOf[java.lang.Double]\n  /** @group conversions-anyval-to-java */\n  implicit def boolean2Boolean(x: Boolean): java.lang.Boolean \u003d x.asInstanceOf[java.lang.Boolean]\n\n  /** @group conversions-java-to-anyval */\n  implicit def Byte2byte(x: java.lang.Byte): Byte             \u003d x.asInstanceOf[Byte]\n  /** @group conversions-java-to-anyval */\n  implicit def Short2short(x: java.lang.Short): Short         \u003d x.asInstanceOf[Short]\n  /** @group conversions-java-to-anyval */\n  implicit def Character2char(x: java.lang.Character): Char   \u003d x.asInstanceOf[Char]\n  /** @group conversions-java-to-anyval */\n  implicit def Integer2int(x: java.lang.Integer): Int         \u003d x.asInstanceOf[Int]\n  /** @group conversions-java-to-anyval */\n  implicit def Long2long(x: java.lang.Long): Long             \u003d x.asInstanceOf[Long]\n  /** @group conversions-java-to-anyval */\n  implicit def Float2float(x: java.lang.Float): Float         \u003d x.asInstanceOf[Float]\n  /** @group conversions-java-to-anyval */\n  implicit def Double2double(x: java.lang.Double): Double     \u003d x.asInstanceOf[Double]\n  /** @group conversions-java-to-anyval */\n  implicit def Boolean2boolean(x: java.lang.Boolean): Boolean \u003d x.asInstanceOf[Boolean]\n\n  // Type Constraints --------------------------------------------------------------\n\n  /**\n   * An instance of `A \u003c:\u003c B` witnesses that `A` is a subtype of `B`.\n   * Requiring an implicit argument of the type `A \u003c:\u003c B` encodes\n   * the generalized constraint `A \u003c: B`.\n   *\n   * @note we need a new type constructor `\u003c:\u003c` and evidence `conforms`,\n   * as reusing `Function1` and `identity` leads to ambiguities in\n   * case of type errors (`any2stringadd` is inferred)\n   *\n   * To constrain any abstract type T that\u0027s in scope in a method\u0027s\n   * argument list (not just the method\u0027s own type parameters) simply\n   * add an implicit argument of type `T \u003c:\u003c U`, where `U` is the required\n   * upper bound; or for lower-bounds, use: `L \u003c:\u003c T`, where `L` is the\n   * required lower bound.\n   *\n   * In part contributed by Jason Zaugg.\n   * @group type-constraints\n   */\n  @implicitNotFound(msg \u003d \"Cannot prove that ${From} \u003c:\u003c ${To}.\")\n  sealed abstract class \u003c:\u003c[-From, +To] extends (From \u003d\u003e To) with Serializable\n  private[this] final val singleton_\u003c:\u003c \u003d new \u003c:\u003c[Any,Any] { def apply(x: Any): Any \u003d x }\n  // The dollar prefix is to dodge accidental shadowing of this method\n  // by a user-defined method of the same name (scala/bug#7788).\n  // The collections rely on this method.\n  /** @group type-constraints */\n  implicit def $conforms[A]: A \u003c:\u003c A \u003d singleton_\u003c:\u003c.asInstanceOf[A \u003c:\u003c A]\n\n  @deprecated(\"use `implicitly[T \u003c:\u003c U]` or `identity` instead.\", \"2.11.0\")\n  def conforms[A]: A \u003c:\u003c A \u003d $conforms[A]\n\n  /** An instance of `A \u003d:\u003d B` witnesses that the types `A` and `B` are equal.\n   *\n   * @see `\u003c:\u003c` for expressing subtyping constraints\n   * @group type-constraints\n   */\n  @implicitNotFound(msg \u003d \"Cannot prove that ${From} \u003d:\u003d ${To}.\")\n  sealed abstract class \u003d:\u003d[From, To] extends (From \u003d\u003e To) with Serializable\n  private[this] final val singleton_\u003d:\u003d \u003d new \u003d:\u003d[Any,Any] { def apply(x: Any): Any \u003d x }\n  /** @group type-constraints */\n  object \u003d:\u003d {\n     implicit def tpEquals[A]: A \u003d:\u003d A \u003d singleton_\u003d:\u003d.asInstanceOf[A \u003d:\u003d A]\n  }\n\n  /** A type for which there is always an implicit value.\n   *  @see [[scala.Array$]], method `fallbackCanBuildFrom`\n   */\n  class DummyImplicit\n\n  object DummyImplicit {\n\n    /** An implicit value yielding a `DummyImplicit`.\n     *   @see [[scala.Array$]], method `fallbackCanBuildFrom`\n     */\n    implicit def dummyImplicit: DummyImplicit \u003d new DummyImplicit\n  }\n}\n\nprivate[scala] trait DeprecatedPredef {\n  self: Predef.type \u003d\u003e\n\n  // Deprecated stubs for any who may have been calling these methods directly.\n  @deprecated(\"use `ArrowAssoc`\", \"2.11.0\") def any2ArrowAssoc[A](x: A): ArrowAssoc[A]                                      \u003d new ArrowAssoc(x)\n  @deprecated(\"use `Ensuring`\", \"2.11.0\") def any2Ensuring[A](x: A): Ensuring[A]                                            \u003d new Ensuring(x)\n  @deprecated(\"use `StringFormat`\", \"2.11.0\") def any2stringfmt(x: Any): StringFormat[Any]                                  \u003d new StringFormat(x)\n  @deprecated(\"use `Throwable` directly\", \"2.11.0\") def exceptionWrapper(exc: Throwable)                                    \u003d new RichException(exc)\n  @deprecated(\"use `SeqCharSequence`\", \"2.11.0\") def seqToCharSequence(xs: scala.collection.IndexedSeq[Char]): CharSequence \u003d new SeqCharSequence(xs)\n  @deprecated(\"use `ArrayCharSequence`\", \"2.11.0\") def arrayToCharSequence(xs: Array[Char]): CharSequence                   \u003d new ArrayCharSequence(xs)\n\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readLine(): String                 \u003d StdIn.readLine()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readLine(text: String, args: Any*) \u003d StdIn.readLine(text, args: _*)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readBoolean()                      \u003d StdIn.readBoolean()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readByte()                         \u003d StdIn.readByte()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readShort()                        \u003d StdIn.readShort()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readChar()                         \u003d StdIn.readChar()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readInt()                          \u003d StdIn.readInt()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readLong()                         \u003d StdIn.readLong()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readFloat()                        \u003d StdIn.readFloat()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readDouble()                       \u003d StdIn.readDouble()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf(format: String)              \u003d StdIn.readf(format)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf1(format: String)             \u003d StdIn.readf1(format)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf2(format: String)             \u003d StdIn.readf2(format)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf3(format: String)             \u003d StdIn.readf3(format)\n}\n\n/** The `LowPriorityImplicits` class provides implicit values that\n*  are valid in all Scala compilation units without explicit qualification,\n*  but that are partially overridden by higher-priority conversions in object\n*  `Predef`.\n*\n*  @author  Martin Odersky\n*  @since 2.8\n*/\n// scala/bug#7335 Parents of Predef are defined in the same compilation unit to avoid\n// cyclic reference errors compiling the standard library *without* a previously\n// compiled copy on the classpath.\nprivate[scala] abstract class LowPriorityImplicits {\n  import mutable.WrappedArray\n  import immutable.WrappedString\n\n  /** We prefer the java.lang.* boxed types to these wrappers in\n   *  any potential conflicts.  Conflicts do exist because the wrappers\n   *  need to implement ScalaNumber in order to have a symmetric equals\n   *  method, but that implies implementing java.lang.Number as well.\n   *\n   *  Note - these are inlined because they are value classes, but\n   *  the call to xxxWrapper is not eliminated even though it does nothing.\n   *  Even inlined, every call site does a no-op retrieval of Predef\u0027s MODULE$\n   *  because maybe loading Predef has side effects!\n   */\n  @inline implicit def byteWrapper(x: Byte)       \u003d new runtime.RichByte(x)\n  @inline implicit def shortWrapper(x: Short)     \u003d new runtime.RichShort(x)\n  @inline implicit def intWrapper(x: Int)         \u003d new runtime.RichInt(x)\n  @inline implicit def charWrapper(c: Char)       \u003d new runtime.RichChar(c)\n  @inline implicit def longWrapper(x: Long)       \u003d new runtime.RichLong(x)\n  @inline implicit def floatWrapper(x: Float)     \u003d new runtime.RichFloat(x)\n  @inline implicit def doubleWrapper(x: Double)   \u003d new runtime.RichDouble(x)\n  @inline implicit def booleanWrapper(x: Boolean) \u003d new runtime.RichBoolean(x)\n\n  /** @group conversions-array-to-wrapped-array */\n  implicit def genericWrapArray[T](xs: Array[T]): WrappedArray[T] \u003d\n    if (xs eq null) null\n    else WrappedArray.make(xs)\n\n  // Since the JVM thinks arrays are covariant, one 0-length Array[AnyRef]\n  // is as good as another for all T \u003c: AnyRef.  Instead of creating 100,000,000\n  // unique ones by way of this implicit, let\u0027s share one.\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapRefArray[T \u003c: AnyRef](xs: Array[T]): WrappedArray[T] \u003d {\n    if (xs eq null) null\n    else if (xs.length \u003d\u003d 0) WrappedArray.empty[T]\n    else new WrappedArray.ofRef[T](xs)\n  }\n\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapIntArray(xs: Array[Int]): WrappedArray[Int] \u003d if (xs ne null) new WrappedArray.ofInt(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapDoubleArray(xs: Array[Double]): WrappedArray[Double] \u003d if (xs ne null) new WrappedArray.ofDouble(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapLongArray(xs: Array[Long]): WrappedArray[Long] \u003d if (xs ne null) new WrappedArray.ofLong(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapFloatArray(xs: Array[Float]): WrappedArray[Float] \u003d if (xs ne null) new WrappedArray.ofFloat(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapCharArray(xs: Array[Char]): WrappedArray[Char] \u003d if (xs ne null) new WrappedArray.ofChar(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapByteArray(xs: Array[Byte]): WrappedArray[Byte] \u003d if (xs ne null) new WrappedArray.ofByte(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapShortArray(xs: Array[Short]): WrappedArray[Short] \u003d if (xs ne null) new WrappedArray.ofShort(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapBooleanArray(xs: Array[Boolean]): WrappedArray[Boolean] \u003d if (xs ne null) new WrappedArray.ofBoolean(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapUnitArray(xs: Array[Unit]): WrappedArray[Unit] \u003d if (xs ne null) new WrappedArray.ofUnit(xs) else null\n\n  /** @group conversions-string */\n  implicit def wrapString(s: String): WrappedString \u003d if (s ne null) new WrappedString(s) else null\n  /** @group conversions-string */\n  implicit def unwrapString(ws: WrappedString): String \u003d if (ws ne null) ws.self else null\n\n  implicit def fallbackStringCanBuildFrom[T]: CanBuildFrom[String, T, immutable.IndexedSeq[T]] \u003d\n    new CanBuildFrom[String, T, immutable.IndexedSeq[T]] {\n      def apply(from: String) \u003d immutable.IndexedSeq.newBuilder[T]\n      def apply() \u003d immutable.IndexedSeq.newBuilder[T]\n    }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

2020.11.11 19:24:33 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:24:33 WARN  2 deprecations (since 2.13.0); re-run with -deprecation for details
2020.11.11 19:24:33 INFO  time: compiled task1-scala in 0.69s
2020.11.11 19:24:42 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:24:42 WARN  2 deprecations (since 2.13.0); re-run with -deprecation for details
2020.11.11 19:24:42 INFO  time: compiled task1-scala in 0.77s
2020.11.11 19:25:01 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:25:01 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 19:25:01 INFO  time: compiled task1-scala in 0.63s
2020.11.11 19:25:45 INFO  compiling task1-scala (1 scala source)
Nov 11, 2020 7:25:45 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala",
      "languageId": "scala",
      "version": 1,
      "text": ""
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

2020.11.11 19:25:45 INFO  time: compiled task1-scala in 0.25s
2020.11.11 19:26:07 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:26:07 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 19:26:07 INFO  time: compiled task1-scala in 0.4s
2020.11.11 19:29:03 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:29:03 INFO  time: compiled task1-scala in 50ms
2020.11.11 19:29:07 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:29:07 INFO  time: compiled task1-scala in 46ms
2020.11.11 19:32:08 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:32:08 INFO  time: compiled task1-scala in 58ms
Nov 11, 2020 7:35:55 PM scala.meta.internal.pc.completions.Completions completionPosition
SEVERE: null
java.lang.NullPointerException
	at scala.meta.internal.pc.completions.OverrideCompletions$OverrideCompletion.<init>(OverrideCompletions.scala:46)
	at scala.meta.internal.pc.completions.Completions.completionPositionUnsafe(Completions.scala:500)
	at scala.meta.internal.pc.completions.Completions.completionPositionUnsafe$(Completions.scala:409)
	at scala.meta.internal.pc.MetalsGlobal.completionPositionUnsafe(MetalsGlobal.scala:29)
	at scala.meta.internal.pc.completions.Completions.completionPosition(Completions.scala:401)
	at scala.meta.internal.pc.completions.Completions.completionPosition$(Completions.scala:386)
	at scala.meta.internal.pc.MetalsGlobal.completionPosition(MetalsGlobal.scala:29)
	at scala.meta.internal.pc.CompletionProvider.safeCompletionsAt(CompletionProvider.scala:446)
	at scala.meta.internal.pc.CompletionProvider.completions(CompletionProvider.scala:57)
	at scala.meta.internal.pc.ScalaPresentationCompiler.$anonfun$complete$1(ScalaPresentationCompiler.scala:184)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:137)
	at scala.meta.internal.pc.CompilerAccess.$anonfun$withInterruptableCompiler$1(CompilerAccess.scala:87)
	at scala.meta.internal.pc.CompilerAccess.$anonfun$onCompilerJobQueue$1(CompilerAccess.scala:197)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:103)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)

Nov 11, 2020 7:35:55 PM scala.meta.internal.pc.completions.Completions completionPosition
SEVERE: null
java.lang.NullPointerException
	at scala.meta.internal.pc.completions.OverrideCompletions$OverrideCompletion.<init>(OverrideCompletions.scala:46)
	at scala.meta.internal.pc.completions.Completions.completionPositionUnsafe(Completions.scala:500)
	at scala.meta.internal.pc.completions.Completions.completionPositionUnsafe$(Completions.scala:409)
	at scala.meta.internal.pc.MetalsGlobal.completionPositionUnsafe(MetalsGlobal.scala:29)
	at scala.meta.internal.pc.completions.Completions.completionPosition(Completions.scala:401)
	at scala.meta.internal.pc.completions.Completions.completionPosition$(Completions.scala:386)
	at scala.meta.internal.pc.MetalsGlobal.completionPosition(MetalsGlobal.scala:29)
	at scala.meta.internal.pc.CompletionProvider.safeCompletionsAt(CompletionProvider.scala:446)
	at scala.meta.internal.pc.CompletionProvider.completions(CompletionProvider.scala:57)
	at scala.meta.internal.pc.ScalaPresentationCompiler.$anonfun$complete$1(ScalaPresentationCompiler.scala:184)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:137)
	at scala.meta.internal.pc.CompilerAccess.$anonfun$withInterruptableCompiler$1(CompilerAccess.scala:87)
	at scala.meta.internal.pc.CompilerAccess.$anonfun$onCompilerJobQueue$1(CompilerAccess.scala:197)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:103)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)

Nov 11, 2020 7:35:55 PM scala.meta.internal.pc.completions.Completions completionPosition
SEVERE: null
java.lang.NullPointerException
	at scala.meta.internal.pc.completions.OverrideCompletions$OverrideCompletion.<init>(OverrideCompletions.scala:46)
	at scala.meta.internal.pc.completions.Completions.completionPositionUnsafe(Completions.scala:500)
	at scala.meta.internal.pc.completions.Completions.completionPositionUnsafe$(Completions.scala:409)
	at scala.meta.internal.pc.MetalsGlobal.completionPositionUnsafe(MetalsGlobal.scala:29)
	at scala.meta.internal.pc.completions.Completions.completionPosition(Completions.scala:401)
	at scala.meta.internal.pc.completions.Completions.completionPosition$(Completions.scala:386)
	at scala.meta.internal.pc.MetalsGlobal.completionPosition(MetalsGlobal.scala:29)
	at scala.meta.internal.pc.CompletionProvider.safeCompletionsAt(CompletionProvider.scala:446)
	at scala.meta.internal.pc.CompletionProvider.completions(CompletionProvider.scala:57)
	at scala.meta.internal.pc.ScalaPresentationCompiler.$anonfun$complete$1(ScalaPresentationCompiler.scala:184)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:137)
	at scala.meta.internal.pc.CompilerAccess.$anonfun$withInterruptableCompiler$1(CompilerAccess.scala:87)
	at scala.meta.internal.pc.CompilerAccess.$anonfun$onCompilerJobQueue$1(CompilerAccess.scala:197)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:103)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)

Nov 11, 2020 7:35:55 PM scala.meta.internal.pc.completions.Completions completionPosition
SEVERE: null
java.lang.NullPointerException
	at scala.meta.internal.pc.completions.OverrideCompletions$OverrideCompletion.<init>(OverrideCompletions.scala:46)
	at scala.meta.internal.pc.completions.Completions.completionPositionUnsafe(Completions.scala:500)
	at scala.meta.internal.pc.completions.Completions.completionPositionUnsafe$(Completions.scala:409)
	at scala.meta.internal.pc.MetalsGlobal.completionPositionUnsafe(MetalsGlobal.scala:29)
	at scala.meta.internal.pc.completions.Completions.completionPosition(Completions.scala:401)
	at scala.meta.internal.pc.completions.Completions.completionPosition$(Completions.scala:386)
	at scala.meta.internal.pc.MetalsGlobal.completionPosition(MetalsGlobal.scala:29)
	at scala.meta.internal.pc.CompletionProvider.safeCompletionsAt(CompletionProvider.scala:446)
	at scala.meta.internal.pc.CompletionProvider.completions(CompletionProvider.scala:57)
	at scala.meta.internal.pc.ScalaPresentationCompiler.$anonfun$complete$1(ScalaPresentationCompiler.scala:184)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:137)
	at scala.meta.internal.pc.CompilerAccess.$anonfun$withInterruptableCompiler$1(CompilerAccess.scala:87)
	at scala.meta.internal.pc.CompilerAccess.$anonfun$onCompilerJobQueue$1(CompilerAccess.scala:197)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:103)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)

2020.11.11 19:35:57 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:35:57 INFO  time: compiled task1-scala in 48ms
2020.11.11 19:35:59 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:35:59 INFO  time: compiled task1-scala in 49ms
2020.11.11 19:36:01 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:36:01 INFO  time: compiled task1-scala in 48ms
2020.11.11 19:36:03 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:36:03 INFO  time: compiled task1-scala in 50ms
2020.11.11 19:36:05 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:36:05 INFO  time: compiled task1-scala in 64ms
2020.11.11 19:36:13 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:36:13 INFO  time: compiled task1-scala in 60ms
2020.11.11 19:36:15 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:36:15 INFO  time: compiled task1-scala in 54ms
2020.11.11 19:36:24 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:36:24 INFO  time: compiled task1-scala in 56ms
something's wrong: no file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala in () => UnitRangePosition(file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala, 89, 92, 99)
2020.11.11 19:37:39 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:37:39 INFO  time: compiled task1-scala in 53ms
Nov 11, 2020 7:38:53 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Nov 11, 2020 7:38:53 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:419)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:136)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:109)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:98)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:963)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:811)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

2020.11.11 19:39:03 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:39:03 INFO  time: compiled task1-scala in 58ms
2020.11.11 19:39:20 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:39:20 INFO  time: compiled task1-scala in 54ms
2020.11.11 19:39:29 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:39:29 INFO  time: compiled task1-scala in 57ms
2020.11.11 19:39:46 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:39:46 INFO  time: compiled task1-scala in 65ms
2020.11.11 19:39:53 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:39:53 INFO  time: compiled task1-scala in 51ms
2020.11.11 19:40:57 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:40:57 INFO  time: compiled task1-scala in 52ms
2020.11.11 19:41:19 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:41:19 INFO  time: compiled task1-scala in 55ms
2020.11.11 19:41:24 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:41:24 INFO  time: compiled task1-scala in 55ms
2020.11.11 19:41:45 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:41:45 INFO  time: compiled task1-scala in 63ms
2020.11.11 19:42:04 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:42:04 INFO  time: compiled task1-scala in 60ms
2020.11.11 19:42:08 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:42:08 INFO  time: compiled task1-scala in 55ms
2020.11.11 19:42:13 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:42:13 INFO  time: compiled task1-scala in 49ms
2020.11.11 19:42:20 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:42:20 INFO  time: compiled task1-scala in 49ms
Nov 11, 2020 7:42:22 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Array.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\npackage scala\n\nimport scala.collection.generic._\nimport scala.collection.{ mutable, immutable }\nimport mutable.{ ArrayBuilder, ArraySeq }\nimport scala.reflect.ClassTag\nimport scala.runtime.ScalaRunTime.{ array_apply, array_update }\n\n/** Contains a fallback builder for arrays when the element type\n *  does not have a class tag. In that case a generic array is built.\n */\nclass FallbackArrayBuilding {\n\n  /** A builder factory that generates a generic array.\n   *  Called instead of `Array.newBuilder` if the element type of an array\n   *  does not have a class tag. Note that fallbackBuilder factory\n   *  needs an implicit parameter (otherwise it would not be dominated in\n   *  implicit search by `Array.canBuildFrom`). We make sure that\n   *  implicit search is always successful.\n   */\n  implicit def fallbackCanBuildFrom[T](implicit m: DummyImplicit): CanBuildFrom[Array[_], T, ArraySeq[T]] \u003d\n    new CanBuildFrom[Array[_], T, ArraySeq[T]] {\n      def apply(from: Array[_]) \u003d ArraySeq.newBuilder[T]\n      def apply() \u003d ArraySeq.newBuilder[T]\n    }\n}\n\n/** Utility methods for operating on arrays.\n *  For example:\n *  {{{\n *  val a \u003d Array(1, 2)\n *  val b \u003d Array.ofDim[Int](2)\n *  val c \u003d Array.concat(a, b)\n *  }}}\n *  where the array objects `a`, `b` and `c` have respectively the values\n *  `Array(1, 2)`, `Array(0, 0)` and `Array(1, 2, 0, 0)`.\n *\n *  @author Martin Odersky\n *  @since  1.0\n */\nobject Array extends FallbackArrayBuilding {\n  val emptyBooleanArray \u003d new Array[Boolean](0)\n  val emptyByteArray    \u003d new Array[Byte](0)\n  val emptyCharArray    \u003d new Array[Char](0)\n  val emptyDoubleArray  \u003d new Array[Double](0)\n  val emptyFloatArray   \u003d new Array[Float](0)\n  val emptyIntArray     \u003d new Array[Int](0)\n  val emptyLongArray    \u003d new Array[Long](0)\n  val emptyShortArray   \u003d new Array[Short](0)\n  val emptyObjectArray  \u003d new Array[Object](0)\n\n  implicit def canBuildFrom[T](implicit tag: ClassTag[T]): CanBuildFrom[Array[_], T, Array[T]] \u003d {\n    val cls \u003d tag.runtimeClass\n    (if (cls.isPrimitive) {\n      cls match {\n        case java.lang.Integer.TYPE   \u003d\u003e cbfIntArray\n        case java.lang.Double.TYPE    \u003d\u003e cbfDoubleArray\n        case java.lang.Long.TYPE      \u003d\u003e cbfLongArray\n        case java.lang.Float.TYPE     \u003d\u003e cbfFloatArray\n        case java.lang.Character.TYPE \u003d\u003e cbfCharArray\n        case java.lang.Byte.TYPE      \u003d\u003e cbfByteArray\n        case java.lang.Short.TYPE     \u003d\u003e cbfShortArray\n        case java.lang.Boolean.TYPE   \u003d\u003e cbfBooleanArray\n        case java.lang.Void.TYPE      \u003d\u003e cbfUnitArray\n      }\n    } else if (cls \u003d\u003d ObjectClass) {\n      cbfObjectArray\n    } else {\n      refCBF[T with AnyRef](tag.asInstanceOf[ClassTag[T with AnyRef]])\n    }).asInstanceOf[CanBuildFrom[Array[_], T, Array[T]]]\n  }\n  private[this] val ObjectClass \u003d classOf[Object]\n\n  private[this] val cbfBooleanArray \u003d new CanBuildFrom[Array[_], Boolean, Array[Boolean]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofBoolean()\n    def apply() \u003d new ArrayBuilder.ofBoolean()\n  }\n\n  private[this] val cbfByteArray    \u003d new CanBuildFrom[Array[_], Byte, Array[Byte]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofByte()\n    def apply() \u003d new ArrayBuilder.ofByte()\n  }\n\n  private[this] val cbfCharArray    \u003d new CanBuildFrom[Array[_], Char, Array[Char]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofChar()\n    def apply() \u003d new ArrayBuilder.ofChar()\n  }\n\n  private[this] val cbfDoubleArray  \u003d new CanBuildFrom[Array[_], Double, Array[Double]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofDouble()\n    def apply() \u003d new ArrayBuilder.ofDouble()\n  }\n\n  private[this] val cbfFloatArray   \u003d new CanBuildFrom[Array[_], Float, Array[Float]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofFloat()\n    def apply() \u003d new ArrayBuilder.ofFloat()\n  }\n\n  private[this] val cbfIntArray     \u003d new CanBuildFrom[Array[_], Int, Array[Int]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofInt()\n    def apply() \u003d new ArrayBuilder.ofInt()\n  }\n\n  private[this] val cbfLongArray    \u003d new CanBuildFrom[Array[_], Long, Array[Long]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofLong()\n    def apply() \u003d new ArrayBuilder.ofLong()\n  }\n\n  private[this] val cbfShortArray   \u003d new CanBuildFrom[Array[_], Short, Array[Short]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofShort()\n    def apply() \u003d new ArrayBuilder.ofShort()\n  }\n\n  private[this] val cbfUnitArray    \u003d new CanBuildFrom[Array[_], Unit, Array[Unit]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofUnit()\n    def apply() \u003d new ArrayBuilder.ofUnit()\n  }\n\n  private[this] val cbfObjectArray  \u003d refCBF[Object]\n  private[this] def refCBF[T \u003c: AnyRef](implicit t: ClassTag[T]): CanBuildFrom[Array[_], T, Array[T]] \u003d\n    new CanBuildFrom[Array[_], T, Array[T]] {\n      def apply(from: Array[_]) \u003d new ArrayBuilder.ofRef[T]()(t)\n      def apply() \u003d new ArrayBuilder.ofRef[T]()(t)\n    }\n\n  /**\n   * Returns a new [[scala.collection.mutable.ArrayBuilder]].\n   */\n  def newBuilder[T](implicit t: ClassTag[T]): ArrayBuilder[T] \u003d ArrayBuilder.make[T]()(t)\n\n  private def slowcopy(src : AnyRef,\n                       srcPos : Int,\n                       dest : AnyRef,\n                       destPos : Int,\n                       length : Int) {\n    var i \u003d srcPos\n    var j \u003d destPos\n    val srcUntil \u003d srcPos + length\n    while (i \u003c srcUntil) {\n      array_update(dest, j, array_apply(src, i))\n      i +\u003d 1\n      j +\u003d 1\n    }\n  }\n\n  /** Copy one array to another.\n   *  Equivalent to Java\u0027s\n   *    `System.arraycopy(src, srcPos, dest, destPos, length)`,\n   *  except that this also works for polymorphic and boxed arrays.\n   *\n   *  Note that the passed-in `dest` array will be modified by this call.\n   *\n   *  @param src the source array.\n   *  @param srcPos  starting position in the source array.\n   *  @param dest destination array.\n   *  @param destPos starting position in the destination array.\n   *  @param length the number of array elements to be copied.\n   *\n   *  @see `java.lang.System#arraycopy`\n   */\n  def copy(src: AnyRef, srcPos: Int, dest: AnyRef, destPos: Int, length: Int) {\n    val srcClass \u003d src.getClass\n    if (srcClass.isArray \u0026\u0026 dest.getClass.isAssignableFrom(srcClass))\n      java.lang.System.arraycopy(src, srcPos, dest, destPos, length)\n    else\n      slowcopy(src, srcPos, dest, destPos, length)\n  }\n\n  /** Returns an array of length 0 */\n  def empty[T: ClassTag]: Array[T] \u003d new Array[T](0)\n\n  /** Creates an array with given elements.\n   *\n   *  @param xs the elements to put in the array\n   *  @return an array containing all elements from xs.\n   */\n  // Subject to a compiler optimization in Cleanup.\n  // Array(e0, ..., en) is translated to { val a \u003d new Array(3); a(i) \u003d ei; a }\n  def apply[T: ClassTag](xs: T*): Array[T] \u003d {\n    val array \u003d new Array[T](xs.length)\n    var i \u003d 0\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Boolean` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Boolean, xs: Boolean*): Array[Boolean] \u003d {\n    val array \u003d new Array[Boolean](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Byte` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Byte, xs: Byte*): Array[Byte] \u003d {\n    val array \u003d new Array[Byte](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Short` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Short, xs: Short*): Array[Short] \u003d {\n    val array \u003d new Array[Short](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Char` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Char, xs: Char*): Array[Char] \u003d {\n    val array \u003d new Array[Char](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Int` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Int, xs: Int*): Array[Int] \u003d {\n    val array \u003d new Array[Int](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Long` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Long, xs: Long*): Array[Long] \u003d {\n    val array \u003d new Array[Long](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Float` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Float, xs: Float*): Array[Float] \u003d {\n    val array \u003d new Array[Float](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Double` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Double, xs: Double*): Array[Double] \u003d {\n    val array \u003d new Array[Double](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Unit` objects */\n  def apply(x: Unit, xs: Unit*): Array[Unit] \u003d {\n    val array \u003d new Array[Unit](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates array with given dimensions */\n  def ofDim[T: ClassTag](n1: Int): Array[T] \u003d\n    new Array[T](n1)\n  /** Creates a 2-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int): Array[Array[T]] \u003d {\n    val arr: Array[Array[T]] \u003d (new Array[Array[T]](n1): Array[Array[T]])\n    for (i \u003c- 0 until n1) arr(i) \u003d new Array[T](n2)\n    arr\n    // tabulate(n1)(_ \u003d\u003e ofDim[T](n2))\n  }\n  /** Creates a 3-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int): Array[Array[Array[T]]] \u003d\n    tabulate(n1)(_ \u003d\u003e ofDim[T](n2, n3))\n  /** Creates a 4-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int): Array[Array[Array[Array[T]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e ofDim[T](n2, n3, n4))\n  /** Creates a 5-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int): Array[Array[Array[Array[Array[T]]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e ofDim[T](n2, n3, n4, n5))\n\n  /** Concatenates all arrays into a single array.\n   *\n   *  @param xss the given arrays\n   *  @return   the array created from concatenating `xss`\n   */\n  def concat[T: ClassTag](xss: Array[T]*): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n    b.sizeHint(xss.map(_.length).sum)\n    for (xs \u003c- xss) b ++\u003d xs\n    b.result()\n  }\n\n  /** Returns an array that contains the results of some element computation a number\n   *  of times.\n   *\n   *  Note that this means that `elem` is computed a total of n times:\n   *  {{{\n   * scala\u003e Array.fill(3){ math.random }\n   * res3: Array[Double] \u003d Array(0.365461167592537, 1.550395944913685E-4, 0.7907242137333306)\n   *  }}}\n   *\n   *  @param   n  the number of elements desired\n   *  @param   elem the element computation\n   *  @return an Array of size n, where each element contains the result of computing\n   *  `elem`.\n   */\n  def fill[T: ClassTag](n: Int)(elem: \u003d\u003e T): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n    b.sizeHint(n)\n    var i \u003d 0\n    while (i \u003c n) {\n      b +\u003d elem\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  /** Returns a two-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int)(elem: \u003d\u003e T): Array[Array[T]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2)(elem))\n\n  /** Returns a three-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3nd dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int)(elem: \u003d\u003e T): Array[Array[Array[T]]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2, n3)(elem))\n\n  /** Returns a four-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3nd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int)(elem: \u003d\u003e T): Array[Array[Array[Array[T]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2, n3, n4)(elem))\n\n  /** Returns a five-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3nd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   n5  the number of elements in the 5th dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(elem: \u003d\u003e T): Array[Array[Array[Array[Array[T]]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2, n3, n4, n5)(elem))\n\n  /** Returns an array containing values of a given function over a range of integer\n   *  values starting from 0.\n   *\n   *  @param  n   The number of elements in the array\n   *  @param  f   The function computing element values\n   *  @return A traversable consisting of elements `f(0),f(1), ..., f(n - 1)`\n   */\n  def tabulate[T: ClassTag](n: Int)(f: Int \u003d\u003e T): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n    b.sizeHint(n)\n    var i \u003d 0\n    while (i \u003c n) {\n      b +\u003d f(i)\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  /** Returns a two-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int)(f: (Int, Int) \u003d\u003e T): Array[Array[T]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2)(f(i1, _)))\n\n  /** Returns a three-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3rd dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int)(f: (Int, Int, Int) \u003d\u003e T): Array[Array[Array[T]]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2, n3)(f(i1, _, _)))\n\n  /** Returns a four-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3rd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int)(f: (Int, Int, Int, Int) \u003d\u003e T): Array[Array[Array[Array[T]]]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2, n3, n4)(f(i1, _, _, _)))\n\n  /** Returns a five-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3rd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   n5  the number of elements in the 5th dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(f: (Int, Int, Int, Int, Int) \u003d\u003e T): Array[Array[Array[Array[Array[T]]]]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2, n3, n4, n5)(f(i1, _, _, _, _)))\n\n  /** Returns an array containing a sequence of increasing integers in a range.\n   *\n   *  @param start  the start value of the array\n   *  @param end    the end value of the array, exclusive (in other words, this is the first value \u0027\u0027\u0027not\u0027\u0027\u0027 returned)\n   *  @return  the array with values in range `start, start + 1, ..., end - 1`\n   *  up to, but excluding, `end`.\n   */\n  def range(start: Int, end: Int): Array[Int] \u003d range(start, end, 1)\n\n  /** Returns an array containing equally spaced values in some integer interval.\n   *\n   *  @param start the start value of the array\n   *  @param end   the end value of the array, exclusive (in other words, this is the first value \u0027\u0027\u0027not\u0027\u0027\u0027 returned)\n   *  @param step  the increment value of the array (may not be zero)\n   *  @return      the array with values in `start, start + step, ...` up to, but excluding `end`\n   */\n  def range(start: Int, end: Int, step: Int): Array[Int] \u003d {\n    if (step \u003d\u003d 0) throw new IllegalArgumentException(\"zero step\")\n    val b \u003d newBuilder[Int]\n    b.sizeHint(immutable.Range.count(start, end, step, isInclusive \u003d false))\n\n    var i \u003d start\n    while (if (step \u003c 0) end \u003c i else i \u003c end) {\n      b +\u003d i\n      i +\u003d step\n    }\n    b.result()\n  }\n\n  /** Returns an array containing repeated applications of a function to a start value.\n   *\n   *  @param start the start value of the array\n   *  @param len   the number of elements returned by the array\n   *  @param f     the function that is repeatedly applied\n   *  @return      the array returning `len` values in the sequence `start, f(start), f(f(start)), ...`\n   */\n  def iterate[T: ClassTag](start: T, len: Int)(f: T \u003d\u003e T): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n\n    if (len \u003e 0) {\n      b.sizeHint(len)\n      var acc \u003d start\n      var i \u003d 1\n      b +\u003d acc\n\n      while (i \u003c len) {\n        acc \u003d f(acc)\n        i +\u003d 1\n        b +\u003d acc\n      }\n    }\n    b.result()\n  }\n\n  /** Called in a pattern match like `{ case Array(x,y,z) \u003d\u003e println(\u00273 elements\u0027)}`.\n   *\n   *  @param x the selector value\n   *  @return  sequence wrapped in a [[scala.Some]], if `x` is a Seq, otherwise `None`\n   */\n  def unapplySeq[T](x: Array[T]): Option[IndexedSeq[T]] \u003d\n    if (x \u003d\u003d null) None else Some(x.toIndexedSeq)\n    // !!! the null check should to be necessary, but without it 2241 fails. Seems to be a bug\n    // in pattern matcher.  @PP: I noted in #4364 I think the behavior is correct.\n}\n\n/** Arrays are mutable, indexed collections of values. `Array[T]` is Scala\u0027s representation\n *  for Java\u0027s `T[]`.\n *\n *  {{{\n *  val numbers \u003d Array(1, 2, 3, 4)\n *  val first \u003d numbers(0) // read the first element\n *  numbers(3) \u003d 100 // replace the 4th array element with 100\n *  val biggerNumbers \u003d numbers.map(_ * 2) // multiply all numbers by two\n *  }}}\n *\n *  Arrays make use of two common pieces of Scala syntactic sugar, shown on lines 2 and 3 of the above\n *  example code.\n *  Line 2 is translated into a call to `apply(Int)`, while line 3 is translated into a call to\n *  `update(Int, T)`.\n *\n *  Two implicit conversions exist in [[scala.Predef]] that are frequently applied to arrays: a conversion\n *  to [[scala.collection.mutable.ArrayOps]] (shown on line 4 of the example above) and a conversion\n *  to [[scala.collection.mutable.WrappedArray]] (a subtype of [[scala.collection.Seq]]).\n *  Both types make available many of the standard operations found in the Scala collections API.\n *  The conversion to `ArrayOps` is temporary, as all operations defined on `ArrayOps` return an `Array`,\n *  while the conversion to `WrappedArray` is permanent as all operations return a `WrappedArray`.\n *\n *  The conversion to `ArrayOps` takes priority over the conversion to `WrappedArray`. For instance,\n *  consider the following code:\n *\n *  {{{\n *  val arr \u003d Array(1, 2, 3)\n *  val arrReversed \u003d arr.reverse\n *  val seqReversed : Seq[Int] \u003d arr.reverse\n *  }}}\n *\n *  Value `arrReversed` will be of type `Array[Int]`, with an implicit conversion to `ArrayOps` occurring\n *  to perform the `reverse` operation. The value of `seqReversed`, on the other hand, will be computed\n *  by converting to `WrappedArray` first and invoking the variant of `reverse` that returns another\n *  `WrappedArray`.\n *\n *  @author Martin Odersky\n *  @since  1.0\n *  @see [[http://www.scala-lang.org/files/archive/spec/2.12/ Scala Language Specification]], for in-depth information on the transformations the Scala compiler makes on Arrays (Sections 6.6 and 6.15 respectively.)\n *  @see [[http://docs.scala-lang.org/sips/completed/scala-2-8-arrays.html \"Scala 2.8 Arrays\"]] the Scala Improvement Document detailing arrays since Scala 2.8.\n *  @see [[http://docs.scala-lang.org/overviews/collections/arrays.html \"The Scala 2.8 Collections\u0027 API\"]] section on `Array` by Martin Odersky for more information.\n *  @hideImplicitConversion scala.Predef.booleanArrayOps\n *  @hideImplicitConversion scala.Predef.byteArrayOps\n *  @hideImplicitConversion scala.Predef.charArrayOps\n *  @hideImplicitConversion scala.Predef.doubleArrayOps\n *  @hideImplicitConversion scala.Predef.floatArrayOps\n *  @hideImplicitConversion scala.Predef.intArrayOps\n *  @hideImplicitConversion scala.Predef.longArrayOps\n *  @hideImplicitConversion scala.Predef.refArrayOps\n *  @hideImplicitConversion scala.Predef.shortArrayOps\n *  @hideImplicitConversion scala.Predef.unitArrayOps\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapRefArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapIntArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapDoubleArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapLongArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapFloatArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapCharArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapByteArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapShortArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapBooleanArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapUnitArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.genericWrapArray\n *  @define coll array\n *  @define Coll `Array`\n *  @define orderDependent\n *  @define orderDependentFold\n *  @define mayNotTerminateInf\n *  @define willNotTerminateInf\n *  @define collectExample\n *  @define undefinedorder\n *  @define thatinfo the class of the returned collection. In the standard library configuration,\n *    `That` is either `Array[B]` if an ClassTag is available for B or `ArraySeq[B]` otherwise.\n *  @define zipthatinfo $thatinfo\n *  @define bfinfo an implicit value of class `CanBuildFrom` which determines the result class `That` from the current\n *    representation type `Repr` and the new element type `B`.\n */\nfinal class Array[T](_length: Int) extends java.io.Serializable with java.lang.Cloneable {\n\n  /** The length of the array */\n  def length: Int \u003d throw new Error()\n\n  /** The element at given index.\n   *\n   *  Indices start at `0`; `xs.apply(0)` is the first element of array `xs`.\n   *  Note the indexing syntax `xs(i)` is a shorthand for `xs.apply(i)`.\n   *\n   *  @param    i   the index\n   *  @return       the element at the given index\n   *  @throws       ArrayIndexOutOfBoundsException if `i \u003c 0` or `length \u003c\u003d i`\n   */\n  def apply(i: Int): T \u003d throw new Error()\n\n  /** Update the element at given index.\n   *\n   *  Indices start at `0`; `xs.update(i, x)` replaces the i^th^ element in the array.\n   *  Note the syntax `xs(i) \u003d x` is a shorthand for `xs.update(i, x)`.\n   *\n   *  @param    i   the index\n   *  @param    x   the value to be written at index `i`\n   *  @throws       ArrayIndexOutOfBoundsException if `i \u003c 0` or `length \u003c\u003d i`\n   */\n  def update(i: Int, x: T) { throw new Error() }\n\n  /** Clone the Array.\n   *\n   *  @return A clone of the Array.\n   */\n  override def clone(): Array[T] \u003d throw new Error()\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor25.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Predef.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 15 more

2020.11.11 19:42:22 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:42:22 INFO  time: compiled task1-scala in 48ms
2020.11.11 19:42:58 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:42:58 INFO  time: compiled task1-scala in 55ms
2020.11.11 19:43:00 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:43:00 INFO  time: compiled task1-scala in 57ms
2020.11.11 19:43:18 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:43:18 INFO  time: compiled task1-scala in 53ms
2020.11.11 19:43:20 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:43:20 INFO  time: compiled task1-scala in 51ms
something's wrong: no file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala in () => UnitRangePosition(file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala, 136, 139, 146)
Nov 11, 2020 7:43:53 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3141
2020.11.11 19:43:58 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:43:58 INFO  time: compiled task1-scala in 58ms
2020.11.11 19:44:13 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:44:13 INFO  time: compiled task1-scala in 59ms
2020.11.11 19:44:23 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:44:23 INFO  time: compiled task1-scala in 58ms
2020.11.11 19:44:35 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:44:35 INFO  time: compiled task1-scala in 60ms
2020.11.11 19:44:38 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:44:38 INFO  time: compiled task1-scala in 57ms
2020.11.11 19:44:50 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:44:50 INFO  time: compiled task1-scala in 54ms
2020.11.11 19:45:23 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:45:23 INFO  time: compiled task1-scala in 63ms
Nov 11, 2020 7:46:02 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Predef.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 15 more

Nov 11, 2020 7:46:02 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Predef.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 15 more

Nov 11, 2020 7:46:05 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Predef.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 15 more

Nov 11, 2020 7:46:05 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Predef.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 15 more

Nov 11, 2020 7:46:12 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 198,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "\r\n  def main(args: Array[String]) \r\n    {\r\n        println(Threading(GenerateArray(10)));\r\n    }\r\n\r\n    def Threading[F](fun: \u003d\u003e F) \u003d \r\n    {\r\n        new Thread(new Runnable () { def run() {fun}})\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor13.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Predef.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

Nov 11, 2020 7:46:12 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: -1 is not a valid offset, allowed [0..378]
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: -1 is not a valid offset, allowed [0..378]
	at java.util.concurrent.CompletableFuture.encodeThrowable(Unknown Source)
	at java.util.concurrent.CompletableFuture.completeThrowable(Unknown Source)
	at java.util.concurrent.CompletableFuture.uniAccept(Unknown Source)
	at java.util.concurrent.CompletableFuture$UniAccept.tryFire(Unknown Source)
	at java.util.concurrent.CompletableFuture.postComplete(Unknown Source)
	at java.util.concurrent.CompletableFuture.completeExceptionally(Unknown Source)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.IllegalArgumentException: -1 is not a valid offset, allowed [0..378]
	at scala.meta.internal.inputs.InternalInput.offsetToLine(InternalInput.scala:49)
	at scala.meta.internal.inputs.InternalInput.offsetToLine$(InternalInput.scala:43)
	at scala.meta.inputs.Input$VirtualFile.offsetToLine(Input.scala:80)
	at scala.meta.inputs.Position$Range.startLine(Position.scala:37)
	at scala.meta.internal.mtags.CommonMtagsEnrichments$XtensionMetaPosition.toLSP(CommonMtagsEnrichments.scala:74)
	at scala.meta.internal.metals.TokenEditDistance.toRevised(TokenEditDistance.scala:136)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.$anonfun$codeLenses$11(RunTestCodeLens.scala:89)
	at scala.Option.flatMap(Option.scala:271)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.$anonfun$codeLenses$10(RunTestCodeLens.scala:89)
	at scala.collection.TraversableLike$WithFilter.$anonfun$flatMap$2(TraversableLike.scala:905)
	at scala.collection.Iterator.foreach(Iterator.scala:943)
	at scala.collection.Iterator.foreach$(Iterator.scala:943)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1431)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at scala.collection.TraversableLike$WithFilter.flatMap(TraversableLike.scala:904)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.codeLenses(RunTestCodeLens.scala:72)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.$anonfun$codeLenses$1(RunTestCodeLens.scala:58)
	at scala.Option.map(Option.scala:230)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.codeLenses(RunTestCodeLens.scala:56)
	at scala.meta.internal.metals.CodeLensProvider.$anonfun$findLenses$3(CodeLensProvider.scala:25)
	at scala.collection.immutable.List.flatMap(List.scala:366)
	at scala.meta.internal.metals.CodeLensProvider.$anonfun$findLenses$1(CodeLensProvider.scala:25)
	at scala.Option.map(Option.scala:230)
	at scala.meta.internal.metals.CodeLensProvider.findLenses(CodeLensProvider.scala:23)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeLens$2(MetalsLanguageServer.scala:1380)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeLens$1(MetalsLanguageServer.scala:1378)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$apply$2(CancelTokens.scala:26)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	... 4 more

Nov 11, 2020 7:46:13 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 199,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "\r\n  def main(args: Array[String]) \r\n    {\r\n        println(Threading(GenerateArray(10)));\r\n    }\r\n\r\n    def Threading[F](fun: \u003d\u003e F) \u003d \r\n    {\r\n        new Thread(new Runnable () { def run() {fun}})\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor13.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Predef.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

Nov 11, 2020 7:46:13 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: -1 is not a valid offset, allowed [0..377]
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: -1 is not a valid offset, allowed [0..377]
	at java.util.concurrent.CompletableFuture.encodeThrowable(Unknown Source)
	at java.util.concurrent.CompletableFuture.completeThrowable(Unknown Source)
	at java.util.concurrent.CompletableFuture.uniAccept(Unknown Source)
	at java.util.concurrent.CompletableFuture$UniAccept.tryFire(Unknown Source)
	at java.util.concurrent.CompletableFuture.postComplete(Unknown Source)
	at java.util.concurrent.CompletableFuture.completeExceptionally(Unknown Source)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.IllegalArgumentException: -1 is not a valid offset, allowed [0..377]
	at scala.meta.internal.inputs.InternalInput.offsetToLine(InternalInput.scala:49)
	at scala.meta.internal.inputs.InternalInput.offsetToLine$(InternalInput.scala:43)
	at scala.meta.inputs.Input$VirtualFile.offsetToLine(Input.scala:80)
	at scala.meta.inputs.Position$Range.startLine(Position.scala:37)
	at scala.meta.internal.mtags.CommonMtagsEnrichments$XtensionMetaPosition.toLSP(CommonMtagsEnrichments.scala:74)
	at scala.meta.internal.metals.TokenEditDistance.toRevised(TokenEditDistance.scala:136)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.$anonfun$codeLenses$11(RunTestCodeLens.scala:89)
	at scala.Option.flatMap(Option.scala:271)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.$anonfun$codeLenses$10(RunTestCodeLens.scala:89)
	at scala.collection.TraversableLike$WithFilter.$anonfun$flatMap$2(TraversableLike.scala:905)
	at scala.collection.Iterator.foreach(Iterator.scala:943)
	at scala.collection.Iterator.foreach$(Iterator.scala:943)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1431)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at scala.collection.TraversableLike$WithFilter.flatMap(TraversableLike.scala:904)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.codeLenses(RunTestCodeLens.scala:72)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.$anonfun$codeLenses$1(RunTestCodeLens.scala:58)
	at scala.Option.map(Option.scala:230)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.codeLenses(RunTestCodeLens.scala:56)
	at scala.meta.internal.metals.CodeLensProvider.$anonfun$findLenses$3(CodeLensProvider.scala:25)
	at scala.collection.immutable.List.flatMap(List.scala:366)
	at scala.meta.internal.metals.CodeLensProvider.$anonfun$findLenses$1(CodeLensProvider.scala:25)
	at scala.Option.map(Option.scala:230)
	at scala.meta.internal.metals.CodeLensProvider.findLenses(CodeLensProvider.scala:23)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeLens$2(MetalsLanguageServer.scala:1380)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeLens$1(MetalsLanguageServer.scala:1378)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$apply$2(CancelTokens.scala:26)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	... 4 more

2020.11.11 19:46:14 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:46:14 INFO  time: compiled task1-scala in 57ms
Nov 11, 2020 7:46:17 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: -1 is not a valid offset, allowed [0..377]
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: -1 is not a valid offset, allowed [0..377]
	at java.util.concurrent.CompletableFuture.encodeThrowable(Unknown Source)
	at java.util.concurrent.CompletableFuture.completeThrowable(Unknown Source)
	at java.util.concurrent.CompletableFuture.uniAccept(Unknown Source)
	at java.util.concurrent.CompletableFuture$UniAccept.tryFire(Unknown Source)
	at java.util.concurrent.CompletableFuture.postComplete(Unknown Source)
	at java.util.concurrent.CompletableFuture.completeExceptionally(Unknown Source)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.IllegalArgumentException: -1 is not a valid offset, allowed [0..377]
	at scala.meta.internal.inputs.InternalInput.offsetToLine(InternalInput.scala:49)
	at scala.meta.internal.inputs.InternalInput.offsetToLine$(InternalInput.scala:43)
	at scala.meta.inputs.Input$VirtualFile.offsetToLine(Input.scala:80)
	at scala.meta.inputs.Position$Range.startLine(Position.scala:37)
	at scala.meta.internal.mtags.CommonMtagsEnrichments$XtensionMetaPosition.toLSP(CommonMtagsEnrichments.scala:74)
	at scala.meta.internal.metals.TokenEditDistance.toRevised(TokenEditDistance.scala:136)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.$anonfun$codeLenses$11(RunTestCodeLens.scala:89)
	at scala.Option.flatMap(Option.scala:271)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.$anonfun$codeLenses$10(RunTestCodeLens.scala:89)
	at scala.collection.TraversableLike$WithFilter.$anonfun$flatMap$2(TraversableLike.scala:905)
	at scala.collection.Iterator.foreach(Iterator.scala:943)
	at scala.collection.Iterator.foreach$(Iterator.scala:943)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1431)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at scala.collection.TraversableLike$WithFilter.flatMap(TraversableLike.scala:904)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.codeLenses(RunTestCodeLens.scala:72)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.$anonfun$codeLenses$1(RunTestCodeLens.scala:58)
	at scala.Option.map(Option.scala:230)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.codeLenses(RunTestCodeLens.scala:56)
	at scala.meta.internal.metals.CodeLensProvider.$anonfun$findLenses$3(CodeLensProvider.scala:25)
	at scala.collection.immutable.List.flatMap(List.scala:366)
	at scala.meta.internal.metals.CodeLensProvider.$anonfun$findLenses$1(CodeLensProvider.scala:25)
	at scala.Option.map(Option.scala:230)
	at scala.meta.internal.metals.CodeLensProvider.findLenses(CodeLensProvider.scala:23)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeLens$2(MetalsLanguageServer.scala:1380)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeLens$1(MetalsLanguageServer.scala:1378)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$apply$2(CancelTokens.scala:26)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	... 4 more

Nov 11, 2020 7:46:18 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 200,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "\r\n  def main(args: Array[String]) \r\n    {\r\n        println(Threading(GenerateArray(10)));\r\n    }\r\n\r\n    def Threading[F](fun: \u003d\u003e F) \u003d \r\n    {\r\n        new Thread(new Runnable () { def run() {fun}})\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor13.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Predef.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

Nov 11, 2020 7:46:18 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: -1 is not a valid offset, allowed [0..378]
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: -1 is not a valid offset, allowed [0..378]
	at java.util.concurrent.CompletableFuture.encodeThrowable(Unknown Source)
	at java.util.concurrent.CompletableFuture.completeThrowable(Unknown Source)
	at java.util.concurrent.CompletableFuture.uniAccept(Unknown Source)
	at java.util.concurrent.CompletableFuture$UniAccept.tryFire(Unknown Source)
	at java.util.concurrent.CompletableFuture.postComplete(Unknown Source)
	at java.util.concurrent.CompletableFuture.completeExceptionally(Unknown Source)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.IllegalArgumentException: -1 is not a valid offset, allowed [0..378]
	at scala.meta.internal.inputs.InternalInput.offsetToLine(InternalInput.scala:49)
	at scala.meta.internal.inputs.InternalInput.offsetToLine$(InternalInput.scala:43)
	at scala.meta.inputs.Input$VirtualFile.offsetToLine(Input.scala:80)
	at scala.meta.inputs.Position$Range.startLine(Position.scala:37)
	at scala.meta.internal.mtags.CommonMtagsEnrichments$XtensionMetaPosition.toLSP(CommonMtagsEnrichments.scala:74)
	at scala.meta.internal.metals.TokenEditDistance.toRevised(TokenEditDistance.scala:136)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.$anonfun$codeLenses$11(RunTestCodeLens.scala:89)
	at scala.Option.flatMap(Option.scala:271)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.$anonfun$codeLenses$10(RunTestCodeLens.scala:89)
	at scala.collection.TraversableLike$WithFilter.$anonfun$flatMap$2(TraversableLike.scala:905)
	at scala.collection.Iterator.foreach(Iterator.scala:943)
	at scala.collection.Iterator.foreach$(Iterator.scala:943)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1431)
	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
	at scala.collection.TraversableLike$WithFilter.flatMap(TraversableLike.scala:904)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.codeLenses(RunTestCodeLens.scala:72)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.$anonfun$codeLenses$1(RunTestCodeLens.scala:58)
	at scala.Option.map(Option.scala:230)
	at scala.meta.internal.metals.codelenses.RunTestCodeLens.codeLenses(RunTestCodeLens.scala:56)
	at scala.meta.internal.metals.CodeLensProvider.$anonfun$findLenses$3(CodeLensProvider.scala:25)
	at scala.collection.immutable.List.flatMap(List.scala:366)
	at scala.meta.internal.metals.CodeLensProvider.$anonfun$findLenses$1(CodeLensProvider.scala:25)
	at scala.Option.map(Option.scala:230)
	at scala.meta.internal.metals.CodeLensProvider.findLenses(CodeLensProvider.scala:23)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeLens$2(MetalsLanguageServer.scala:1380)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeLens$1(MetalsLanguageServer.scala:1378)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$apply$2(CancelTokens.scala:26)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	... 4 more

Nov 11, 2020 7:46:18 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 201,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "object Main {\r\n  def main(args: Array[String]) \r\n    {\r\n        println(Threading(GenerateArray(10)));\r\n    }\r\n\r\n    def Threading[F](fun: \u003d\u003e F) \u003d \r\n    {\r\n        new Thread(new Runnable () { def run() {fun}})\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor13.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Predef.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

Nov 11, 2020 7:46:19 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Predef.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\npackage scala\n\nimport scala.language.implicitConversions\n\nimport scala.collection.{ mutable, immutable, generic }\nimport immutable.StringOps\nimport mutable.ArrayOps\nimport generic.CanBuildFrom\nimport scala.annotation.{ elidable, implicitNotFound }\nimport scala.annotation.elidable.ASSERTION\nimport scala.io.StdIn\n\n/** The `Predef` object provides definitions that are accessible in all Scala\n *  compilation units without explicit qualification.\n *\n *  \u003d\u003d\u003d Commonly Used Types \u003d\u003d\u003d\n *  Predef provides type aliases for types which are commonly used, such as\n *  the immutable collection types [[scala.collection.immutable.Map]],\n *  [[scala.collection.immutable.Set]], and the [[scala.collection.immutable.List]]\n *  constructors ([[scala.collection.immutable.::]] and\n *  [[scala.collection.immutable.Nil]]).\n *\n *  \u003d\u003d\u003d Console Output \u003d\u003d\u003d\n *  For basic console output, `Predef` provides convenience methods [[print(x:Any* print]] and [[println(x:Any* println]],\n *  which are aliases of the methods in the object [[scala.Console]].\n *\n *  \u003d\u003d\u003d Assertions \u003d\u003d\u003d\n *  A set of `assert` functions are provided for use as a way to document\n *  and dynamically check invariants in code. Invocations of `assert` can be elided\n *  at compile time by providing the command line option `-Xdisable-assertions`,\n *  which raises `-Xelide-below` above `elidable.ASSERTION`, to the `scalac` command.\n *\n *  Variants of `assert` intended for use with static analysis tools are also\n *  provided: `assume`, `require` and `ensuring`. `require` and `ensuring` are\n *  intended for use as a means of design-by-contract style specification\n *  of pre- and post-conditions on functions, with the intention that these\n *  specifications could be consumed by a static analysis tool. For instance,\n *\n *  {{{\n *  def addNaturals(nats: List[Int]): Int \u003d {\n *    require(nats forall (_ \u003e\u003d 0), \"List contains negative numbers\")\n *    nats.foldLeft(0)(_ + _)\n *  } ensuring(_ \u003e\u003d 0)\n *  }}}\n *\n *  The declaration of `addNaturals` states that the list of integers passed should\n *  only contain natural numbers (i.e. non-negative), and that the result returned\n *  will also be natural. `require` is distinct from `assert` in that if the\n *  condition fails, then the caller of the function is to blame rather than a\n *  logical error having been made within `addNaturals` itself. `ensuring` is a\n *  form of `assert` that declares the guarantee the function is providing with\n *  regards to its return value.\n *\n *  \u003d\u003d\u003d Implicit Conversions \u003d\u003d\u003d\n *  A number of commonly applied implicit conversions are also defined here, and\n *  in the parent type [[scala.LowPriorityImplicits]]. Implicit conversions\n *  are provided for the \"widening\" of numeric values, for instance, converting a\n *  Short value to a Long value as required, and to add additional higher-order\n *  functions to Array values. These are described in more detail in the documentation of [[scala.Array]].\n *\n * @groupname utilities Utility Methods\n * @groupprio utilities 10\n *\n * @groupname assertions Assertions\n * @groupprio assertions 20\n * @groupdesc assertions These methods support program verification and runtime correctness.\n *\n * @groupname console-output Console Output\n * @groupprio console-output 30\n * @groupdesc console-output These methods provide output via the console.\n *\n * @groupname type-constraints Type Constraints\n * @groupprio type-constraints 40\n * @groupdesc type-constraints These entities allows constraints between types to be stipulated.\n *\n * @groupname aliases Aliases\n * @groupprio aliases 50\n * @groupdesc aliases These aliases bring selected immutable types into scope without any imports.\n *\n * @groupname conversions-string String Conversions\n * @groupprio conversions-string 60\n * @groupdesc conversions-string Conversions to and from String and StringOps.\n *\n * @groupname implicit-classes-any Implicit Classes\n * @groupprio implicit-classes-any 70\n * @groupdesc implicit-classes-any These implicit classes add useful extension methods to every type.\n *\n * @groupname implicit-classes-char CharSequence Conversions\n * @groupprio implicit-classes-char 80\n * @groupdesc implicit-classes-char These implicit classes add CharSequence methods to Array[Char] and IndexedSeq[Char] instances.\n *\n * @groupname conversions-java-to-anyval Java to Scala\n * @groupprio conversions-java-to-anyval 90\n * @groupdesc conversions-java-to-anyval Implicit conversion from Java primitive wrapper types to Scala equivalents.\n *\n * @groupname conversions-anyval-to-java Scala to Java\n * @groupprio conversions-anyval-to-java 100\n * @groupdesc conversions-anyval-to-java Implicit conversion from Scala AnyVals to Java primitive wrapper types equivalents.\n *\n * @groupname conversions-array-to-wrapped-array Array to WrappedArray\n * @groupprio conversions-array-to-wrapped-array 110\n * @groupdesc conversions-array-to-wrapped-array Conversions from Arrays to WrappedArrays.\n */\nobject Predef extends LowPriorityImplicits with DeprecatedPredef {\n  /**\n   * Retrieve the runtime representation of a class type. `classOf[T]` is equivalent to\n   * the class literal `T.class` in Java.\n   *\n   * @example {{{\n   * val listClass \u003d classOf[List[_]]\n   * // listClass is java.lang.Class[List[_]] \u003d class scala.collection.immutable.List\n   *\n   * val mapIntString \u003d classOf[Map[Int,String]]\n   * // mapIntString is java.lang.Class[Map[Int,String]] \u003d interface scala.collection.immutable.Map\n   * }}}\n   * @group utilities\n   */\n  def classOf[T]: Class[T] \u003d null // This is a stub method. The actual implementation is filled in by the compiler.\n\n  /** The `String` type in Scala has methods that come either from the underlying\n   *  Java String (see the documentation corresponding to your Java version, for\n   *  example [[http://docs.oracle.com/javase/8/docs/api/java/lang/String.html]]) or\n   *  are added implicitly through [[scala.collection.immutable.StringOps]].\n   *  @group aliases\n   */\n  type String        \u003d java.lang.String\n  /**  @group aliases */\n  type Class[T]      \u003d java.lang.Class[T]\n\n  // miscellaneous -----------------------------------------------------\n  scala.`package`                         // to force scala package object to be seen.\n  scala.collection.immutable.List         // to force Nil, :: to be seen.\n\n  /**  @group aliases */\n  type Function[-A, +B] \u003d Function1[A, B]\n\n  /**  @group aliases */\n  type Map[A, +B] \u003d immutable.Map[A, B]\n  /**  @group aliases */\n  type Set[A]     \u003d immutable.Set[A]\n  /**  @group aliases */\n  val Map         \u003d immutable.Map\n  /**  @group aliases */\n  val Set         \u003d immutable.Set\n\n  // Manifest types, companions, and incantations for summoning\n  @annotation.implicitNotFound(msg \u003d \"No ClassManifest available for ${T}.\")\n  @deprecated(\"use `scala.reflect.ClassTag` instead\", \"2.10.0\")\n  type ClassManifest[T] \u003d scala.reflect.ClassManifest[T]\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"this notion doesn\u0027t have a corresponding concept in 2.10, because scala.reflect.runtime.universe.TypeTag can capture arbitrary types. Use type tags instead of manifests, and there will be no need in opt manifests.\", \"2.10.0\")\n  type OptManifest[T]   \u003d scala.reflect.OptManifest[T]\n  @annotation.implicitNotFound(msg \u003d \"No Manifest available for ${T}.\")\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"use `scala.reflect.ClassTag` (to capture erasures) or scala.reflect.runtime.universe.TypeTag (to capture types) or both instead\", \"2.10.0\")\n  type Manifest[T]      \u003d scala.reflect.Manifest[T]\n  @deprecated(\"use `scala.reflect.ClassTag` instead\", \"2.10.0\")\n  val ClassManifest     \u003d scala.reflect.ClassManifest\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"use `scala.reflect.ClassTag` (to capture erasures) or scala.reflect.runtime.universe.TypeTag (to capture types) or both instead\", \"2.10.0\")\n  val Manifest          \u003d scala.reflect.Manifest\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"this notion doesn\u0027t have a corresponding concept in 2.10, because scala.reflect.runtime.universe.TypeTag can capture arbitrary types. Use type tags instead of manifests, and there will be no need in opt manifests.\", \"2.10.0\")\n  val NoManifest        \u003d scala.reflect.NoManifest\n\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"use scala.reflect.classTag[T] and scala.reflect.runtime.universe.typeTag[T] instead\", \"2.10.0\")\n  def manifest[T](implicit m: Manifest[T])           \u003d m\n  @deprecated(\"use scala.reflect.classTag[T] instead\", \"2.10.0\")\n  def classManifest[T](implicit m: ClassManifest[T]) \u003d m\n  // TODO undeprecated until Scala reflection becomes non-experimental\n  // @deprecated(\"this notion doesn\u0027t have a corresponding concept in 2.10, because scala.reflect.runtime.universe.TypeTag can capture arbitrary types. Use type tags instead of manifests, and there will be no need in opt manifests.\", \"2.10.0\")\n  def optManifest[T](implicit m: OptManifest[T])     \u003d m\n\n  // Minor variations on identity functions\n  /** @group utilities */\n  @inline def identity[A](x: A): A         \u003d x    // @see `conforms` for the implicit version\n  /** @group utilities */\n  @inline def implicitly[T](implicit e: T) \u003d e    // for summoning implicit values from the nether world -- TODO: when dependent method types are on by default, give this result type `e.type`, so that inliner has better chance of knowing which method to inline in calls like `implicitly[MatchingStrategy[Option]].zero`\n  /** @group utilities */\n  @inline def locally[T](x: T): T  \u003d x    // to communicate intent and avoid unmoored statements\n\n  // assertions ---------------------------------------------------------\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  Calls to this method will not be generated if `-Xelide-below`\n   *  is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assertion   the expression to test\n   *  @group assertions\n   */\n  @elidable(ASSERTION)\n  def assert(assertion: Boolean) {\n    if (!assertion)\n      throw new java.lang.AssertionError(\"assertion failed\")\n  }\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  Calls to this method will not be generated if `-Xelide-below`\n   *  is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assertion   the expression to test\n   *  @param message     a String to include in the failure message\n   *  @group assertions\n   */\n  @elidable(ASSERTION) @inline\n  final def assert(assertion: Boolean, message: \u003d\u003e Any) {\n    if (!assertion)\n      throw new java.lang.AssertionError(\"assertion failed: \"+ message)\n  }\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  This method differs from assert only in the intent expressed:\n   *  assert contains a predicate which needs to be proven, while\n   *  assume contains an axiom for a static checker.  Calls to this method\n   *  will not be generated if `-Xelide-below` is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assumption   the expression to test\n   *  @group assertions\n   */\n  @elidable(ASSERTION)\n  def assume(assumption: Boolean) {\n    if (!assumption)\n      throw new java.lang.AssertionError(\"assumption failed\")\n  }\n\n  /** Tests an expression, throwing an `AssertionError` if false.\n   *  This method differs from assert only in the intent expressed:\n   *  assert contains a predicate which needs to be proven, while\n   *  assume contains an axiom for a static checker.  Calls to this method\n   *  will not be generated if `-Xelide-below` is greater than `ASSERTION`.\n   *\n   *  @see [[scala.annotation.elidable elidable]]\n   *  @param assumption   the expression to test\n   *  @param message      a String to include in the failure message\n   *  @group assertions\n   */\n  @elidable(ASSERTION) @inline\n  final def assume(assumption: Boolean, message: \u003d\u003e Any) {\n    if (!assumption)\n      throw new java.lang.AssertionError(\"assumption failed: \"+ message)\n  }\n\n  /** Tests an expression, throwing an `IllegalArgumentException` if false.\n   *  This method is similar to `assert`, but blames the caller of the method\n   *  for violating the condition.\n   *\n   *  @param requirement   the expression to test\n   *  @group assertions\n   */\n  def require(requirement: Boolean) {\n    if (!requirement)\n      throw new IllegalArgumentException(\"requirement failed\")\n  }\n\n  /** Tests an expression, throwing an `IllegalArgumentException` if false.\n   *  This method is similar to `assert`, but blames the caller of the method\n   *  for violating the condition.\n   *\n   *  @param requirement   the expression to test\n   *  @param message       a String to include in the failure message\n   *  @group assertions\n   */\n  @inline final def require(requirement: Boolean, message: \u003d\u003e Any) {\n    if (!requirement)\n      throw new IllegalArgumentException(\"requirement failed: \"+ message)\n  }\n\n  /** `???` can be used for marking methods that remain to be implemented.\n   *  @throws NotImplementedError\n   *  @group utilities\n   */\n  def ??? : Nothing \u003d throw new NotImplementedError\n\n  // tupling ------------------------------------------------------------\n\n  @deprecated(\"use built-in tuple syntax or Tuple2 instead\", \"2.11.0\")\n  type Pair[+A, +B] \u003d Tuple2[A, B]\n  @deprecated(\"use built-in tuple syntax or Tuple2 instead\", \"2.11.0\")\n  object Pair {\n    def apply[A, B](x: A, y: B) \u003d Tuple2(x, y)\n    def unapply[A, B](x: Tuple2[A, B]): Option[Tuple2[A, B]] \u003d Some(x)\n  }\n\n  @deprecated(\"use built-in tuple syntax or Tuple3 instead\", \"2.11.0\")\n  type Triple[+A, +B, +C] \u003d Tuple3[A, B, C]\n  @deprecated(\"use built-in tuple syntax or Tuple3 instead\", \"2.11.0\")\n  object Triple {\n    def apply[A, B, C](x: A, y: B, z: C) \u003d Tuple3(x, y, z)\n    def unapply[A, B, C](x: Tuple3[A, B, C]): Option[Tuple3[A, B, C]] \u003d Some(x)\n  }\n\n  // implicit classes -----------------------------------------------------\n\n  /** @group implicit-classes-any */\n  implicit final class ArrowAssoc[A](private val self: A) extends AnyVal {\n    @inline def -\u003e [B](y: B): Tuple2[A, B] \u003d Tuple2(self, y)\n    def ?[B](y: B): Tuple2[A, B] \u003d -\u003e(y)\n  }\n\n  /** @group implicit-classes-any */\n  implicit final class Ensuring[A](private val self: A) extends AnyVal {\n    def ensuring(cond: Boolean): A \u003d { assert(cond); self }\n    def ensuring(cond: Boolean, msg: \u003d\u003e Any): A \u003d { assert(cond, msg); self }\n    def ensuring(cond: A \u003d\u003e Boolean): A \u003d { assert(cond(self)); self }\n    def ensuring(cond: A \u003d\u003e Boolean, msg: \u003d\u003e Any): A \u003d { assert(cond(self), msg); self }\n  }\n\n  /** @group implicit-classes-any */\n  implicit final class StringFormat[A](private val self: A) extends AnyVal {\n    /** Returns string formatted according to given `format` string.\n     *  Format strings are as for `String.format`\n     *  (@see java.lang.String.format).\n     */\n    @inline def formatted(fmtstr: String): String \u003d fmtstr format self\n  }\n\n  // scala/bug#8229 retaining the pre 2.11 name for source compatibility in shadowing this implicit\n  /** @group implicit-classes-any */\n  implicit final class any2stringadd[A](private val self: A) extends AnyVal {\n    def +(other: String): String \u003d String.valueOf(self) + other\n  }\n\n  implicit final class RichException(private val self: Throwable) extends AnyVal {\n    import scala.compat.Platform.EOL\n    @deprecated(\"use Throwable#getStackTrace\", \"2.11.0\") def getStackTraceString \u003d self.getStackTrace().mkString(\"\", EOL, EOL)\n  }\n\n  // Sadly we have to do `@deprecatedName(null, \"2.12.0\")` because\n  // `@deprecatedName(since\u003d\"2.12.0\")` incurs a warning about\n  //   Usage of named or default arguments transformed this annotation constructor call into a block.\n  //   The corresponding AnnotationInfo will contain references to local values and default getters\n  //   instead of the actual argument trees\n  // and `@deprecatedName(Symbol(\"\u003cnone\u003e\"), \"2.12.0\")` crashes scalac with\n  //   scala.reflect.internal.Symbols$CyclicReference: illegal cyclic reference involving object Symbol\n  // in run/repl-no-imports-no-predef-power.scala.\n  /** @group implicit-classes-char */\n  implicit final class SeqCharSequence(@deprecated(\"will be made private\", \"2.12.0\") @deprecatedName(null, \"2.12.0\") val __sequenceOfChars: scala.collection.IndexedSeq[Char]) extends CharSequence {\n    def length: Int                                     \u003d __sequenceOfChars.length\n    def charAt(index: Int): Char                        \u003d __sequenceOfChars(index)\n    def subSequence(start: Int, end: Int): CharSequence \u003d new SeqCharSequence(__sequenceOfChars.slice(start, end))\n    override def toString                               \u003d __sequenceOfChars mkString \"\"\n  }\n\n  /** @group implicit-classes-char */\n  implicit final class ArrayCharSequence(@deprecated(\"will be made private\", \"2.12.0\") @deprecatedName(null, \"2.12.0\") val __arrayOfChars: Array[Char]) extends CharSequence {\n    def length: Int                                     \u003d __arrayOfChars.length\n    def charAt(index: Int): Char                        \u003d __arrayOfChars(index)\n    def subSequence(start: Int, end: Int): CharSequence \u003d new runtime.ArrayCharSequence(__arrayOfChars, start, end)\n    override def toString                               \u003d __arrayOfChars mkString \"\"\n  }\n\n  implicit val StringCanBuildFrom: CanBuildFrom[String, Char, String] \u003d new CanBuildFrom[String, Char, String] {\n    def apply(from: String) \u003d apply()\n    def apply()             \u003d mutable.StringBuilder.newBuilder\n  }\n\n  /** @group conversions-string */\n  @inline implicit def augmentString(x: String): StringOps \u003d new StringOps(x)\n  /** @group conversions-string */\n  @inline implicit def unaugmentString(x: StringOps): String \u003d x.repr\n\n  // printing -----------------------------------------------------------\n\n  /** Prints an object to `out` using its `toString` method.\n   *\n   *  @param x the object to print; may be null.\n   *  @group console-output\n   */\n  def print(x: Any) \u003d Console.print(x)\n\n  /** Prints a newline character on the default output.\n   *  @group console-output\n   */\n  def println() \u003d Console.println()\n\n  /** Prints out an object to the default output, followed by a newline character.\n   *\n   *  @param x the object to print.\n   *  @group console-output\n   */\n  def println(x: Any) \u003d Console.println(x)\n\n  /** Prints its arguments as a formatted string to the default output,\n   *  based on a string pattern (in a fashion similar to printf in C).\n   *\n   *  The interpretation of the formatting patterns is described in\n   *  [[java.util.Formatter]].\n   *\n   *  Consider using the [[scala.StringContext.f f interpolator]] as more type safe and idiomatic.\n   *\n   *  @param text the pattern for formatting the arguments.\n   *  @param args the arguments used to instantiating the pattern.\n   *  @throws java.lang.IllegalArgumentException if there was a problem with the format string or arguments\n   *\n   *  @see [[scala.StringContext.f StringContext.f]]\n   *  @group console-output\n   */\n  def printf(text: String, xs: Any*) \u003d Console.print(text.format(xs: _*))\n\n  // views --------------------------------------------------------------\n\n  implicit def tuple2ToZippedOps[T1, T2](x: (T1, T2))                           \u003d new runtime.Tuple2Zipped.Ops(x)\n  implicit def tuple3ToZippedOps[T1, T2, T3](x: (T1, T2, T3))                   \u003d new runtime.Tuple3Zipped.Ops(x)\n\n  implicit def genericArrayOps[T](xs: Array[T]): ArrayOps[T] \u003d (xs match {\n    case x: Array[AnyRef]  \u003d\u003e refArrayOps[AnyRef](x)\n    case x: Array[Boolean] \u003d\u003e booleanArrayOps(x)\n    case x: Array[Byte]    \u003d\u003e byteArrayOps(x)\n    case x: Array[Char]    \u003d\u003e charArrayOps(x)\n    case x: Array[Double]  \u003d\u003e doubleArrayOps(x)\n    case x: Array[Float]   \u003d\u003e floatArrayOps(x)\n    case x: Array[Int]     \u003d\u003e intArrayOps(x)\n    case x: Array[Long]    \u003d\u003e longArrayOps(x)\n    case x: Array[Short]   \u003d\u003e shortArrayOps(x)\n    case x: Array[Unit]    \u003d\u003e unitArrayOps(x)\n    case null              \u003d\u003e null\n  }).asInstanceOf[ArrayOps[T]]\n\n  implicit def booleanArrayOps(xs: Array[Boolean]): ArrayOps.ofBoolean   \u003d new ArrayOps.ofBoolean(xs)\n  implicit def byteArrayOps(xs: Array[Byte]): ArrayOps.ofByte            \u003d new ArrayOps.ofByte(xs)\n  implicit def charArrayOps(xs: Array[Char]): ArrayOps.ofChar            \u003d new ArrayOps.ofChar(xs)\n  implicit def doubleArrayOps(xs: Array[Double]): ArrayOps.ofDouble      \u003d new ArrayOps.ofDouble(xs)\n  implicit def floatArrayOps(xs: Array[Float]): ArrayOps.ofFloat         \u003d new ArrayOps.ofFloat(xs)\n  implicit def intArrayOps(xs: Array[Int]): ArrayOps.ofInt               \u003d new ArrayOps.ofInt(xs)\n  implicit def longArrayOps(xs: Array[Long]): ArrayOps.ofLong            \u003d new ArrayOps.ofLong(xs)\n  implicit def refArrayOps[T \u003c: AnyRef](xs: Array[T]): ArrayOps.ofRef[T] \u003d new ArrayOps.ofRef[T](xs)\n  implicit def shortArrayOps(xs: Array[Short]): ArrayOps.ofShort         \u003d new ArrayOps.ofShort(xs)\n  implicit def unitArrayOps(xs: Array[Unit]): ArrayOps.ofUnit            \u003d new ArrayOps.ofUnit(xs)\n\n  // \"Autoboxing\" and \"Autounboxing\" ---------------------------------------------------\n\n  /** @group conversions-anyval-to-java */\n  implicit def byte2Byte(x: Byte): java.lang.Byte             \u003d x.asInstanceOf[java.lang.Byte]\n  /** @group conversions-anyval-to-java */\n  implicit def short2Short(x: Short): java.lang.Short         \u003d x.asInstanceOf[java.lang.Short]\n  /** @group conversions-anyval-to-java */\n  implicit def char2Character(x: Char): java.lang.Character   \u003d x.asInstanceOf[java.lang.Character]\n  /** @group conversions-anyval-to-java */\n  implicit def int2Integer(x: Int): java.lang.Integer         \u003d x.asInstanceOf[java.lang.Integer]\n  /** @group conversions-anyval-to-java */\n  implicit def long2Long(x: Long): java.lang.Long             \u003d x.asInstanceOf[java.lang.Long]\n  /** @group conversions-anyval-to-java */\n  implicit def float2Float(x: Float): java.lang.Float         \u003d x.asInstanceOf[java.lang.Float]\n  /** @group conversions-anyval-to-java */\n  implicit def double2Double(x: Double): java.lang.Double     \u003d x.asInstanceOf[java.lang.Double]\n  /** @group conversions-anyval-to-java */\n  implicit def boolean2Boolean(x: Boolean): java.lang.Boolean \u003d x.asInstanceOf[java.lang.Boolean]\n\n  /** @group conversions-java-to-anyval */\n  implicit def Byte2byte(x: java.lang.Byte): Byte             \u003d x.asInstanceOf[Byte]\n  /** @group conversions-java-to-anyval */\n  implicit def Short2short(x: java.lang.Short): Short         \u003d x.asInstanceOf[Short]\n  /** @group conversions-java-to-anyval */\n  implicit def Character2char(x: java.lang.Character): Char   \u003d x.asInstanceOf[Char]\n  /** @group conversions-java-to-anyval */\n  implicit def Integer2int(x: java.lang.Integer): Int         \u003d x.asInstanceOf[Int]\n  /** @group conversions-java-to-anyval */\n  implicit def Long2long(x: java.lang.Long): Long             \u003d x.asInstanceOf[Long]\n  /** @group conversions-java-to-anyval */\n  implicit def Float2float(x: java.lang.Float): Float         \u003d x.asInstanceOf[Float]\n  /** @group conversions-java-to-anyval */\n  implicit def Double2double(x: java.lang.Double): Double     \u003d x.asInstanceOf[Double]\n  /** @group conversions-java-to-anyval */\n  implicit def Boolean2boolean(x: java.lang.Boolean): Boolean \u003d x.asInstanceOf[Boolean]\n\n  // Type Constraints --------------------------------------------------------------\n\n  /**\n   * An instance of `A \u003c:\u003c B` witnesses that `A` is a subtype of `B`.\n   * Requiring an implicit argument of the type `A \u003c:\u003c B` encodes\n   * the generalized constraint `A \u003c: B`.\n   *\n   * @note we need a new type constructor `\u003c:\u003c` and evidence `conforms`,\n   * as reusing `Function1` and `identity` leads to ambiguities in\n   * case of type errors (`any2stringadd` is inferred)\n   *\n   * To constrain any abstract type T that\u0027s in scope in a method\u0027s\n   * argument list (not just the method\u0027s own type parameters) simply\n   * add an implicit argument of type `T \u003c:\u003c U`, where `U` is the required\n   * upper bound; or for lower-bounds, use: `L \u003c:\u003c T`, where `L` is the\n   * required lower bound.\n   *\n   * In part contributed by Jason Zaugg.\n   * @group type-constraints\n   */\n  @implicitNotFound(msg \u003d \"Cannot prove that ${From} \u003c:\u003c ${To}.\")\n  sealed abstract class \u003c:\u003c[-From, +To] extends (From \u003d\u003e To) with Serializable\n  private[this] final val singleton_\u003c:\u003c \u003d new \u003c:\u003c[Any,Any] { def apply(x: Any): Any \u003d x }\n  // The dollar prefix is to dodge accidental shadowing of this method\n  // by a user-defined method of the same name (scala/bug#7788).\n  // The collections rely on this method.\n  /** @group type-constraints */\n  implicit def $conforms[A]: A \u003c:\u003c A \u003d singleton_\u003c:\u003c.asInstanceOf[A \u003c:\u003c A]\n\n  @deprecated(\"use `implicitly[T \u003c:\u003c U]` or `identity` instead.\", \"2.11.0\")\n  def conforms[A]: A \u003c:\u003c A \u003d $conforms[A]\n\n  /** An instance of `A \u003d:\u003d B` witnesses that the types `A` and `B` are equal.\n   *\n   * @see `\u003c:\u003c` for expressing subtyping constraints\n   * @group type-constraints\n   */\n  @implicitNotFound(msg \u003d \"Cannot prove that ${From} \u003d:\u003d ${To}.\")\n  sealed abstract class \u003d:\u003d[From, To] extends (From \u003d\u003e To) with Serializable\n  private[this] final val singleton_\u003d:\u003d \u003d new \u003d:\u003d[Any,Any] { def apply(x: Any): Any \u003d x }\n  /** @group type-constraints */\n  object \u003d:\u003d {\n     implicit def tpEquals[A]: A \u003d:\u003d A \u003d singleton_\u003d:\u003d.asInstanceOf[A \u003d:\u003d A]\n  }\n\n  /** A type for which there is always an implicit value.\n   *  @see [[scala.Array$]], method `fallbackCanBuildFrom`\n   */\n  class DummyImplicit\n\n  object DummyImplicit {\n\n    /** An implicit value yielding a `DummyImplicit`.\n     *   @see [[scala.Array$]], method `fallbackCanBuildFrom`\n     */\n    implicit def dummyImplicit: DummyImplicit \u003d new DummyImplicit\n  }\n}\n\nprivate[scala] trait DeprecatedPredef {\n  self: Predef.type \u003d\u003e\n\n  // Deprecated stubs for any who may have been calling these methods directly.\n  @deprecated(\"use `ArrowAssoc`\", \"2.11.0\") def any2ArrowAssoc[A](x: A): ArrowAssoc[A]                                      \u003d new ArrowAssoc(x)\n  @deprecated(\"use `Ensuring`\", \"2.11.0\") def any2Ensuring[A](x: A): Ensuring[A]                                            \u003d new Ensuring(x)\n  @deprecated(\"use `StringFormat`\", \"2.11.0\") def any2stringfmt(x: Any): StringFormat[Any]                                  \u003d new StringFormat(x)\n  @deprecated(\"use `Throwable` directly\", \"2.11.0\") def exceptionWrapper(exc: Throwable)                                    \u003d new RichException(exc)\n  @deprecated(\"use `SeqCharSequence`\", \"2.11.0\") def seqToCharSequence(xs: scala.collection.IndexedSeq[Char]): CharSequence \u003d new SeqCharSequence(xs)\n  @deprecated(\"use `ArrayCharSequence`\", \"2.11.0\") def arrayToCharSequence(xs: Array[Char]): CharSequence                   \u003d new ArrayCharSequence(xs)\n\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readLine(): String                 \u003d StdIn.readLine()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readLine(text: String, args: Any*) \u003d StdIn.readLine(text, args: _*)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readBoolean()                      \u003d StdIn.readBoolean()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readByte()                         \u003d StdIn.readByte()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readShort()                        \u003d StdIn.readShort()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readChar()                         \u003d StdIn.readChar()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readInt()                          \u003d StdIn.readInt()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readLong()                         \u003d StdIn.readLong()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readFloat()                        \u003d StdIn.readFloat()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readDouble()                       \u003d StdIn.readDouble()\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf(format: String)              \u003d StdIn.readf(format)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf1(format: String)             \u003d StdIn.readf1(format)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf2(format: String)             \u003d StdIn.readf2(format)\n  @deprecated(\"use the method in `scala.io.StdIn`\", \"2.11.0\") def readf3(format: String)             \u003d StdIn.readf3(format)\n}\n\n/** The `LowPriorityImplicits` class provides implicit values that\n*  are valid in all Scala compilation units without explicit qualification,\n*  but that are partially overridden by higher-priority conversions in object\n*  `Predef`.\n*\n*  @author  Martin Odersky\n*  @since 2.8\n*/\n// scala/bug#7335 Parents of Predef are defined in the same compilation unit to avoid\n// cyclic reference errors compiling the standard library *without* a previously\n// compiled copy on the classpath.\nprivate[scala] abstract class LowPriorityImplicits {\n  import mutable.WrappedArray\n  import immutable.WrappedString\n\n  /** We prefer the java.lang.* boxed types to these wrappers in\n   *  any potential conflicts.  Conflicts do exist because the wrappers\n   *  need to implement ScalaNumber in order to have a symmetric equals\n   *  method, but that implies implementing java.lang.Number as well.\n   *\n   *  Note - these are inlined because they are value classes, but\n   *  the call to xxxWrapper is not eliminated even though it does nothing.\n   *  Even inlined, every call site does a no-op retrieval of Predef\u0027s MODULE$\n   *  because maybe loading Predef has side effects!\n   */\n  @inline implicit def byteWrapper(x: Byte)       \u003d new runtime.RichByte(x)\n  @inline implicit def shortWrapper(x: Short)     \u003d new runtime.RichShort(x)\n  @inline implicit def intWrapper(x: Int)         \u003d new runtime.RichInt(x)\n  @inline implicit def charWrapper(c: Char)       \u003d new runtime.RichChar(c)\n  @inline implicit def longWrapper(x: Long)       \u003d new runtime.RichLong(x)\n  @inline implicit def floatWrapper(x: Float)     \u003d new runtime.RichFloat(x)\n  @inline implicit def doubleWrapper(x: Double)   \u003d new runtime.RichDouble(x)\n  @inline implicit def booleanWrapper(x: Boolean) \u003d new runtime.RichBoolean(x)\n\n  /** @group conversions-array-to-wrapped-array */\n  implicit def genericWrapArray[T](xs: Array[T]): WrappedArray[T] \u003d\n    if (xs eq null) null\n    else WrappedArray.make(xs)\n\n  // Since the JVM thinks arrays are covariant, one 0-length Array[AnyRef]\n  // is as good as another for all T \u003c: AnyRef.  Instead of creating 100,000,000\n  // unique ones by way of this implicit, let\u0027s share one.\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapRefArray[T \u003c: AnyRef](xs: Array[T]): WrappedArray[T] \u003d {\n    if (xs eq null) null\n    else if (xs.length \u003d\u003d 0) WrappedArray.empty[T]\n    else new WrappedArray.ofRef[T](xs)\n  }\n\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapIntArray(xs: Array[Int]): WrappedArray[Int] \u003d if (xs ne null) new WrappedArray.ofInt(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapDoubleArray(xs: Array[Double]): WrappedArray[Double] \u003d if (xs ne null) new WrappedArray.ofDouble(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapLongArray(xs: Array[Long]): WrappedArray[Long] \u003d if (xs ne null) new WrappedArray.ofLong(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapFloatArray(xs: Array[Float]): WrappedArray[Float] \u003d if (xs ne null) new WrappedArray.ofFloat(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapCharArray(xs: Array[Char]): WrappedArray[Char] \u003d if (xs ne null) new WrappedArray.ofChar(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapByteArray(xs: Array[Byte]): WrappedArray[Byte] \u003d if (xs ne null) new WrappedArray.ofByte(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapShortArray(xs: Array[Short]): WrappedArray[Short] \u003d if (xs ne null) new WrappedArray.ofShort(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapBooleanArray(xs: Array[Boolean]): WrappedArray[Boolean] \u003d if (xs ne null) new WrappedArray.ofBoolean(xs) else null\n  /** @group conversions-array-to-wrapped-array */\n  implicit def wrapUnitArray(xs: Array[Unit]): WrappedArray[Unit] \u003d if (xs ne null) new WrappedArray.ofUnit(xs) else null\n\n  /** @group conversions-string */\n  implicit def wrapString(s: String): WrappedString \u003d if (s ne null) new WrappedString(s) else null\n  /** @group conversions-string */\n  implicit def unwrapString(ws: WrappedString): String \u003d if (ws ne null) ws.self else null\n\n  implicit def fallbackStringCanBuildFrom[T]: CanBuildFrom[String, T, immutable.IndexedSeq[T]] \u003d\n    new CanBuildFrom[String, T, immutable.IndexedSeq[T]] {\n      def apply(from: String) \u003d immutable.IndexedSeq.newBuilder[T]\n      def apply() \u003d immutable.IndexedSeq.newBuilder[T]\n    }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor25.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Predef.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 15 more

2020.11.11 19:46:19 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:46:19 INFO  time: compiled task1-scala in 61ms
2020.11.11 19:46:21 INFO  compiling task1-scala (2 scala sources)
2020.11.11 19:46:21 INFO  time: compiled task1-scala in 0.26s
2020.11.11 19:46:21 INFO  compiling task1-scala (2 scala sources)
Nov 11, 2020 7:46:23 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Array.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\npackage scala\n\nimport scala.collection.generic._\nimport scala.collection.{ mutable, immutable }\nimport mutable.{ ArrayBuilder, ArraySeq }\nimport scala.reflect.ClassTag\nimport scala.runtime.ScalaRunTime.{ array_apply, array_update }\n\n/** Contains a fallback builder for arrays when the element type\n *  does not have a class tag. In that case a generic array is built.\n */\nclass FallbackArrayBuilding {\n\n  /** A builder factory that generates a generic array.\n   *  Called instead of `Array.newBuilder` if the element type of an array\n   *  does not have a class tag. Note that fallbackBuilder factory\n   *  needs an implicit parameter (otherwise it would not be dominated in\n   *  implicit search by `Array.canBuildFrom`). We make sure that\n   *  implicit search is always successful.\n   */\n  implicit def fallbackCanBuildFrom[T](implicit m: DummyImplicit): CanBuildFrom[Array[_], T, ArraySeq[T]] \u003d\n    new CanBuildFrom[Array[_], T, ArraySeq[T]] {\n      def apply(from: Array[_]) \u003d ArraySeq.newBuilder[T]\n      def apply() \u003d ArraySeq.newBuilder[T]\n    }\n}\n\n/** Utility methods for operating on arrays.\n *  For example:\n *  {{{\n *  val a \u003d Array(1, 2)\n *  val b \u003d Array.ofDim[Int](2)\n *  val c \u003d Array.concat(a, b)\n *  }}}\n *  where the array objects `a`, `b` and `c` have respectively the values\n *  `Array(1, 2)`, `Array(0, 0)` and `Array(1, 2, 0, 0)`.\n *\n *  @author Martin Odersky\n *  @since  1.0\n */\nobject Array extends FallbackArrayBuilding {\n  val emptyBooleanArray \u003d new Array[Boolean](0)\n  val emptyByteArray    \u003d new Array[Byte](0)\n  val emptyCharArray    \u003d new Array[Char](0)\n  val emptyDoubleArray  \u003d new Array[Double](0)\n  val emptyFloatArray   \u003d new Array[Float](0)\n  val emptyIntArray     \u003d new Array[Int](0)\n  val emptyLongArray    \u003d new Array[Long](0)\n  val emptyShortArray   \u003d new Array[Short](0)\n  val emptyObjectArray  \u003d new Array[Object](0)\n\n  implicit def canBuildFrom[T](implicit tag: ClassTag[T]): CanBuildFrom[Array[_], T, Array[T]] \u003d {\n    val cls \u003d tag.runtimeClass\n    (if (cls.isPrimitive) {\n      cls match {\n        case java.lang.Integer.TYPE   \u003d\u003e cbfIntArray\n        case java.lang.Double.TYPE    \u003d\u003e cbfDoubleArray\n        case java.lang.Long.TYPE      \u003d\u003e cbfLongArray\n        case java.lang.Float.TYPE     \u003d\u003e cbfFloatArray\n        case java.lang.Character.TYPE \u003d\u003e cbfCharArray\n        case java.lang.Byte.TYPE      \u003d\u003e cbfByteArray\n        case java.lang.Short.TYPE     \u003d\u003e cbfShortArray\n        case java.lang.Boolean.TYPE   \u003d\u003e cbfBooleanArray\n        case java.lang.Void.TYPE      \u003d\u003e cbfUnitArray\n      }\n    } else if (cls \u003d\u003d ObjectClass) {\n      cbfObjectArray\n    } else {\n      refCBF[T with AnyRef](tag.asInstanceOf[ClassTag[T with AnyRef]])\n    }).asInstanceOf[CanBuildFrom[Array[_], T, Array[T]]]\n  }\n  private[this] val ObjectClass \u003d classOf[Object]\n\n  private[this] val cbfBooleanArray \u003d new CanBuildFrom[Array[_], Boolean, Array[Boolean]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofBoolean()\n    def apply() \u003d new ArrayBuilder.ofBoolean()\n  }\n\n  private[this] val cbfByteArray    \u003d new CanBuildFrom[Array[_], Byte, Array[Byte]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofByte()\n    def apply() \u003d new ArrayBuilder.ofByte()\n  }\n\n  private[this] val cbfCharArray    \u003d new CanBuildFrom[Array[_], Char, Array[Char]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofChar()\n    def apply() \u003d new ArrayBuilder.ofChar()\n  }\n\n  private[this] val cbfDoubleArray  \u003d new CanBuildFrom[Array[_], Double, Array[Double]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofDouble()\n    def apply() \u003d new ArrayBuilder.ofDouble()\n  }\n\n  private[this] val cbfFloatArray   \u003d new CanBuildFrom[Array[_], Float, Array[Float]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofFloat()\n    def apply() \u003d new ArrayBuilder.ofFloat()\n  }\n\n  private[this] val cbfIntArray     \u003d new CanBuildFrom[Array[_], Int, Array[Int]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofInt()\n    def apply() \u003d new ArrayBuilder.ofInt()\n  }\n\n  private[this] val cbfLongArray    \u003d new CanBuildFrom[Array[_], Long, Array[Long]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofLong()\n    def apply() \u003d new ArrayBuilder.ofLong()\n  }\n\n  private[this] val cbfShortArray   \u003d new CanBuildFrom[Array[_], Short, Array[Short]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofShort()\n    def apply() \u003d new ArrayBuilder.ofShort()\n  }\n\n  private[this] val cbfUnitArray    \u003d new CanBuildFrom[Array[_], Unit, Array[Unit]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofUnit()\n    def apply() \u003d new ArrayBuilder.ofUnit()\n  }\n\n  private[this] val cbfObjectArray  \u003d refCBF[Object]\n  private[this] def refCBF[T \u003c: AnyRef](implicit t: ClassTag[T]): CanBuildFrom[Array[_], T, Array[T]] \u003d\n    new CanBuildFrom[Array[_], T, Array[T]] {\n      def apply(from: Array[_]) \u003d new ArrayBuilder.ofRef[T]()(t)\n      def apply() \u003d new ArrayBuilder.ofRef[T]()(t)\n    }\n\n  /**\n   * Returns a new [[scala.collection.mutable.ArrayBuilder]].\n   */\n  def newBuilder[T](implicit t: ClassTag[T]): ArrayBuilder[T] \u003d ArrayBuilder.make[T]()(t)\n\n  private def slowcopy(src : AnyRef,\n                       srcPos : Int,\n                       dest : AnyRef,\n                       destPos : Int,\n                       length : Int) {\n    var i \u003d srcPos\n    var j \u003d destPos\n    val srcUntil \u003d srcPos + length\n    while (i \u003c srcUntil) {\n      array_update(dest, j, array_apply(src, i))\n      i +\u003d 1\n      j +\u003d 1\n    }\n  }\n\n  /** Copy one array to another.\n   *  Equivalent to Java\u0027s\n   *    `System.arraycopy(src, srcPos, dest, destPos, length)`,\n   *  except that this also works for polymorphic and boxed arrays.\n   *\n   *  Note that the passed-in `dest` array will be modified by this call.\n   *\n   *  @param src the source array.\n   *  @param srcPos  starting position in the source array.\n   *  @param dest destination array.\n   *  @param destPos starting position in the destination array.\n   *  @param length the number of array elements to be copied.\n   *\n   *  @see `java.lang.System#arraycopy`\n   */\n  def copy(src: AnyRef, srcPos: Int, dest: AnyRef, destPos: Int, length: Int) {\n    val srcClass \u003d src.getClass\n    if (srcClass.isArray \u0026\u0026 dest.getClass.isAssignableFrom(srcClass))\n      java.lang.System.arraycopy(src, srcPos, dest, destPos, length)\n    else\n      slowcopy(src, srcPos, dest, destPos, length)\n  }\n\n  /** Returns an array of length 0 */\n  def empty[T: ClassTag]: Array[T] \u003d new Array[T](0)\n\n  /** Creates an array with given elements.\n   *\n   *  @param xs the elements to put in the array\n   *  @return an array containing all elements from xs.\n   */\n  // Subject to a compiler optimization in Cleanup.\n  // Array(e0, ..., en) is translated to { val a \u003d new Array(3); a(i) \u003d ei; a }\n  def apply[T: ClassTag](xs: T*): Array[T] \u003d {\n    val array \u003d new Array[T](xs.length)\n    var i \u003d 0\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Boolean` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Boolean, xs: Boolean*): Array[Boolean] \u003d {\n    val array \u003d new Array[Boolean](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Byte` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Byte, xs: Byte*): Array[Byte] \u003d {\n    val array \u003d new Array[Byte](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Short` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Short, xs: Short*): Array[Short] \u003d {\n    val array \u003d new Array[Short](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Char` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Char, xs: Char*): Array[Char] \u003d {\n    val array \u003d new Array[Char](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Int` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Int, xs: Int*): Array[Int] \u003d {\n    val array \u003d new Array[Int](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Long` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Long, xs: Long*): Array[Long] \u003d {\n    val array \u003d new Array[Long](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Float` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Float, xs: Float*): Array[Float] \u003d {\n    val array \u003d new Array[Float](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Double` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Double, xs: Double*): Array[Double] \u003d {\n    val array \u003d new Array[Double](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Unit` objects */\n  def apply(x: Unit, xs: Unit*): Array[Unit] \u003d {\n    val array \u003d new Array[Unit](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates array with given dimensions */\n  def ofDim[T: ClassTag](n1: Int): Array[T] \u003d\n    new Array[T](n1)\n  /** Creates a 2-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int): Array[Array[T]] \u003d {\n    val arr: Array[Array[T]] \u003d (new Array[Array[T]](n1): Array[Array[T]])\n    for (i \u003c- 0 until n1) arr(i) \u003d new Array[T](n2)\n    arr\n    // tabulate(n1)(_ \u003d\u003e ofDim[T](n2))\n  }\n  /** Creates a 3-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int): Array[Array[Array[T]]] \u003d\n    tabulate(n1)(_ \u003d\u003e ofDim[T](n2, n3))\n  /** Creates a 4-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int): Array[Array[Array[Array[T]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e ofDim[T](n2, n3, n4))\n  /** Creates a 5-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int): Array[Array[Array[Array[Array[T]]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e ofDim[T](n2, n3, n4, n5))\n\n  /** Concatenates all arrays into a single array.\n   *\n   *  @param xss the given arrays\n   *  @return   the array created from concatenating `xss`\n   */\n  def concat[T: ClassTag](xss: Array[T]*): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n    b.sizeHint(xss.map(_.length).sum)\n    for (xs \u003c- xss) b ++\u003d xs\n    b.result()\n  }\n\n  /** Returns an array that contains the results of some element computation a number\n   *  of times.\n   *\n   *  Note that this means that `elem` is computed a total of n times:\n   *  {{{\n   * scala\u003e Array.fill(3){ math.random }\n   * res3: Array[Double] \u003d Array(0.365461167592537, 1.550395944913685E-4, 0.7907242137333306)\n   *  }}}\n   *\n   *  @param   n  the number of elements desired\n   *  @param   elem the element computation\n   *  @return an Array of size n, where each element contains the result of computing\n   *  `elem`.\n   */\n  def fill[T: ClassTag](n: Int)(elem: \u003d\u003e T): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n    b.sizeHint(n)\n    var i \u003d 0\n    while (i \u003c n) {\n      b +\u003d elem\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  /** Returns a two-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int)(elem: \u003d\u003e T): Array[Array[T]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2)(elem))\n\n  /** Returns a three-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3nd dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int)(elem: \u003d\u003e T): Array[Array[Array[T]]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2, n3)(elem))\n\n  /** Returns a four-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3nd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int)(elem: \u003d\u003e T): Array[Array[Array[Array[T]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2, n3, n4)(elem))\n\n  /** Returns a five-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3nd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   n5  the number of elements in the 5th dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(elem: \u003d\u003e T): Array[Array[Array[Array[Array[T]]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2, n3, n4, n5)(elem))\n\n  /** Returns an array containing values of a given function over a range of integer\n   *  values starting from 0.\n   *\n   *  @param  n   The number of elements in the array\n   *  @param  f   The function computing element values\n   *  @return A traversable consisting of elements `f(0),f(1), ..., f(n - 1)`\n   */\n  def tabulate[T: ClassTag](n: Int)(f: Int \u003d\u003e T): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n    b.sizeHint(n)\n    var i \u003d 0\n    while (i \u003c n) {\n      b +\u003d f(i)\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  /** Returns a two-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int)(f: (Int, Int) \u003d\u003e T): Array[Array[T]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2)(f(i1, _)))\n\n  /** Returns a three-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3rd dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int)(f: (Int, Int, Int) \u003d\u003e T): Array[Array[Array[T]]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2, n3)(f(i1, _, _)))\n\n  /** Returns a four-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3rd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int)(f: (Int, Int, Int, Int) \u003d\u003e T): Array[Array[Array[Array[T]]]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2, n3, n4)(f(i1, _, _, _)))\n\n  /** Returns a five-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3rd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   n5  the number of elements in the 5th dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(f: (Int, Int, Int, Int, Int) \u003d\u003e T): Array[Array[Array[Array[Array[T]]]]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2, n3, n4, n5)(f(i1, _, _, _, _)))\n\n  /** Returns an array containing a sequence of increasing integers in a range.\n   *\n   *  @param start  the start value of the array\n   *  @param end    the end value of the array, exclusive (in other words, this is the first value \u0027\u0027\u0027not\u0027\u0027\u0027 returned)\n   *  @return  the array with values in range `start, start + 1, ..., end - 1`\n   *  up to, but excluding, `end`.\n   */\n  def range(start: Int, end: Int): Array[Int] \u003d range(start, end, 1)\n\n  /** Returns an array containing equally spaced values in some integer interval.\n   *\n   *  @param start the start value of the array\n   *  @param end   the end value of the array, exclusive (in other words, this is the first value \u0027\u0027\u0027not\u0027\u0027\u0027 returned)\n   *  @param step  the increment value of the array (may not be zero)\n   *  @return      the array with values in `start, start + step, ...` up to, but excluding `end`\n   */\n  def range(start: Int, end: Int, step: Int): Array[Int] \u003d {\n    if (step \u003d\u003d 0) throw new IllegalArgumentException(\"zero step\")\n    val b \u003d newBuilder[Int]\n    b.sizeHint(immutable.Range.count(start, end, step, isInclusive \u003d false))\n\n    var i \u003d start\n    while (if (step \u003c 0) end \u003c i else i \u003c end) {\n      b +\u003d i\n      i +\u003d step\n    }\n    b.result()\n  }\n\n  /** Returns an array containing repeated applications of a function to a start value.\n   *\n   *  @param start the start value of the array\n   *  @param len   the number of elements returned by the array\n   *  @param f     the function that is repeatedly applied\n   *  @return      the array returning `len` values in the sequence `start, f(start), f(f(start)), ...`\n   */\n  def iterate[T: ClassTag](start: T, len: Int)(f: T \u003d\u003e T): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n\n    if (len \u003e 0) {\n      b.sizeHint(len)\n      var acc \u003d start\n      var i \u003d 1\n      b +\u003d acc\n\n      while (i \u003c len) {\n        acc \u003d f(acc)\n        i +\u003d 1\n        b +\u003d acc\n      }\n    }\n    b.result()\n  }\n\n  /** Called in a pattern match like `{ case Array(x,y,z) \u003d\u003e println(\u00273 elements\u0027)}`.\n   *\n   *  @param x the selector value\n   *  @return  sequence wrapped in a [[scala.Some]], if `x` is a Seq, otherwise `None`\n   */\n  def unapplySeq[T](x: Array[T]): Option[IndexedSeq[T]] \u003d\n    if (x \u003d\u003d null) None else Some(x.toIndexedSeq)\n    // !!! the null check should to be necessary, but without it 2241 fails. Seems to be a bug\n    // in pattern matcher.  @PP: I noted in #4364 I think the behavior is correct.\n}\n\n/** Arrays are mutable, indexed collections of values. `Array[T]` is Scala\u0027s representation\n *  for Java\u0027s `T[]`.\n *\n *  {{{\n *  val numbers \u003d Array(1, 2, 3, 4)\n *  val first \u003d numbers(0) // read the first element\n *  numbers(3) \u003d 100 // replace the 4th array element with 100\n *  val biggerNumbers \u003d numbers.map(_ * 2) // multiply all numbers by two\n *  }}}\n *\n *  Arrays make use of two common pieces of Scala syntactic sugar, shown on lines 2 and 3 of the above\n *  example code.\n *  Line 2 is translated into a call to `apply(Int)`, while line 3 is translated into a call to\n *  `update(Int, T)`.\n *\n *  Two implicit conversions exist in [[scala.Predef]] that are frequently applied to arrays: a conversion\n *  to [[scala.collection.mutable.ArrayOps]] (shown on line 4 of the example above) and a conversion\n *  to [[scala.collection.mutable.WrappedArray]] (a subtype of [[scala.collection.Seq]]).\n *  Both types make available many of the standard operations found in the Scala collections API.\n *  The conversion to `ArrayOps` is temporary, as all operations defined on `ArrayOps` return an `Array`,\n *  while the conversion to `WrappedArray` is permanent as all operations return a `WrappedArray`.\n *\n *  The conversion to `ArrayOps` takes priority over the conversion to `WrappedArray`. For instance,\n *  consider the following code:\n *\n *  {{{\n *  val arr \u003d Array(1, 2, 3)\n *  val arrReversed \u003d arr.reverse\n *  val seqReversed : Seq[Int] \u003d arr.reverse\n *  }}}\n *\n *  Value `arrReversed` will be of type `Array[Int]`, with an implicit conversion to `ArrayOps` occurring\n *  to perform the `reverse` operation. The value of `seqReversed`, on the other hand, will be computed\n *  by converting to `WrappedArray` first and invoking the variant of `reverse` that returns another\n *  `WrappedArray`.\n *\n *  @author Martin Odersky\n *  @since  1.0\n *  @see [[http://www.scala-lang.org/files/archive/spec/2.12/ Scala Language Specification]], for in-depth information on the transformations the Scala compiler makes on Arrays (Sections 6.6 and 6.15 respectively.)\n *  @see [[http://docs.scala-lang.org/sips/completed/scala-2-8-arrays.html \"Scala 2.8 Arrays\"]] the Scala Improvement Document detailing arrays since Scala 2.8.\n *  @see [[http://docs.scala-lang.org/overviews/collections/arrays.html \"The Scala 2.8 Collections\u0027 API\"]] section on `Array` by Martin Odersky for more information.\n *  @hideImplicitConversion scala.Predef.booleanArrayOps\n *  @hideImplicitConversion scala.Predef.byteArrayOps\n *  @hideImplicitConversion scala.Predef.charArrayOps\n *  @hideImplicitConversion scala.Predef.doubleArrayOps\n *  @hideImplicitConversion scala.Predef.floatArrayOps\n *  @hideImplicitConversion scala.Predef.intArrayOps\n *  @hideImplicitConversion scala.Predef.longArrayOps\n *  @hideImplicitConversion scala.Predef.refArrayOps\n *  @hideImplicitConversion scala.Predef.shortArrayOps\n *  @hideImplicitConversion scala.Predef.unitArrayOps\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapRefArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapIntArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapDoubleArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapLongArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapFloatArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapCharArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapByteArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapShortArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapBooleanArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapUnitArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.genericWrapArray\n *  @define coll array\n *  @define Coll `Array`\n *  @define orderDependent\n *  @define orderDependentFold\n *  @define mayNotTerminateInf\n *  @define willNotTerminateInf\n *  @define collectExample\n *  @define undefinedorder\n *  @define thatinfo the class of the returned collection. In the standard library configuration,\n *    `That` is either `Array[B]` if an ClassTag is available for B or `ArraySeq[B]` otherwise.\n *  @define zipthatinfo $thatinfo\n *  @define bfinfo an implicit value of class `CanBuildFrom` which determines the result class `That` from the current\n *    representation type `Repr` and the new element type `B`.\n */\nfinal class Array[T](_length: Int) extends java.io.Serializable with java.lang.Cloneable {\n\n  /** The length of the array */\n  def length: Int \u003d throw new Error()\n\n  /** The element at given index.\n   *\n   *  Indices start at `0`; `xs.apply(0)` is the first element of array `xs`.\n   *  Note the indexing syntax `xs(i)` is a shorthand for `xs.apply(i)`.\n   *\n   *  @param    i   the index\n   *  @return       the element at the given index\n   *  @throws       ArrayIndexOutOfBoundsException if `i \u003c 0` or `length \u003c\u003d i`\n   */\n  def apply(i: Int): T \u003d throw new Error()\n\n  /** Update the element at given index.\n   *\n   *  Indices start at `0`; `xs.update(i, x)` replaces the i^th^ element in the array.\n   *  Note the syntax `xs(i) \u003d x` is a shorthand for `xs.update(i, x)`.\n   *\n   *  @param    i   the index\n   *  @param    x   the value to be written at index `i`\n   *  @throws       ArrayIndexOutOfBoundsException if `i \u003c 0` or `length \u003c\u003d i`\n   */\n  def update(i: Int, x: T) { throw new Error() }\n\n  /** Clone the Array.\n   *\n   *  @return A clone of the Array.\n   */\n  override def clone(): Array[T] \u003d throw new Error()\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor25.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Predef.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 15 more

Nov 11, 2020 7:46:23 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Predef.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 15 more

2020.11.11 19:46:23 WARN  3 deprecations (since 2.13.0); re-run with -deprecation for details
2020.11.11 19:46:23 INFO  time: compiled task1-scala in 1.16s
Nov 11, 2020 7:46:24 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 570,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala"
    },
    "contentChanges": [
      {
        "text": "object T {\r\n  def main(args: Array[String]) \r\n    { \r\n        println(GenerateArray(50)mkString(\" \"));\r\n        println(SumArray(GenerateArray(50)));\r\n        println(RecursionSumArray(GenerateArray(50)));\r\n        println(Fib(9)); \r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n\r\n    def SumArray (arr : Array[Int]) : Int \u003d\r\n    {\r\n        var sum \u003d 0\r\n        for (i \u003c- 1 to arr.length) sum \u003d sum + arr(i-1)\r\n        sum\r\n    }\r\n\r\n    def RecursionSumArray (arr : Array[Int]) : Int \u003d\r\n    {\r\n        if (arr.length \u003d\u003d 1) arr.head else\r\n        arr.head + RecursionSumArray(arr.tail)\r\n    }\r\n\r\n\r\n    def Fib (n : BigInt) : BigInt \u003d\r\n    {\r\n        if (n \u003c 3) 1 else\r\n        Fib(n - 1) + Fib(n - 2)\r\n    }\r\n\r\n\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor13.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Predef.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

Nov 11, 2020 7:46:25 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 574,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala"
    },
    "contentChanges": [
      {
        "text": "object Task1 {\r\n  def main(args: Array[String]) \r\n    { \r\n        println(GenerateArray(50)mkString(\" \"));\r\n        println(SumArray(GenerateArray(50)));\r\n        println(RecursionSumArray(GenerateArray(50)));\r\n        println(Fib(9)); \r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n\r\n    def SumArray (arr : Array[Int]) : Int \u003d\r\n    {\r\n        var sum \u003d 0\r\n        for (i \u003c- 1 to arr.length) sum \u003d sum + arr(i-1)\r\n        sum\r\n    }\r\n\r\n    def RecursionSumArray (arr : Array[Int]) : Int \u003d\r\n    {\r\n        if (arr.length \u003d\u003d 1) arr.head else\r\n        arr.head + RecursionSumArray(arr.tail)\r\n    }\r\n\r\n\r\n    def Fib (n : BigInt) : BigInt \u003d\r\n    {\r\n        if (n \u003c 3) 1 else\r\n        Fib(n - 1) + Fib(n - 2)\r\n    }\r\n\r\n\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor13.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Predef.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

2020.11.11 19:46:26 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:46:26 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 19:46:26 INFO  time: compiled task1-scala in 0.74s
2020.11.11 19:48:27 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:48:27 INFO  time: compiled task1-scala in 50ms
2020.11.11 19:48:32 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:48:32 INFO  time: compiled task1-scala in 96ms
2020.11.11 19:48:37 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:48:37 INFO  time: compiled task1-scala in 84ms
2020.11.11 19:48:41 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:48:41 INFO  time: compiled task1-scala in 89ms
2020.11.11 19:48:43 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:48:43 WARN  2 deprecations (since 2.13.0); re-run with -deprecation for details
2020.11.11 19:48:43 INFO  time: compiled task1-scala in 0.6s
2020.11.11 19:48:53 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:48:53 WARN  2 deprecations (since 2.13.0); re-run with -deprecation for details
2020.11.11 19:48:53 INFO  time: compiled task1-scala in 0.62s
2020.11.11 19:49:42 INFO  shutting down Metals
2020.11.11 19:49:42 INFO  Shut down connection with build server.
2020.11.11 19:49:42 INFO  Shut down connection with build server.
No more data in the client stdin, exiting...
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
No more data in the server stdin, exiting...
No more data in the server stdin, exiting...
2020.11.11 19:49:55 INFO  Started: Metals version 0.9.5 in workspace 'C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala' for client vscode.
2020.11.11 19:49:56 INFO  time: initialize in 0.38s
2020.11.11 19:49:55 INFO  Attempting to connect to the build server...
2020.11.11 19:49:56 WARN  no build target for: C:\Users\aleks\Desktop\ProgLang\scala\tasks\task1.scala\src\main\scala\task2.scala
2020.11.11 19:49:56 INFO  skipping build import with status 'Installed'
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 17125'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:17125...
The server is listening for incoming connections at tcp://127.0.0.1:17125...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
2020.11.11 19:49:58 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\aleks\AppData\Local\scalameta\metals\cache\bsp.trace.json
2020.11.11 19:49:58 INFO  Attempting to connect to the build server...
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 42753'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:42753...
The server is listening for incoming connections at tcp://127.0.0.1:42753...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
2020.11.11 19:49:58 INFO  no build target: using presentation compiler with only scala-library
2020.11.11 19:49:59 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\aleks\AppData\Local\scalameta\metals\cache\bsp.trace.json
2020.11.11 19:49:59 INFO  time: connected to build server in 2.67s
2020.11.11 19:49:59 INFO  Connected to Build server v1.4.5-2-eb51d668
2020.11.11 19:50:00 WARN  Could not find java sources in None. Java symbols will not be available.
2020.11.11 19:50:00 INFO  time: indexed workspace in 1.46s
2020.11.11 19:52:10 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:52:10 INFO  time: compiled task1-scala in 0.13s
2020.11.11 19:52:35 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:52:35 INFO  Deduplicating compilation of task1-scala from bsp client 'Metals 0.9.5' (since 2m 37.313s)
2020.11.11 19:52:35 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:52:35 WARN  2 deprecations (since 2.13.0); re-run with -deprecation for details
2020.11.11 19:52:35 WARN  2 deprecations (since 2.13.0); re-run with -deprecation for details
2020.11.11 19:52:35 INFO  time: compiled task1-scala in 0.39s
2020.11.11 19:55:45 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:55:45 WARN  2 deprecations (since 2.13.0); re-run with -deprecation for details
2020.11.11 19:55:45 INFO  time: compiled task1-scala in 0.6s
2020.11.11 19:56:08 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:56:08 WARN  2 deprecations (since 2.13.0); re-run with -deprecation for details
2020.11.11 19:56:08 INFO  time: compiled task1-scala in 0.7s
2020.11.11 19:59:16 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:59:16 INFO  time: compiled task1-scala in 0.1s
2020.11.11 19:59:16 INFO  compiling task1-scala (1 scala source)
2020.11.11 19:59:16 INFO  time: compiled task1-scala in 70ms
2020.11.11 20:00:56 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:00:56 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:00:56 INFO  time: compiled task1-scala in 0.59s
2020.11.11 20:01:51 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:01:51 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:01:51 INFO  time: compiled task1-scala in 0.65s
2020.11.11 20:02:00 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:02:00 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:02:00 INFO  time: compiled task1-scala in 0.69s
2020.11.11 20:02:12 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:02:12 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:02:12 INFO  time: compiled task1-scala in 0.61s
2020.11.11 20:02:21 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:02:21 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:02:21 INFO  time: compiled task1-scala in 0.62s
Nov 11, 2020 8:02:52 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 16 more

Nov 11, 2020 8:02:52 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 583
Nov 11, 2020 8:02:52 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 586
Nov 11, 2020 8:02:52 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 588
Nov 11, 2020 8:02:52 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 113,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "object Task2 {\r\n  def main(args: Array[String]) \r\n    {\r\n       val thread \u003d threading(GenerateArray(10))\r\n       thread.start()\r\n       println(threadmkString(\" \"))\r\n    }\r\n\r\n    def threading(body: \u003d\u003eUnit): Thread \u003d \r\n    {\r\n        val t \u003d new Thread {override def run() \u003d body}\r\n        t\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

Nov 11, 2020 8:02:53 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 114,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "object Task2 {\r\n  def main(args: Array[String]) \r\n    {\r\n       val thread \u003d threading(GenerateArray(10))\r\n       thread.start()\r\n       println(thread)\r\n    }\r\n\r\n    def threading(body: \u003d\u003eUnit): Thread \u003d \r\n    {\r\n        val t \u003d new Thread {override def run() \u003d body}\r\n        t\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

Nov 11, 2020 8:02:53 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Unit.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\n// DO NOT EDIT, CHANGES WILL BE LOST\n// This auto-generated code can be modified in \"project/GenerateAnyVals.scala\".\n// Afterwards, running \"sbt generateSources\" regenerates this source file.\n\npackage scala\n\n\n/** `Unit` is a subtype of [[scala.AnyVal]]. There is only one value of type\n *  `Unit`, `()`, and it is not represented by any object in the underlying\n *  runtime system. A method with return type `Unit` is analogous to a Java\n *  method which is declared `void`.\n */\nfinal abstract class Unit private extends AnyVal {\n  // Provide a more specific return type for Scaladoc\n  override def getClass(): Class[Unit] \u003d ???\n}\n\nobject Unit extends AnyValCompanion {\n\n  /** Transform a value type into a boxed reference type.\n   *\n   *  @param  x   the Unit to be boxed\n   *  @return     a scala.runtime.BoxedUnit offering `x` as its underlying value.\n   */\n  def box(x: Unit): scala.runtime.BoxedUnit \u003d scala.runtime.BoxedUnit.UNIT\n\n  /** Transform a boxed type into a value type.  Note that this\n   *  method is not typesafe: it accepts any Object, but will throw\n   *  an exception if the argument is not a scala.runtime.BoxedUnit.\n   *\n   *  @param  x   the scala.runtime.BoxedUnit to be unboxed.\n   *  @throws     ClassCastException  if the argument is not a scala.runtime.BoxedUnit\n   *  @return     the Unit value ()\n   */\n  def unbox(x: java.lang.Object): Unit \u003d x.asInstanceOf[scala.runtime.BoxedUnit]\n\n  /** The String representation of the scala.Unit companion object. */\n  override def toString \u003d \"object scala.Unit\"\n}\n\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

Nov 11, 2020 8:02:54 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Array.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\npackage scala\n\nimport scala.collection.generic._\nimport scala.collection.{ mutable, immutable }\nimport mutable.{ ArrayBuilder, ArraySeq }\nimport scala.reflect.ClassTag\nimport scala.runtime.ScalaRunTime.{ array_apply, array_update }\n\n/** Contains a fallback builder for arrays when the element type\n *  does not have a class tag. In that case a generic array is built.\n */\nclass FallbackArrayBuilding {\n\n  /** A builder factory that generates a generic array.\n   *  Called instead of `Array.newBuilder` if the element type of an array\n   *  does not have a class tag. Note that fallbackBuilder factory\n   *  needs an implicit parameter (otherwise it would not be dominated in\n   *  implicit search by `Array.canBuildFrom`). We make sure that\n   *  implicit search is always successful.\n   */\n  implicit def fallbackCanBuildFrom[T](implicit m: DummyImplicit): CanBuildFrom[Array[_], T, ArraySeq[T]] \u003d\n    new CanBuildFrom[Array[_], T, ArraySeq[T]] {\n      def apply(from: Array[_]) \u003d ArraySeq.newBuilder[T]\n      def apply() \u003d ArraySeq.newBuilder[T]\n    }\n}\n\n/** Utility methods for operating on arrays.\n *  For example:\n *  {{{\n *  val a \u003d Array(1, 2)\n *  val b \u003d Array.ofDim[Int](2)\n *  val c \u003d Array.concat(a, b)\n *  }}}\n *  where the array objects `a`, `b` and `c` have respectively the values\n *  `Array(1, 2)`, `Array(0, 0)` and `Array(1, 2, 0, 0)`.\n *\n *  @author Martin Odersky\n *  @since  1.0\n */\nobject Array extends FallbackArrayBuilding {\n  val emptyBooleanArray \u003d new Array[Boolean](0)\n  val emptyByteArray    \u003d new Array[Byte](0)\n  val emptyCharArray    \u003d new Array[Char](0)\n  val emptyDoubleArray  \u003d new Array[Double](0)\n  val emptyFloatArray   \u003d new Array[Float](0)\n  val emptyIntArray     \u003d new Array[Int](0)\n  val emptyLongArray    \u003d new Array[Long](0)\n  val emptyShortArray   \u003d new Array[Short](0)\n  val emptyObjectArray  \u003d new Array[Object](0)\n\n  implicit def canBuildFrom[T](implicit tag: ClassTag[T]): CanBuildFrom[Array[_], T, Array[T]] \u003d {\n    val cls \u003d tag.runtimeClass\n    (if (cls.isPrimitive) {\n      cls match {\n        case java.lang.Integer.TYPE   \u003d\u003e cbfIntArray\n        case java.lang.Double.TYPE    \u003d\u003e cbfDoubleArray\n        case java.lang.Long.TYPE      \u003d\u003e cbfLongArray\n        case java.lang.Float.TYPE     \u003d\u003e cbfFloatArray\n        case java.lang.Character.TYPE \u003d\u003e cbfCharArray\n        case java.lang.Byte.TYPE      \u003d\u003e cbfByteArray\n        case java.lang.Short.TYPE     \u003d\u003e cbfShortArray\n        case java.lang.Boolean.TYPE   \u003d\u003e cbfBooleanArray\n        case java.lang.Void.TYPE      \u003d\u003e cbfUnitArray\n      }\n    } else if (cls \u003d\u003d ObjectClass) {\n      cbfObjectArray\n    } else {\n      refCBF[T with AnyRef](tag.asInstanceOf[ClassTag[T with AnyRef]])\n    }).asInstanceOf[CanBuildFrom[Array[_], T, Array[T]]]\n  }\n  private[this] val ObjectClass \u003d classOf[Object]\n\n  private[this] val cbfBooleanArray \u003d new CanBuildFrom[Array[_], Boolean, Array[Boolean]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofBoolean()\n    def apply() \u003d new ArrayBuilder.ofBoolean()\n  }\n\n  private[this] val cbfByteArray    \u003d new CanBuildFrom[Array[_], Byte, Array[Byte]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofByte()\n    def apply() \u003d new ArrayBuilder.ofByte()\n  }\n\n  private[this] val cbfCharArray    \u003d new CanBuildFrom[Array[_], Char, Array[Char]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofChar()\n    def apply() \u003d new ArrayBuilder.ofChar()\n  }\n\n  private[this] val cbfDoubleArray  \u003d new CanBuildFrom[Array[_], Double, Array[Double]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofDouble()\n    def apply() \u003d new ArrayBuilder.ofDouble()\n  }\n\n  private[this] val cbfFloatArray   \u003d new CanBuildFrom[Array[_], Float, Array[Float]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofFloat()\n    def apply() \u003d new ArrayBuilder.ofFloat()\n  }\n\n  private[this] val cbfIntArray     \u003d new CanBuildFrom[Array[_], Int, Array[Int]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofInt()\n    def apply() \u003d new ArrayBuilder.ofInt()\n  }\n\n  private[this] val cbfLongArray    \u003d new CanBuildFrom[Array[_], Long, Array[Long]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofLong()\n    def apply() \u003d new ArrayBuilder.ofLong()\n  }\n\n  private[this] val cbfShortArray   \u003d new CanBuildFrom[Array[_], Short, Array[Short]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofShort()\n    def apply() \u003d new ArrayBuilder.ofShort()\n  }\n\n  private[this] val cbfUnitArray    \u003d new CanBuildFrom[Array[_], Unit, Array[Unit]] {\n    def apply(from: Array[_]) \u003d new ArrayBuilder.ofUnit()\n    def apply() \u003d new ArrayBuilder.ofUnit()\n  }\n\n  private[this] val cbfObjectArray  \u003d refCBF[Object]\n  private[this] def refCBF[T \u003c: AnyRef](implicit t: ClassTag[T]): CanBuildFrom[Array[_], T, Array[T]] \u003d\n    new CanBuildFrom[Array[_], T, Array[T]] {\n      def apply(from: Array[_]) \u003d new ArrayBuilder.ofRef[T]()(t)\n      def apply() \u003d new ArrayBuilder.ofRef[T]()(t)\n    }\n\n  /**\n   * Returns a new [[scala.collection.mutable.ArrayBuilder]].\n   */\n  def newBuilder[T](implicit t: ClassTag[T]): ArrayBuilder[T] \u003d ArrayBuilder.make[T]()(t)\n\n  private def slowcopy(src : AnyRef,\n                       srcPos : Int,\n                       dest : AnyRef,\n                       destPos : Int,\n                       length : Int) {\n    var i \u003d srcPos\n    var j \u003d destPos\n    val srcUntil \u003d srcPos + length\n    while (i \u003c srcUntil) {\n      array_update(dest, j, array_apply(src, i))\n      i +\u003d 1\n      j +\u003d 1\n    }\n  }\n\n  /** Copy one array to another.\n   *  Equivalent to Java\u0027s\n   *    `System.arraycopy(src, srcPos, dest, destPos, length)`,\n   *  except that this also works for polymorphic and boxed arrays.\n   *\n   *  Note that the passed-in `dest` array will be modified by this call.\n   *\n   *  @param src the source array.\n   *  @param srcPos  starting position in the source array.\n   *  @param dest destination array.\n   *  @param destPos starting position in the destination array.\n   *  @param length the number of array elements to be copied.\n   *\n   *  @see `java.lang.System#arraycopy`\n   */\n  def copy(src: AnyRef, srcPos: Int, dest: AnyRef, destPos: Int, length: Int) {\n    val srcClass \u003d src.getClass\n    if (srcClass.isArray \u0026\u0026 dest.getClass.isAssignableFrom(srcClass))\n      java.lang.System.arraycopy(src, srcPos, dest, destPos, length)\n    else\n      slowcopy(src, srcPos, dest, destPos, length)\n  }\n\n  /** Returns an array of length 0 */\n  def empty[T: ClassTag]: Array[T] \u003d new Array[T](0)\n\n  /** Creates an array with given elements.\n   *\n   *  @param xs the elements to put in the array\n   *  @return an array containing all elements from xs.\n   */\n  // Subject to a compiler optimization in Cleanup.\n  // Array(e0, ..., en) is translated to { val a \u003d new Array(3); a(i) \u003d ei; a }\n  def apply[T: ClassTag](xs: T*): Array[T] \u003d {\n    val array \u003d new Array[T](xs.length)\n    var i \u003d 0\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Boolean` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Boolean, xs: Boolean*): Array[Boolean] \u003d {\n    val array \u003d new Array[Boolean](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Byte` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Byte, xs: Byte*): Array[Byte] \u003d {\n    val array \u003d new Array[Byte](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Short` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Short, xs: Short*): Array[Short] \u003d {\n    val array \u003d new Array[Short](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Char` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Char, xs: Char*): Array[Char] \u003d {\n    val array \u003d new Array[Char](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Int` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Int, xs: Int*): Array[Int] \u003d {\n    val array \u003d new Array[Int](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Long` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Long, xs: Long*): Array[Long] \u003d {\n    val array \u003d new Array[Long](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Float` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Float, xs: Float*): Array[Float] \u003d {\n    val array \u003d new Array[Float](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Double` objects */\n  // Subject to a compiler optimization in Cleanup, see above.\n  def apply(x: Double, xs: Double*): Array[Double] \u003d {\n    val array \u003d new Array[Double](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates an array of `Unit` objects */\n  def apply(x: Unit, xs: Unit*): Array[Unit] \u003d {\n    val array \u003d new Array[Unit](xs.length + 1)\n    array(0) \u003d x\n    var i \u003d 1\n    for (x \u003c- xs.iterator) { array(i) \u003d x; i +\u003d 1 }\n    array\n  }\n\n  /** Creates array with given dimensions */\n  def ofDim[T: ClassTag](n1: Int): Array[T] \u003d\n    new Array[T](n1)\n  /** Creates a 2-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int): Array[Array[T]] \u003d {\n    val arr: Array[Array[T]] \u003d (new Array[Array[T]](n1): Array[Array[T]])\n    for (i \u003c- 0 until n1) arr(i) \u003d new Array[T](n2)\n    arr\n    // tabulate(n1)(_ \u003d\u003e ofDim[T](n2))\n  }\n  /** Creates a 3-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int): Array[Array[Array[T]]] \u003d\n    tabulate(n1)(_ \u003d\u003e ofDim[T](n2, n3))\n  /** Creates a 4-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int): Array[Array[Array[Array[T]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e ofDim[T](n2, n3, n4))\n  /** Creates a 5-dimensional array */\n  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int): Array[Array[Array[Array[Array[T]]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e ofDim[T](n2, n3, n4, n5))\n\n  /** Concatenates all arrays into a single array.\n   *\n   *  @param xss the given arrays\n   *  @return   the array created from concatenating `xss`\n   */\n  def concat[T: ClassTag](xss: Array[T]*): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n    b.sizeHint(xss.map(_.length).sum)\n    for (xs \u003c- xss) b ++\u003d xs\n    b.result()\n  }\n\n  /** Returns an array that contains the results of some element computation a number\n   *  of times.\n   *\n   *  Note that this means that `elem` is computed a total of n times:\n   *  {{{\n   * scala\u003e Array.fill(3){ math.random }\n   * res3: Array[Double] \u003d Array(0.365461167592537, 1.550395944913685E-4, 0.7907242137333306)\n   *  }}}\n   *\n   *  @param   n  the number of elements desired\n   *  @param   elem the element computation\n   *  @return an Array of size n, where each element contains the result of computing\n   *  `elem`.\n   */\n  def fill[T: ClassTag](n: Int)(elem: \u003d\u003e T): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n    b.sizeHint(n)\n    var i \u003d 0\n    while (i \u003c n) {\n      b +\u003d elem\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  /** Returns a two-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int)(elem: \u003d\u003e T): Array[Array[T]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2)(elem))\n\n  /** Returns a three-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3nd dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int)(elem: \u003d\u003e T): Array[Array[Array[T]]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2, n3)(elem))\n\n  /** Returns a four-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3nd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int)(elem: \u003d\u003e T): Array[Array[Array[Array[T]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2, n3, n4)(elem))\n\n  /** Returns a five-dimensional array that contains the results of some element\n   *  computation a number of times.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3nd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   n5  the number of elements in the 5th dimension\n   *  @param   elem the element computation\n   */\n  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(elem: \u003d\u003e T): Array[Array[Array[Array[Array[T]]]]] \u003d\n    tabulate(n1)(_ \u003d\u003e fill(n2, n3, n4, n5)(elem))\n\n  /** Returns an array containing values of a given function over a range of integer\n   *  values starting from 0.\n   *\n   *  @param  n   The number of elements in the array\n   *  @param  f   The function computing element values\n   *  @return A traversable consisting of elements `f(0),f(1), ..., f(n - 1)`\n   */\n  def tabulate[T: ClassTag](n: Int)(f: Int \u003d\u003e T): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n    b.sizeHint(n)\n    var i \u003d 0\n    while (i \u003c n) {\n      b +\u003d f(i)\n      i +\u003d 1\n    }\n    b.result()\n  }\n\n  /** Returns a two-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int)(f: (Int, Int) \u003d\u003e T): Array[Array[T]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2)(f(i1, _)))\n\n  /** Returns a three-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3rd dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int)(f: (Int, Int, Int) \u003d\u003e T): Array[Array[Array[T]]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2, n3)(f(i1, _, _)))\n\n  /** Returns a four-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3rd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int)(f: (Int, Int, Int, Int) \u003d\u003e T): Array[Array[Array[Array[T]]]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2, n3, n4)(f(i1, _, _, _)))\n\n  /** Returns a five-dimensional array containing values of a given function\n   *  over ranges of integer values starting from `0`.\n   *\n   *  @param   n1  the number of elements in the 1st dimension\n   *  @param   n2  the number of elements in the 2nd dimension\n   *  @param   n3  the number of elements in the 3rd dimension\n   *  @param   n4  the number of elements in the 4th dimension\n   *  @param   n5  the number of elements in the 5th dimension\n   *  @param   f   The function computing element values\n   */\n  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(f: (Int, Int, Int, Int, Int) \u003d\u003e T): Array[Array[Array[Array[Array[T]]]]] \u003d\n    tabulate(n1)(i1 \u003d\u003e tabulate(n2, n3, n4, n5)(f(i1, _, _, _, _)))\n\n  /** Returns an array containing a sequence of increasing integers in a range.\n   *\n   *  @param start  the start value of the array\n   *  @param end    the end value of the array, exclusive (in other words, this is the first value \u0027\u0027\u0027not\u0027\u0027\u0027 returned)\n   *  @return  the array with values in range `start, start + 1, ..., end - 1`\n   *  up to, but excluding, `end`.\n   */\n  def range(start: Int, end: Int): Array[Int] \u003d range(start, end, 1)\n\n  /** Returns an array containing equally spaced values in some integer interval.\n   *\n   *  @param start the start value of the array\n   *  @param end   the end value of the array, exclusive (in other words, this is the first value \u0027\u0027\u0027not\u0027\u0027\u0027 returned)\n   *  @param step  the increment value of the array (may not be zero)\n   *  @return      the array with values in `start, start + step, ...` up to, but excluding `end`\n   */\n  def range(start: Int, end: Int, step: Int): Array[Int] \u003d {\n    if (step \u003d\u003d 0) throw new IllegalArgumentException(\"zero step\")\n    val b \u003d newBuilder[Int]\n    b.sizeHint(immutable.Range.count(start, end, step, isInclusive \u003d false))\n\n    var i \u003d start\n    while (if (step \u003c 0) end \u003c i else i \u003c end) {\n      b +\u003d i\n      i +\u003d step\n    }\n    b.result()\n  }\n\n  /** Returns an array containing repeated applications of a function to a start value.\n   *\n   *  @param start the start value of the array\n   *  @param len   the number of elements returned by the array\n   *  @param f     the function that is repeatedly applied\n   *  @return      the array returning `len` values in the sequence `start, f(start), f(f(start)), ...`\n   */\n  def iterate[T: ClassTag](start: T, len: Int)(f: T \u003d\u003e T): Array[T] \u003d {\n    val b \u003d newBuilder[T]\n\n    if (len \u003e 0) {\n      b.sizeHint(len)\n      var acc \u003d start\n      var i \u003d 1\n      b +\u003d acc\n\n      while (i \u003c len) {\n        acc \u003d f(acc)\n        i +\u003d 1\n        b +\u003d acc\n      }\n    }\n    b.result()\n  }\n\n  /** Called in a pattern match like `{ case Array(x,y,z) \u003d\u003e println(\u00273 elements\u0027)}`.\n   *\n   *  @param x the selector value\n   *  @return  sequence wrapped in a [[scala.Some]], if `x` is a Seq, otherwise `None`\n   */\n  def unapplySeq[T](x: Array[T]): Option[IndexedSeq[T]] \u003d\n    if (x \u003d\u003d null) None else Some(x.toIndexedSeq)\n    // !!! the null check should to be necessary, but without it 2241 fails. Seems to be a bug\n    // in pattern matcher.  @PP: I noted in #4364 I think the behavior is correct.\n}\n\n/** Arrays are mutable, indexed collections of values. `Array[T]` is Scala\u0027s representation\n *  for Java\u0027s `T[]`.\n *\n *  {{{\n *  val numbers \u003d Array(1, 2, 3, 4)\n *  val first \u003d numbers(0) // read the first element\n *  numbers(3) \u003d 100 // replace the 4th array element with 100\n *  val biggerNumbers \u003d numbers.map(_ * 2) // multiply all numbers by two\n *  }}}\n *\n *  Arrays make use of two common pieces of Scala syntactic sugar, shown on lines 2 and 3 of the above\n *  example code.\n *  Line 2 is translated into a call to `apply(Int)`, while line 3 is translated into a call to\n *  `update(Int, T)`.\n *\n *  Two implicit conversions exist in [[scala.Predef]] that are frequently applied to arrays: a conversion\n *  to [[scala.collection.mutable.ArrayOps]] (shown on line 4 of the example above) and a conversion\n *  to [[scala.collection.mutable.WrappedArray]] (a subtype of [[scala.collection.Seq]]).\n *  Both types make available many of the standard operations found in the Scala collections API.\n *  The conversion to `ArrayOps` is temporary, as all operations defined on `ArrayOps` return an `Array`,\n *  while the conversion to `WrappedArray` is permanent as all operations return a `WrappedArray`.\n *\n *  The conversion to `ArrayOps` takes priority over the conversion to `WrappedArray`. For instance,\n *  consider the following code:\n *\n *  {{{\n *  val arr \u003d Array(1, 2, 3)\n *  val arrReversed \u003d arr.reverse\n *  val seqReversed : Seq[Int] \u003d arr.reverse\n *  }}}\n *\n *  Value `arrReversed` will be of type `Array[Int]`, with an implicit conversion to `ArrayOps` occurring\n *  to perform the `reverse` operation. The value of `seqReversed`, on the other hand, will be computed\n *  by converting to `WrappedArray` first and invoking the variant of `reverse` that returns another\n *  `WrappedArray`.\n *\n *  @author Martin Odersky\n *  @since  1.0\n *  @see [[http://www.scala-lang.org/files/archive/spec/2.12/ Scala Language Specification]], for in-depth information on the transformations the Scala compiler makes on Arrays (Sections 6.6 and 6.15 respectively.)\n *  @see [[http://docs.scala-lang.org/sips/completed/scala-2-8-arrays.html \"Scala 2.8 Arrays\"]] the Scala Improvement Document detailing arrays since Scala 2.8.\n *  @see [[http://docs.scala-lang.org/overviews/collections/arrays.html \"The Scala 2.8 Collections\u0027 API\"]] section on `Array` by Martin Odersky for more information.\n *  @hideImplicitConversion scala.Predef.booleanArrayOps\n *  @hideImplicitConversion scala.Predef.byteArrayOps\n *  @hideImplicitConversion scala.Predef.charArrayOps\n *  @hideImplicitConversion scala.Predef.doubleArrayOps\n *  @hideImplicitConversion scala.Predef.floatArrayOps\n *  @hideImplicitConversion scala.Predef.intArrayOps\n *  @hideImplicitConversion scala.Predef.longArrayOps\n *  @hideImplicitConversion scala.Predef.refArrayOps\n *  @hideImplicitConversion scala.Predef.shortArrayOps\n *  @hideImplicitConversion scala.Predef.unitArrayOps\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapRefArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapIntArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapDoubleArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapLongArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapFloatArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapCharArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapByteArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapShortArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapBooleanArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.wrapUnitArray\n *  @hideImplicitConversion scala.LowPriorityImplicits.genericWrapArray\n *  @define coll array\n *  @define Coll `Array`\n *  @define orderDependent\n *  @define orderDependentFold\n *  @define mayNotTerminateInf\n *  @define willNotTerminateInf\n *  @define collectExample\n *  @define undefinedorder\n *  @define thatinfo the class of the returned collection. In the standard library configuration,\n *    `That` is either `Array[B]` if an ClassTag is available for B or `ArraySeq[B]` otherwise.\n *  @define zipthatinfo $thatinfo\n *  @define bfinfo an implicit value of class `CanBuildFrom` which determines the result class `That` from the current\n *    representation type `Repr` and the new element type `B`.\n */\nfinal class Array[T](_length: Int) extends java.io.Serializable with java.lang.Cloneable {\n\n  /** The length of the array */\n  def length: Int \u003d throw new Error()\n\n  /** The element at given index.\n   *\n   *  Indices start at `0`; `xs.apply(0)` is the first element of array `xs`.\n   *  Note the indexing syntax `xs(i)` is a shorthand for `xs.apply(i)`.\n   *\n   *  @param    i   the index\n   *  @return       the element at the given index\n   *  @throws       ArrayIndexOutOfBoundsException if `i \u003c 0` or `length \u003c\u003d i`\n   */\n  def apply(i: Int): T \u003d throw new Error()\n\n  /** Update the element at given index.\n   *\n   *  Indices start at `0`; `xs.update(i, x)` replaces the i^th^ element in the array.\n   *  Note the syntax `xs(i) \u003d x` is a shorthand for `xs.update(i, x)`.\n   *\n   *  @param    i   the index\n   *  @param    x   the value to be written at index `i`\n   *  @throws       ArrayIndexOutOfBoundsException if `i \u003c 0` or `length \u003c\u003d i`\n   */\n  def update(i: Int, x: T) { throw new Error() }\n\n  /** Clone the Array.\n   *\n   *  @return A clone of the Array.\n   */\n  override def clone(): Array[T] \u003d throw new Error()\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

something's wrong: no file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala in Array[String]RangePosition(file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala, 33, 33, 46)
Nov 11, 2020 8:02:55 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 16 more

Nov 11, 2020 8:02:57 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 16 more

Nov 11, 2020 8:02:58 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 117,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "object Task2 {\r\n  def main(args: Array[String]) \r\n    {\r\n       val thread \u003d threading(GenerateArray(10))\r\n       thread.start()\r\n       println(thread.)\r\n    }\r\n\r\n    def threading(body: \u003d\u003eUnit): Thread \u003d \r\n    {\r\n        val t \u003d new Thread {override def run() \u003d body}\r\n        t\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

Nov 11, 2020 8:02:58 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 118,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "object Task2 {\r\n  def main(args: Array[String]) \r\n    {\r\n       val thread \u003d threading(GenerateArray(10))\r\n       thread.start()\r\n       println(thread.mkString(\" \"))\r\n    }\r\n\r\n    def threading(body: \u003d\u003eUnit): Thread \u003d \r\n    {\r\n        val t \u003d new Thread {override def run() \u003d body}\r\n        t\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

2020.11.11 20:02:59 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:02:59 INFO  time: compiled task1-scala in 0.11s
Nov 11, 2020 8:03:01 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 119,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "object Task2 {\r\n  def main(args: Array[String]) \r\n    {\r\n       val thread \u003d threading(GenerateArray(10))\r\n       thread.start()\r\n       println(threadmkString(\" \"))\r\n    }\r\n\r\n    def threading(body: \u003d\u003eUnit): Thread \u003d \r\n    {\r\n        val t \u003d new Thread {override def run() \u003d body}\r\n        t\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

2020.11.11 20:03:01 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:03:01 INFO  time: compiled task1-scala in 90ms
Nov 11, 2020 8:03:04 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 120,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "object Task2 {\r\n  def main(args: Array[String]) \r\n    {\r\n       val thread \u003d threading(GenerateArray(10))\r\n       thread.start()\r\n       println(thread.mkString(\" \"))\r\n    }\r\n\r\n    def threading(body: \u003d\u003eUnit): Thread \u003d \r\n    {\r\n        val t \u003d new Thread {override def run() \u003d body}\r\n        t\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

2020.11.11 20:03:04 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:03:04 INFO  time: compiled task1-scala in 99ms
Nov 11, 2020 8:03:07 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 121,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "object Task2 {\r\n  def main(args: Array[String]) \r\n    {\r\n       val thread \u003d threading(GenerateArray(10))\r\n       thread.start()\r\n       println(thread.)\r\n    }\r\n\r\n    def threading(body: \u003d\u003eUnit): Thread \u003d \r\n    {\r\n        val t \u003d new Thread {override def run() \u003d body}\r\n        t\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

Nov 11, 2020 8:03:08 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 122,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "object Task2 {\r\n  def main(args: Array[String]) \r\n    {\r\n       val thread \u003d threading(GenerateArray(10))\r\n       thread.start()\r\n       println(thread.t)\r\n    }\r\n\r\n    def threading(body: \u003d\u003eUnit): Thread \u003d \r\n    {\r\n        val t \u003d new Thread {override def run() \u003d body}\r\n        t\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

Nov 11, 2020 8:03:09 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 123,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "object Task2 {\r\n  def main(args: Array[String]) \r\n    {\r\n       val thread \u003d threading(GenerateArray(10))\r\n       thread.start()\r\n       println(thread.to)\r\n    }\r\n\r\n    def threading(body: \u003d\u003eUnit): Thread \u003d \r\n    {\r\n        val t \u003d new Thread {override def run() \u003d body}\r\n        t\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

Nov 11, 2020 8:03:09 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 124,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "object Task2 {\r\n  def main(args: Array[String]) \r\n    {\r\n       val thread \u003d threading(GenerateArray(10))\r\n       thread.start()\r\n       println(thread.toString())\r\n    }\r\n\r\n    def threading(body: \u003d\u003eUnit): Thread \u003d \r\n    {\r\n        val t \u003d new Thread {override def run() \u003d body}\r\n        t\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/collection/IterableOnce.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

2020.11.11 20:03:09 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:03:09 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:03:09 INFO  time: compiled task1-scala in 0.59s
2020.11.11 20:04:07 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:04:07 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:04:07 INFO  time: compiled task1-scala in 0.59s
2020.11.11 20:04:14 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:04:14 INFO  time: compiled task1-scala in 55ms
Nov 11, 2020 8:04:16 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Unit.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\n// DO NOT EDIT, CHANGES WILL BE LOST\n// This auto-generated code can be modified in \"project/GenerateAnyVals.scala\".\n// Afterwards, running \"sbt generateSources\" regenerates this source file.\n\npackage scala\n\n\n/** `Unit` is a subtype of [[scala.AnyVal]]. There is only one value of type\n *  `Unit`, `()`, and it is not represented by any object in the underlying\n *  runtime system. A method with return type `Unit` is analogous to a Java\n *  method which is declared `void`.\n */\nfinal abstract class Unit private extends AnyVal {\n  // Provide a more specific return type for Scaladoc\n  override def getClass(): Class[Unit] \u003d ???\n}\n\nobject Unit extends AnyValCompanion {\n\n  /** Transform a value type into a boxed reference type.\n   *\n   *  @param  x   the Unit to be boxed\n   *  @return     a scala.runtime.BoxedUnit offering `x` as its underlying value.\n   */\n  def box(x: Unit): scala.runtime.BoxedUnit \u003d scala.runtime.BoxedUnit.UNIT\n\n  /** Transform a boxed type into a value type.  Note that this\n   *  method is not typesafe: it accepts any Object, but will throw\n   *  an exception if the argument is not a scala.runtime.BoxedUnit.\n   *\n   *  @param  x   the scala.runtime.BoxedUnit to be unboxed.\n   *  @throws     ClassCastException  if the argument is not a scala.runtime.BoxedUnit\n   *  @return     the Unit value ()\n   */\n  def unbox(x: java.lang.Object): Unit \u003d x.asInstanceOf[scala.runtime.BoxedUnit]\n\n  /** The String representation of the scala.Unit companion object. */\n  override def toString \u003d \"object scala.Unit\"\n}\n\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Unit.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

Nov 11, 2020 8:04:16 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Unit.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\n// DO NOT EDIT, CHANGES WILL BE LOST\n// This auto-generated code can be modified in \"project/GenerateAnyVals.scala\".\n// Afterwards, running \"sbt generateSources\" regenerates this source file.\n\npackage scala\n\n\n/** `Unit` is a subtype of [[scala.AnyVal]]. There is only one value of type\n *  `Unit`, `()`, and it is not represented by any object in the underlying\n *  runtime system. A method with return type `Unit` is analogous to a Java\n *  method which is declared `void`.\n */\nfinal abstract class Unit private extends AnyVal {\n  // Provide a more specific return type for Scaladoc\n  override def getClass(): Class[Unit] \u003d ???\n}\n\nobject Unit extends AnyValCompanion {\n\n  /** Transform a value type into a boxed reference type.\n   *\n   *  @param  x   the Unit to be boxed\n   *  @return     a scala.runtime.BoxedUnit offering `x` as its underlying value.\n   */\n  def box(x: Unit): scala.runtime.BoxedUnit \u003d scala.runtime.BoxedUnit.UNIT\n\n  /** Transform a boxed type into a value type.  Note that this\n   *  method is not typesafe: it accepts any Object, but will throw\n   *  an exception if the argument is not a scala.runtime.BoxedUnit.\n   *\n   *  @param  x   the scala.runtime.BoxedUnit to be unboxed.\n   *  @throws     ClassCastException  if the argument is not a scala.runtime.BoxedUnit\n   *  @return     the Unit value ()\n   */\n  def unbox(x: java.lang.Object): Unit \u003d x.asInstanceOf[scala.runtime.BoxedUnit]\n\n  /** The String representation of the scala.Unit companion object. */\n  override def toString \u003d \"object scala.Unit\"\n}\n\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Unit.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

2020.11.11 20:04:23 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:04:23 INFO  time: compiled task1-scala in 47ms
2020.11.11 20:04:23 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:04:23 INFO  time: compiled task1-scala in 29ms
2020.11.11 20:04:33 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:04:33 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:04:33 INFO  time: compiled task1-scala in 0.57s
2020.11.11 20:04:38 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:04:38 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:04:38 INFO  time: compiled task1-scala in 0.58s
2020.11.11 20:04:46 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:04:46 INFO  time: compiled task1-scala in 0.12s
2020.11.11 20:04:49 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:04:49 INFO  time: compiled task1-scala in 79ms
2020.11.11 20:04:58 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:04:58 INFO  time: compiled task1-scala in 81ms
2020.11.11 20:05:06 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:05:06 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:05:06 INFO  time: compiled task1-scala in 0.6s
2020.11.11 20:05:18 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:05:18 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:05:18 INFO  time: compiled task1-scala in 0.57s
2020.11.11 20:05:48 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:05:48 INFO  time: compiled task1-scala in 98ms
2020.11.11 20:06:01 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:06:01 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:06:01 INFO  time: compiled task1-scala in 0.72s
Nov 11, 2020 8:06:26 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Unit.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\n// DO NOT EDIT, CHANGES WILL BE LOST\n// This auto-generated code can be modified in \"project/GenerateAnyVals.scala\".\n// Afterwards, running \"sbt generateSources\" regenerates this source file.\n\npackage scala\n\n\n/** `Unit` is a subtype of [[scala.AnyVal]]. There is only one value of type\n *  `Unit`, `()`, and it is not represented by any object in the underlying\n *  runtime system. A method with return type `Unit` is analogous to a Java\n *  method which is declared `void`.\n */\nfinal abstract class Unit private extends AnyVal {\n  // Provide a more specific return type for Scaladoc\n  override def getClass(): Class[Unit] \u003d ???\n}\n\nobject Unit extends AnyValCompanion {\n\n  /** Transform a value type into a boxed reference type.\n   *\n   *  @param  x   the Unit to be boxed\n   *  @return     a scala.runtime.BoxedUnit offering `x` as its underlying value.\n   */\n  def box(x: Unit): scala.runtime.BoxedUnit \u003d scala.runtime.BoxedUnit.UNIT\n\n  /** Transform a boxed type into a value type.  Note that this\n   *  method is not typesafe: it accepts any Object, but will throw\n   *  an exception if the argument is not a scala.runtime.BoxedUnit.\n   *\n   *  @param  x   the scala.runtime.BoxedUnit to be unboxed.\n   *  @throws     ClassCastException  if the argument is not a scala.runtime.BoxedUnit\n   *  @return     the Unit value ()\n   */\n  def unbox(x: java.lang.Object): Unit \u003d x.asInstanceOf[scala.runtime.BoxedUnit]\n\n  /** The String representation of the scala.Unit companion object. */\n  override def toString \u003d \"object scala.Unit\"\n}\n\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Unit.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

2020.11.11 20:06:33 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:06:33 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:06:33 INFO  time: compiled task1-scala in 0.44s
2020.11.11 20:07:02 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:07:02 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:07:02 INFO  time: compiled task1-scala in 0.62s
2020.11.11 20:08:23 INFO  compiling task1-scala (1 scala source)
Nov 11, 2020 8:08:24 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\n// DO NOT EDIT, CHANGES WILL BE LOST\n// This auto-generated code can be modified in \"project/GenerateAnyVals.scala\".\n// Afterwards, running \"sbt generateSources\" regenerates this source file.\n\npackage scala\n\n/** `Int`, a 32-bit signed integer (equivalent to Java\u0027s `int` primitive type) is a\n *  subtype of [[scala.AnyVal]]. Instances of `Int` are not\n *  represented by an object in the underlying runtime system.\n *\n *  There is an implicit conversion from [[scala.Int]] \u003d\u003e [[scala.runtime.RichInt]]\n *  which provides useful non-primitive operations.\n */\nfinal abstract class Int private extends AnyVal {\n  def toByte: Byte\n  def toShort: Short\n  def toChar: Char\n  def toInt: Int\n  def toLong: Long\n  def toFloat: Float\n  def toDouble: Double\n\n  /**\n * Returns the bitwise negation of this value.\n * @example {{{\n * ~5 \u003d\u003d -6\n * // in binary: ~00000101 \u003d\u003d\n * //             11111010\n * }}}\n */\n  def unary_~ : Int\n  /** Returns this value, unmodified. */\n  def unary_+ : Int\n  /** Returns the negation of this value. */\n  def unary_- : Int\n\n  def +(x: String): String\n\n  /**\n  * Returns this value bit-shifted left by the specified number of bits,\n  *         filling in the new right bits with zeroes.\n  * @example {{{ 6 \u003c\u003c 3 \u003d\u003d 48 // in binary: 0110 \u003c\u003c 3 \u003d\u003d 0110000 }}}\n  */\n  def \u003c\u003c(x: Int): Int\n  /**\n  * Returns this value bit-shifted left by the specified number of bits,\n  *         filling in the new right bits with zeroes.\n  * @example {{{ 6 \u003c\u003c 3 \u003d\u003d 48 // in binary: 0110 \u003c\u003c 3 \u003d\u003d 0110000 }}}\n  */\n  @deprecated(\"shifting a value by a `Long` argument is deprecated (except when the value is a `Long`).\\nCall `toInt` on the argument to maintain the current behavior and avoid the deprecation warning.\", \"2.12.7\")\n  def \u003c\u003c(x: Long): Int\n  /**\n  * Returns this value bit-shifted right by the specified number of bits,\n  *         filling the new left bits with zeroes.\n  * @example {{{ 21 \u003e\u003e\u003e 3 \u003d\u003d 2 // in binary: 010101 \u003e\u003e\u003e 3 \u003d\u003d 010 }}}\n  * @example {{{\n  * -21 \u003e\u003e\u003e 3 \u003d\u003d 536870909\n  * // in binary: 11111111 11111111 11111111 11101011 \u003e\u003e\u003e 3 \u003d\u003d\n  * //            00011111 11111111 11111111 11111101\n  * }}}\n  */\n  def \u003e\u003e\u003e(x: Int): Int\n  /**\n  * Returns this value bit-shifted right by the specified number of bits,\n  *         filling the new left bits with zeroes.\n  * @example {{{ 21 \u003e\u003e\u003e 3 \u003d\u003d 2 // in binary: 010101 \u003e\u003e\u003e 3 \u003d\u003d 010 }}}\n  * @example {{{\n  * -21 \u003e\u003e\u003e 3 \u003d\u003d 536870909\n  * // in binary: 11111111 11111111 11111111 11101011 \u003e\u003e\u003e 3 \u003d\u003d\n  * //            00011111 11111111 11111111 11111101\n  * }}}\n  */\n  @deprecated(\"shifting a value by a `Long` argument is deprecated (except when the value is a `Long`).\\nCall `toInt` on the argument to maintain the current behavior and avoid the deprecation warning.\", \"2.12.7\")\n  def \u003e\u003e\u003e(x: Long): Int\n  /**\n  * Returns this value bit-shifted right by the specified number of bits,\n  *         filling in the left bits with the same value as the left-most bit of this.\n  *         The effect of this is to retain the sign of the value.\n  * @example {{{\n  * -21 \u003e\u003e 3 \u003d\u003d -3\n  * // in binary: 11111111 11111111 11111111 11101011 \u003e\u003e 3 \u003d\u003d\n  * //            11111111 11111111 11111111 11111101\n  * }}}\n  */\n  def \u003e\u003e(x: Int): Int\n  /**\n  * Returns this value bit-shifted right by the specified number of bits,\n  *         filling in the left bits with the same value as the left-most bit of this.\n  *         The effect of this is to retain the sign of the value.\n  * @example {{{\n  * -21 \u003e\u003e 3 \u003d\u003d -3\n  * // in binary: 11111111 11111111 11111111 11101011 \u003e\u003e 3 \u003d\u003d\n  * //            11111111 11111111 11111111 11111101\n  * }}}\n  */\n  @deprecated(\"shifting a value by a `Long` argument is deprecated (except when the value is a `Long`).\\nCall `toInt` on the argument to maintain the current behavior and avoid the deprecation warning.\", \"2.12.7\")\n  def \u003e\u003e(x: Long): Int\n\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Byte): Boolean\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Short): Boolean\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Char): Boolean\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Int): Boolean\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Long): Boolean\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Float): Boolean\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Double): Boolean\n\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Byte): Boolean\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Short): Boolean\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Char): Boolean\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Int): Boolean\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Long): Boolean\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Float): Boolean\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Double): Boolean\n\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Byte): Boolean\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Short): Boolean\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Char): Boolean\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Int): Boolean\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Long): Boolean\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Float): Boolean\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Double): Boolean\n\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Byte): Boolean\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Short): Boolean\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Char): Boolean\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Int): Boolean\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Long): Boolean\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Float): Boolean\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Double): Boolean\n\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Byte): Boolean\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Short): Boolean\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Char): Boolean\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Int): Boolean\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Long): Boolean\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Float): Boolean\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Double): Boolean\n\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Byte): Boolean\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Short): Boolean\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Char): Boolean\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Int): Boolean\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Long): Boolean\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Float): Boolean\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Double): Boolean\n\n  /**\n  * Returns the bitwise OR of this value and `x`.\n  * @example {{{\n  * (0xf0 | 0xaa) \u003d\u003d 0xfa\n  * // in binary:   11110000\n  * //            | 10101010\n  * //              --------\n  * //              11111010\n  * }}}\n  */\n  def |(x: Byte): Int\n  /**\n  * Returns the bitwise OR of this value and `x`.\n  * @example {{{\n  * (0xf0 | 0xaa) \u003d\u003d 0xfa\n  * // in binary:   11110000\n  * //            | 10101010\n  * //              --------\n  * //              11111010\n  * }}}\n  */\n  def |(x: Short): Int\n  /**\n  * Returns the bitwise OR of this value and `x`.\n  * @example {{{\n  * (0xf0 | 0xaa) \u003d\u003d 0xfa\n  * // in binary:   11110000\n  * //            | 10101010\n  * //              --------\n  * //              11111010\n  * }}}\n  */\n  def |(x: Char): Int\n  /**\n  * Returns the bitwise OR of this value and `x`.\n  * @example {{{\n  * (0xf0 | 0xaa) \u003d\u003d 0xfa\n  * // in binary:   11110000\n  * //            | 10101010\n  * //              --------\n  * //              11111010\n  * }}}\n  */\n  def |(x: Int): Int\n  /**\n  * Returns the bitwise OR of this value and `x`.\n  * @example {{{\n  * (0xf0 | 0xaa) \u003d\u003d 0xfa\n  * // in binary:   11110000\n  * //            | 10101010\n  * //              --------\n  * //              11111010\n  * }}}\n  */\n  def |(x: Long): Long\n\n  /**\n  * Returns the bitwise AND of this value and `x`.\n  * @example {{{\n  * (0xf0 \u0026 0xaa) \u003d\u003d 0xa0\n  * // in binary:   11110000\n  * //            \u0026 10101010\n  * //              --------\n  * //              10100000\n  * }}}\n  */\n  def \u0026(x: Byte): Int\n  /**\n  * Returns the bitwise AND of this value and `x`.\n  * @example {{{\n  * (0xf0 \u0026 0xaa) \u003d\u003d 0xa0\n  * // in binary:   11110000\n  * //            \u0026 10101010\n  * //              --------\n  * //              10100000\n  * }}}\n  */\n  def \u0026(x: Short): Int\n  /**\n  * Returns the bitwise AND of this value and `x`.\n  * @example {{{\n  * (0xf0 \u0026 0xaa) \u003d\u003d 0xa0\n  * // in binary:   11110000\n  * //            \u0026 10101010\n  * //              --------\n  * //              10100000\n  * }}}\n  */\n  def \u0026(x: Char): Int\n  /**\n  * Returns the bitwise AND of this value and `x`.\n  * @example {{{\n  * (0xf0 \u0026 0xaa) \u003d\u003d 0xa0\n  * // in binary:   11110000\n  * //            \u0026 10101010\n  * //              --------\n  * //              10100000\n  * }}}\n  */\n  def \u0026(x: Int): Int\n  /**\n  * Returns the bitwise AND of this value and `x`.\n  * @example {{{\n  * (0xf0 \u0026 0xaa) \u003d\u003d 0xa0\n  * // in binary:   11110000\n  * //            \u0026 10101010\n  * //              --------\n  * //              10100000\n  * }}}\n  */\n  def \u0026(x: Long): Long\n\n  /**\n  * Returns the bitwise XOR of this value and `x`.\n  * @example {{{\n  * (0xf0 ^ 0xaa) \u003d\u003d 0x5a\n  * // in binary:   11110000\n  * //            ^ 10101010\n  * //              --------\n  * //              01011010\n  * }}}\n  */\n  def ^(x: Byte): Int\n  /**\n  * Returns the bitwise XOR of this value and `x`.\n  * @example {{{\n  * (0xf0 ^ 0xaa) \u003d\u003d 0x5a\n  * // in binary:   11110000\n  * //            ^ 10101010\n  * //              --------\n  * //              01011010\n  * }}}\n  */\n  def ^(x: Short): Int\n  /**\n  * Returns the bitwise XOR of this value and `x`.\n  * @example {{{\n  * (0xf0 ^ 0xaa) \u003d\u003d 0x5a\n  * // in binary:   11110000\n  * //            ^ 10101010\n  * //              --------\n  * //              01011010\n  * }}}\n  */\n  def ^(x: Char): Int\n  /**\n  * Returns the bitwise XOR of this value and `x`.\n  * @example {{{\n  * (0xf0 ^ 0xaa) \u003d\u003d 0x5a\n  * // in binary:   11110000\n  * //            ^ 10101010\n  * //              --------\n  * //              01011010\n  * }}}\n  */\n  def ^(x: Int): Int\n  /**\n  * Returns the bitwise XOR of this value and `x`.\n  * @example {{{\n  * (0xf0 ^ 0xaa) \u003d\u003d 0x5a\n  * // in binary:   11110000\n  * //            ^ 10101010\n  * //              --------\n  * //              01011010\n  * }}}\n  */\n  def ^(x: Long): Long\n\n  /** Returns the sum of this value and `x`. */\n  def +(x: Byte): Int\n  /** Returns the sum of this value and `x`. */\n  def +(x: Short): Int\n  /** Returns the sum of this value and `x`. */\n  def +(x: Char): Int\n  /** Returns the sum of this value and `x`. */\n  def +(x: Int): Int\n  /** Returns the sum of this value and `x`. */\n  def +(x: Long): Long\n  /** Returns the sum of this value and `x`. */\n  def +(x: Float): Float\n  /** Returns the sum of this value and `x`. */\n  def +(x: Double): Double\n\n  /** Returns the difference of this value and `x`. */\n  def -(x: Byte): Int\n  /** Returns the difference of this value and `x`. */\n  def -(x: Short): Int\n  /** Returns the difference of this value and `x`. */\n  def -(x: Char): Int\n  /** Returns the difference of this value and `x`. */\n  def -(x: Int): Int\n  /** Returns the difference of this value and `x`. */\n  def -(x: Long): Long\n  /** Returns the difference of this value and `x`. */\n  def -(x: Float): Float\n  /** Returns the difference of this value and `x`. */\n  def -(x: Double): Double\n\n  /** Returns the product of this value and `x`. */\n  def *(x: Byte): Int\n  /** Returns the product of this value and `x`. */\n  def *(x: Short): Int\n  /** Returns the product of this value and `x`. */\n  def *(x: Char): Int\n  /** Returns the product of this value and `x`. */\n  def *(x: Int): Int\n  /** Returns the product of this value and `x`. */\n  def *(x: Long): Long\n  /** Returns the product of this value and `x`. */\n  def *(x: Float): Float\n  /** Returns the product of this value and `x`. */\n  def *(x: Double): Double\n\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Byte): Int\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Short): Int\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Char): Int\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Int): Int\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Long): Long\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Float): Float\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Double): Double\n\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Byte): Int\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Short): Int\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Char): Int\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Int): Int\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Long): Long\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Float): Float\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Double): Double\n\n  // Provide a more specific return type for Scaladoc\n  override def getClass(): Class[Int] \u003d ???\n}\n\nobject Int extends AnyValCompanion {\n  /** The smallest value representable as an Int. */\n  final val MinValue \u003d java.lang.Integer.MIN_VALUE\n\n  /** The largest value representable as an Int. */\n  final val MaxValue \u003d java.lang.Integer.MAX_VALUE\n\n  /** Transform a value type into a boxed reference type.\n   *\n   *  Runtime implementation determined by `scala.runtime.BoxesRunTime.boxToInteger`. See [[https://github.com/scala/scala src/library/scala/runtime/BoxesRunTime.java]].\n   *\n   *  @param  x   the Int to be boxed\n   *  @return     a java.lang.Integer offering `x` as its underlying value.\n   */\n  def box(x: Int): java.lang.Integer \u003d ???\n\n  /** Transform a boxed type into a value type.  Note that this\n   *  method is not typesafe: it accepts any Object, but will throw\n   *  an exception if the argument is not a java.lang.Integer.\n   *\n   *  Runtime implementation determined by `scala.runtime.BoxesRunTime.unboxToInt`. See [[https://github.com/scala/scala src/library/scala/runtime/BoxesRunTime.java]].\n   *\n   *  @param  x   the java.lang.Integer to be unboxed.\n   *  @throws     ClassCastException  if the argument is not a java.lang.Integer\n   *  @return     the Int resulting from calling intValue() on `x`\n   */\n  def unbox(x: java.lang.Object): Int \u003d ???\n\n  /** The String representation of the scala.Int companion object. */\n  override def toString \u003d \"object scala.Int\"\n  /** Language mandated coercions from Int to \"wider\" types. */\n  import scala.language.implicitConversions\n  implicit def int2long(x: Int): Long \u003d x.toLong\n  implicit def int2float(x: Int): Float \u003d x.toFloat\n  implicit def int2double(x: Int): Double \u003d x.toDouble\n}\n\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Unit.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

2020.11.11 20:08:23 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:08:23 INFO  time: compiled task1-scala in 0.79s
2020.11.11 20:09:47 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:09:47 INFO  time: compiled task1-scala in 96ms
2020.11.11 20:10:01 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:10:01 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:10:01 INFO  time: compiled task1-scala in 0.63s
2020.11.11 20:10:14 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:10:14 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:10:14 INFO  time: compiled task1-scala in 0.65s
2020.11.11 20:10:23 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:10:23 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:10:23 INFO  time: compiled task1-scala in 0.65s
2020.11.11 20:11:57 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:11:57 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:11:57 INFO  time: compiled task1-scala in 0.63s
2020.11.11 20:12:06 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:12:06 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:12:06 INFO  time: compiled task1-scala in 0.6s
2020.11.11 20:12:31 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:12:31 WARN  1 deprecation (since 2.13.0)
2020.11.11 20:12:31 WARN  1 deprecation (since 2.13.3)
2020.11.11 20:12:31 WARN  2 deprecations in total; re-run with -deprecation for details
2020.11.11 20:12:31 INFO  time: compiled task1-scala in 0.62s
2020.11.11 20:12:33 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:12:33 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:12:33 INFO  time: compiled task1-scala in 0.63s
2020.11.11 20:13:07 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:13:07 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:13:07 INFO  time: compiled task1-scala in 0.67s
Nov 11, 2020 8:18:41 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1786
Nov 11, 2020 8:18:41 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1788
2020.11.11 20:21:07 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:21:07 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:21:07 INFO  time: compiled task1-scala in 0.68s
2020.11.11 20:21:16 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:21:16 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:21:16 INFO  time: compiled task1-scala in 0.63s
2020.11.11 20:21:36 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:21:36 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:21:36 INFO  time: compiled task1-scala in 0.74s
Nov 11, 2020 8:21:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Unit.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\n// DO NOT EDIT, CHANGES WILL BE LOST\n// This auto-generated code can be modified in \"project/GenerateAnyVals.scala\".\n// Afterwards, running \"sbt generateSources\" regenerates this source file.\n\npackage scala\n\n\n/** `Unit` is a subtype of [[scala.AnyVal]]. There is only one value of type\n *  `Unit`, `()`, and it is not represented by any object in the underlying\n *  runtime system. A method with return type `Unit` is analogous to a Java\n *  method which is declared `void`.\n */\nfinal abstract class Unit private extends AnyVal {\n  // Provide a more specific return type for Scaladoc\n  override def getClass(): Class[Unit] \u003d ???\n}\n\nobject Unit extends AnyValCompanion {\n\n  /** Transform a value type into a boxed reference type.\n   *\n   *  @param  x   the Unit to be boxed\n   *  @return     a scala.runtime.BoxedUnit offering `x` as its underlying value.\n   */\n  def box(x: Unit): scala.runtime.BoxedUnit \u003d scala.runtime.BoxedUnit.UNIT\n\n  /** Transform a boxed type into a value type.  Note that this\n   *  method is not typesafe: it accepts any Object, but will throw\n   *  an exception if the argument is not a scala.runtime.BoxedUnit.\n   *\n   *  @param  x   the scala.runtime.BoxedUnit to be unboxed.\n   *  @throws     ClassCastException  if the argument is not a scala.runtime.BoxedUnit\n   *  @return     the Unit value ()\n   */\n  def unbox(x: java.lang.Object): Unit \u003d x.asInstanceOf[scala.runtime.BoxedUnit]\n\n  /** The String representation of the scala.Unit companion object. */\n  override def toString \u003d \"object scala.Unit\"\n}\n\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Unit.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

2020.11.11 20:21:45 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:21:45 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:21:45 INFO  time: compiled task1-scala in 0.65s
2020.11.11 20:21:49 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:21:49 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:21:49 INFO  time: compiled task1-scala in 0.69s
2020.11.11 20:22:00 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:22:00 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:22:00 INFO  time: compiled task1-scala in 0.58s
2020.11.11 20:26:23 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:26:23 INFO  Deduplicating compilation of task1-scala from bsp client 'Metals 0.9.5' (since 36m 25.606s)
2020.11.11 20:26:23 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:26:23 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:26:23 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:26:23 INFO  time: compiled task1-scala in 0.72s
2020.11.11 20:28:18 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:28:18 INFO  time: compiled task1-scala in 0.11s
2020.11.11 20:28:34 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:28:34 INFO  time: compiled task1-scala in 0.11s
2020.11.11 20:28:37 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:28:37 INFO  time: compiled task1-scala in 0.1s
2020.11.11 20:28:47 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:28:47 INFO  time: compiled task1-scala in 0.11s
2020.11.11 20:29:00 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:29:00 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:29:00 INFO  time: compiled task1-scala in 0.69s
2020.11.11 20:29:09 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:29:09 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:29:09 INFO  time: compiled task1-scala in 0.65s
Nov 11, 2020 8:31:25 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Unit.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\n// DO NOT EDIT, CHANGES WILL BE LOST\n// This auto-generated code can be modified in \"project/GenerateAnyVals.scala\".\n// Afterwards, running \"sbt generateSources\" regenerates this source file.\n\npackage scala\n\n\n/** `Unit` is a subtype of [[scala.AnyVal]]. There is only one value of type\n *  `Unit`, `()`, and it is not represented by any object in the underlying\n *  runtime system. A method with return type `Unit` is analogous to a Java\n *  method which is declared `void`.\n */\nfinal abstract class Unit private extends AnyVal {\n  // Provide a more specific return type for Scaladoc\n  override def getClass(): Class[Unit] \u003d ???\n}\n\nobject Unit extends AnyValCompanion {\n\n  /** Transform a value type into a boxed reference type.\n   *\n   *  @param  x   the Unit to be boxed\n   *  @return     a scala.runtime.BoxedUnit offering `x` as its underlying value.\n   */\n  def box(x: Unit): scala.runtime.BoxedUnit \u003d scala.runtime.BoxedUnit.UNIT\n\n  /** Transform a boxed type into a value type.  Note that this\n   *  method is not typesafe: it accepts any Object, but will throw\n   *  an exception if the argument is not a scala.runtime.BoxedUnit.\n   *\n   *  @param  x   the scala.runtime.BoxedUnit to be unboxed.\n   *  @throws     ClassCastException  if the argument is not a scala.runtime.BoxedUnit\n   *  @return     the Unit value ()\n   */\n  def unbox(x: java.lang.Object): Unit \u003d x.asInstanceOf[scala.runtime.BoxedUnit]\n\n  /** The String representation of the scala.Unit companion object. */\n  override def toString \u003d \"object scala.Unit\"\n}\n\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Unit.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

Nov 11, 2020 8:31:30 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2215
2020.11.11 20:31:44 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:31:44 INFO  time: compiled task1-scala in 95ms
2020.11.11 20:31:46 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:31:46 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:31:46 INFO  time: compiled task1-scala in 0.61s
2020.11.11 20:31:56 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:31:56 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:31:56 INFO  time: compiled task1-scala in 0.61s
2020.11.11 20:32:02 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:32:02 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:32:02 INFO  time: compiled task1-scala in 0.66s
Nov 11, 2020 8:35:10 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Unit.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 16 more

Nov 11, 2020 8:35:12 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Unit.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 16 more

Nov 11, 2020 8:35:36 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 518,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "import java.util.concurrent.atomic.AtomicReference\r\nobject Task2 {\r\n\r\n    var counter: Int \u003d 0\r\n    \r\n    def main(args: Array[String]) \r\n    {\r\n        println(Threading(GenerateArray(10)).start())\r\n\r\n    }\r\n\r\n    def Threading(body: \u003d\u003eUnit): Thread \u003d \r\n    {\r\n        val t \u003d new Thread {override def run() \u003d body}\r\n        t\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n\r\n    def increaseCounter(): Unit \u003d {\r\n        counter +\u003d 1\r\n        val ref \u003d new AtomicReference(counter)\r\n    }\r\n\r\n    def threadTesting () : Unit \u003d\r\n    {\r\n        val thread1 \u003d new Thread {increaseCounter()}\r\n        val thread2 \u003d new Thread {increaseCounter()}\r\n        val thread3 \u003d new Thread {println(counter)}\r\n\r\n        thread1.start\r\n        thread2.start\r\n        thread3.start\r\n\r\n\r\n    }\r\n\r\n    def printCounter () : Int \u003d\r\n    {\r\n        counter\r\n    }\r\n\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Unit.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

Nov 11, 2020 8:35:36 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 519,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "import java.util.concurrent.atomic.AtomicReference\r\nobject Task2 {\r\n\r\n    var counter: Int \u003d 0\r\n    \r\n    def main(args: Array[String]) \r\n    {\r\n        println(Threading(GenerateArray(10)).start())\r\n\r\n    }\r\n\r\n    def Threading(body: \u003d\u003eUnit): Thread \u003d \r\n    {\r\n        val t \u003d new Thread {override def run() \u003d body}\r\n        t\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n\r\n    def increaseCounter(): Unit \u003d {\r\n        counter +\u003d 1\r\n        val ref \u003d new AtomicReference(counter)\r\n    }\r\n\r\n    def threadTesting () : Unit \u003d\r\n    {\r\n        val thread1 \u003d new Thread {increaseCounter()}\r\n        val thread2 \u003d new Thread {increaseCounter()}\r\n        val thread3 \u003d new Thread {println(counter)}\r\n\r\n        thread1.start\r\n        thread2.start\r\n        thread3.start\r\n\r\n\r\n    }\r\n\r\n    def printCounter () : Int \u003d\r\n    {\r\n        counter\r\n    }\r\n\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Unit.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

2020.11.11 20:35:36 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:35:36 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:35:36 INFO  time: compiled task1-scala in 0.67s
2020.11.11 20:35:42 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:35:42 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:35:42 INFO  time: compiled task1-scala in 0.63s
2020.11.11 20:36:25 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:36:25 INFO  Deduplicating compilation of task1-scala from bsp client 'Metals 0.9.5' (since 46m 27.274s)
2020.11.11 20:36:25 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:36:25 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:36:25 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:36:25 INFO  time: compiled task1-scala in 0.56s
2020.11.11 20:36:45 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:36:45 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:36:45 INFO  time: compiled task1-scala in 0.63s
2020.11.11 20:36:55 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:36:55 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:36:55 INFO  time: compiled task1-scala in 0.63s
Nov 11, 2020 8:37:15 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2527
2020.11.11 20:37:28 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:37:28 INFO  time: compiled task1-scala in 0.1s
Nov 11, 2020 8:37:38 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2600
2020.11.11 20:37:38 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:37:38 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:37:38 INFO  time: compiled task1-scala in 0.68s
2020.11.11 20:37:45 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:37:45 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:37:45 INFO  time: compiled task1-scala in 0.69s
something's wrong: no file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala in Array[String]RangePosition(file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala, 121, 121, 134)
2020.11.11 20:41:02 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:41:02 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:41:02 INFO  time: compiled task1-scala in 0.6s
2020.11.11 20:41:21 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:41:21 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:41:21 INFO  time: compiled task1-scala in 0.73s
2020.11.11 20:42:14 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:42:14 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:42:14 INFO  time: compiled task1-scala in 0.69s
2020.11.11 20:44:45 INFO  compiling task1-scala (1 scala source)
2020.11.11 20:44:45 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 20:44:45 INFO  time: compiled task1-scala in 0.66s
2020.11.11 21:25:51 INFO  compiling task1-scala (1 scala source)
2020.11.11 21:25:51 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 21:25:51 INFO  time: compiled task1-scala in 0.8s
2020.11.11 21:26:05 INFO  compiling task1-scala (1 scala source)
2020.11.11 21:26:05 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 21:26:05 INFO  time: compiled task1-scala in 0.76s
2020.11.11 21:26:12 INFO  compiling task1-scala (1 scala source)
2020.11.11 21:26:12 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 21:26:12 INFO  time: compiled task1-scala in 0.66s
2020.11.11 21:27:01 INFO  compiling task1-scala (1 scala source)
2020.11.11 21:27:01 WARN  2 deprecations (since 2.13.0); re-run with -deprecation for details
2020.11.11 21:27:01 INFO  time: compiled task1-scala in 0.68s
2020.11.11 21:27:09 INFO  compiling task1-scala (1 scala source)
2020.11.11 21:27:09 WARN  2 deprecations (since 2.13.0); re-run with -deprecation for details
2020.11.11 21:27:09 INFO  time: compiled task1-scala in 0.68s
2020.11.11 21:27:18 INFO  compiling task1-scala (1 scala source)
2020.11.11 21:27:18 WARN  2 deprecations (since 2.13.0); re-run with -deprecation for details
2020.11.11 21:27:18 INFO  time: compiled task1-scala in 0.7s
2020.11.11 21:29:05 INFO  compiling task1-scala (1 scala source)
2020.11.11 21:29:05 WARN  2 deprecations (since 2.13.0); re-run with -deprecation for details
2020.11.11 21:29:05 INFO  time: compiled task1-scala in 0.78s
2020.11.11 21:29:51 INFO  compiling task1-scala (1 scala source)
2020.11.11 21:29:51 INFO  time: compiled task1-scala in 0.16s
2020.11.11 21:32:27 INFO  compiling task1-scala (1 scala source)
2020.11.11 21:32:27 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 21:32:27 INFO  time: compiled task1-scala in 0.72s
2020.11.11 21:49:33 INFO  compiling task1-scala (1 scala source)
2020.11.11 21:49:33 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 21:49:33 INFO  time: compiled task1-scala in 0.74s
2020.11.11 21:49:50 INFO  compiling task1-scala (1 scala source)
2020.11.11 21:49:50 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 21:49:50 INFO  time: compiled task1-scala in 0.69s
2020.11.11 21:51:19 INFO  compiling task1-scala (1 scala source)
2020.11.11 21:51:19 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 21:51:19 INFO  time: compiled task1-scala in 0.8s
2020.11.11 21:51:26 INFO  compiling task1-scala (1 scala source)
2020.11.11 21:51:26 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 21:51:26 INFO  time: compiled task1-scala in 0.69s
2020.11.11 21:53:07 INFO  compiling task1-scala (1 scala source)
2020.11.11 21:53:07 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 21:53:07 INFO  time: compiled task1-scala in 0.76s
2020.11.11 21:55:07 INFO  compiling task1-scala (1 scala source)
2020.11.11 21:55:07 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 21:55:07 INFO  time: compiled task1-scala in 0.74s
Nov 11, 2020 9:55:21 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Unit.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\n// DO NOT EDIT, CHANGES WILL BE LOST\n// This auto-generated code can be modified in \"project/GenerateAnyVals.scala\".\n// Afterwards, running \"sbt generateSources\" regenerates this source file.\n\npackage scala\n\n\n/** `Unit` is a subtype of [[scala.AnyVal]]. There is only one value of type\n *  `Unit`, `()`, and it is not represented by any object in the underlying\n *  runtime system. A method with return type `Unit` is analogous to a Java\n *  method which is declared `void`.\n */\nfinal abstract class Unit private extends AnyVal {\n  // Provide a more specific return type for Scaladoc\n  override def getClass(): Class[Unit] \u003d ???\n}\n\nobject Unit extends AnyValCompanion {\n\n  /** Transform a value type into a boxed reference type.\n   *\n   *  @param  x   the Unit to be boxed\n   *  @return     a scala.runtime.BoxedUnit offering `x` as its underlying value.\n   */\n  def box(x: Unit): scala.runtime.BoxedUnit \u003d scala.runtime.BoxedUnit.UNIT\n\n  /** Transform a boxed type into a value type.  Note that this\n   *  method is not typesafe: it accepts any Object, but will throw\n   *  an exception if the argument is not a scala.runtime.BoxedUnit.\n   *\n   *  @param  x   the scala.runtime.BoxedUnit to be unboxed.\n   *  @throws     ClassCastException  if the argument is not a scala.runtime.BoxedUnit\n   *  @return     the Unit value ()\n   */\n  def unbox(x: java.lang.Object): Unit \u003d x.asInstanceOf[scala.runtime.BoxedUnit]\n\n  /** The String representation of the scala.Unit companion object. */\n  override def toString \u003d \"object scala.Unit\"\n}\n\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

Nov 11, 2020 9:55:21 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Unit.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\n// DO NOT EDIT, CHANGES WILL BE LOST\n// This auto-generated code can be modified in \"project/GenerateAnyVals.scala\".\n// Afterwards, running \"sbt generateSources\" regenerates this source file.\n\npackage scala\n\n\n/** `Unit` is a subtype of [[scala.AnyVal]]. There is only one value of type\n *  `Unit`, `()`, and it is not represented by any object in the underlying\n *  runtime system. A method with return type `Unit` is analogous to a Java\n *  method which is declared `void`.\n */\nfinal abstract class Unit private extends AnyVal {\n  // Provide a more specific return type for Scaladoc\n  override def getClass(): Class[Unit] \u003d ???\n}\n\nobject Unit extends AnyValCompanion {\n\n  /** Transform a value type into a boxed reference type.\n   *\n   *  @param  x   the Unit to be boxed\n   *  @return     a scala.runtime.BoxedUnit offering `x` as its underlying value.\n   */\n  def box(x: Unit): scala.runtime.BoxedUnit \u003d scala.runtime.BoxedUnit.UNIT\n\n  /** Transform a boxed type into a value type.  Note that this\n   *  method is not typesafe: it accepts any Object, but will throw\n   *  an exception if the argument is not a scala.runtime.BoxedUnit.\n   *\n   *  @param  x   the scala.runtime.BoxedUnit to be unboxed.\n   *  @throws     ClassCastException  if the argument is not a scala.runtime.BoxedUnit\n   *  @return     the Unit value ()\n   */\n  def unbox(x: java.lang.Object): Unit \u003d x.asInstanceOf[scala.runtime.BoxedUnit]\n\n  /** The String representation of the scala.Unit companion object. */\n  override def toString \u003d \"object scala.Unit\"\n}\n\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

2020.11.11 21:55:22 INFO  compiling task1-scala (1 scala source)
Nov 11, 2020 9:55:22 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */\n\n// DO NOT EDIT, CHANGES WILL BE LOST\n// This auto-generated code can be modified in \"project/GenerateAnyVals.scala\".\n// Afterwards, running \"sbt generateSources\" regenerates this source file.\n\npackage scala\n\n/** `Int`, a 32-bit signed integer (equivalent to Java\u0027s `int` primitive type) is a\n *  subtype of [[scala.AnyVal]]. Instances of `Int` are not\n *  represented by an object in the underlying runtime system.\n *\n *  There is an implicit conversion from [[scala.Int]] \u003d\u003e [[scala.runtime.RichInt]]\n *  which provides useful non-primitive operations.\n */\nfinal abstract class Int private extends AnyVal {\n  def toByte: Byte\n  def toShort: Short\n  def toChar: Char\n  def toInt: Int\n  def toLong: Long\n  def toFloat: Float\n  def toDouble: Double\n\n  /**\n * Returns the bitwise negation of this value.\n * @example {{{\n * ~5 \u003d\u003d -6\n * // in binary: ~00000101 \u003d\u003d\n * //             11111010\n * }}}\n */\n  def unary_~ : Int\n  /** Returns this value, unmodified. */\n  def unary_+ : Int\n  /** Returns the negation of this value. */\n  def unary_- : Int\n\n  def +(x: String): String\n\n  /**\n  * Returns this value bit-shifted left by the specified number of bits,\n  *         filling in the new right bits with zeroes.\n  * @example {{{ 6 \u003c\u003c 3 \u003d\u003d 48 // in binary: 0110 \u003c\u003c 3 \u003d\u003d 0110000 }}}\n  */\n  def \u003c\u003c(x: Int): Int\n  /**\n  * Returns this value bit-shifted left by the specified number of bits,\n  *         filling in the new right bits with zeroes.\n  * @example {{{ 6 \u003c\u003c 3 \u003d\u003d 48 // in binary: 0110 \u003c\u003c 3 \u003d\u003d 0110000 }}}\n  */\n  @deprecated(\"shifting a value by a `Long` argument is deprecated (except when the value is a `Long`).\\nCall `toInt` on the argument to maintain the current behavior and avoid the deprecation warning.\", \"2.12.7\")\n  def \u003c\u003c(x: Long): Int\n  /**\n  * Returns this value bit-shifted right by the specified number of bits,\n  *         filling the new left bits with zeroes.\n  * @example {{{ 21 \u003e\u003e\u003e 3 \u003d\u003d 2 // in binary: 010101 \u003e\u003e\u003e 3 \u003d\u003d 010 }}}\n  * @example {{{\n  * -21 \u003e\u003e\u003e 3 \u003d\u003d 536870909\n  * // in binary: 11111111 11111111 11111111 11101011 \u003e\u003e\u003e 3 \u003d\u003d\n  * //            00011111 11111111 11111111 11111101\n  * }}}\n  */\n  def \u003e\u003e\u003e(x: Int): Int\n  /**\n  * Returns this value bit-shifted right by the specified number of bits,\n  *         filling the new left bits with zeroes.\n  * @example {{{ 21 \u003e\u003e\u003e 3 \u003d\u003d 2 // in binary: 010101 \u003e\u003e\u003e 3 \u003d\u003d 010 }}}\n  * @example {{{\n  * -21 \u003e\u003e\u003e 3 \u003d\u003d 536870909\n  * // in binary: 11111111 11111111 11111111 11101011 \u003e\u003e\u003e 3 \u003d\u003d\n  * //            00011111 11111111 11111111 11111101\n  * }}}\n  */\n  @deprecated(\"shifting a value by a `Long` argument is deprecated (except when the value is a `Long`).\\nCall `toInt` on the argument to maintain the current behavior and avoid the deprecation warning.\", \"2.12.7\")\n  def \u003e\u003e\u003e(x: Long): Int\n  /**\n  * Returns this value bit-shifted right by the specified number of bits,\n  *         filling in the left bits with the same value as the left-most bit of this.\n  *         The effect of this is to retain the sign of the value.\n  * @example {{{\n  * -21 \u003e\u003e 3 \u003d\u003d -3\n  * // in binary: 11111111 11111111 11111111 11101011 \u003e\u003e 3 \u003d\u003d\n  * //            11111111 11111111 11111111 11111101\n  * }}}\n  */\n  def \u003e\u003e(x: Int): Int\n  /**\n  * Returns this value bit-shifted right by the specified number of bits,\n  *         filling in the left bits with the same value as the left-most bit of this.\n  *         The effect of this is to retain the sign of the value.\n  * @example {{{\n  * -21 \u003e\u003e 3 \u003d\u003d -3\n  * // in binary: 11111111 11111111 11111111 11101011 \u003e\u003e 3 \u003d\u003d\n  * //            11111111 11111111 11111111 11111101\n  * }}}\n  */\n  @deprecated(\"shifting a value by a `Long` argument is deprecated (except when the value is a `Long`).\\nCall `toInt` on the argument to maintain the current behavior and avoid the deprecation warning.\", \"2.12.7\")\n  def \u003e\u003e(x: Long): Int\n\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Byte): Boolean\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Short): Boolean\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Char): Boolean\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Int): Boolean\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Long): Boolean\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Float): Boolean\n  /** Returns `true` if this value is equal to x, `false` otherwise. */\n  def \u003d\u003d(x: Double): Boolean\n\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Byte): Boolean\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Short): Boolean\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Char): Boolean\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Int): Boolean\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Long): Boolean\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Float): Boolean\n  /** Returns `true` if this value is not equal to x, `false` otherwise. */\n  def !\u003d(x: Double): Boolean\n\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Byte): Boolean\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Short): Boolean\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Char): Boolean\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Int): Boolean\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Long): Boolean\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Float): Boolean\n  /** Returns `true` if this value is less than x, `false` otherwise. */\n  def \u003c(x: Double): Boolean\n\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Byte): Boolean\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Short): Boolean\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Char): Boolean\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Int): Boolean\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Long): Boolean\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Float): Boolean\n  /** Returns `true` if this value is less than or equal to x, `false` otherwise. */\n  def \u003c\u003d(x: Double): Boolean\n\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Byte): Boolean\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Short): Boolean\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Char): Boolean\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Int): Boolean\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Long): Boolean\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Float): Boolean\n  /** Returns `true` if this value is greater than x, `false` otherwise. */\n  def \u003e(x: Double): Boolean\n\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Byte): Boolean\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Short): Boolean\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Char): Boolean\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Int): Boolean\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Long): Boolean\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Float): Boolean\n  /** Returns `true` if this value is greater than or equal to x, `false` otherwise. */\n  def \u003e\u003d(x: Double): Boolean\n\n  /**\n  * Returns the bitwise OR of this value and `x`.\n  * @example {{{\n  * (0xf0 | 0xaa) \u003d\u003d 0xfa\n  * // in binary:   11110000\n  * //            | 10101010\n  * //              --------\n  * //              11111010\n  * }}}\n  */\n  def |(x: Byte): Int\n  /**\n  * Returns the bitwise OR of this value and `x`.\n  * @example {{{\n  * (0xf0 | 0xaa) \u003d\u003d 0xfa\n  * // in binary:   11110000\n  * //            | 10101010\n  * //              --------\n  * //              11111010\n  * }}}\n  */\n  def |(x: Short): Int\n  /**\n  * Returns the bitwise OR of this value and `x`.\n  * @example {{{\n  * (0xf0 | 0xaa) \u003d\u003d 0xfa\n  * // in binary:   11110000\n  * //            | 10101010\n  * //              --------\n  * //              11111010\n  * }}}\n  */\n  def |(x: Char): Int\n  /**\n  * Returns the bitwise OR of this value and `x`.\n  * @example {{{\n  * (0xf0 | 0xaa) \u003d\u003d 0xfa\n  * // in binary:   11110000\n  * //            | 10101010\n  * //              --------\n  * //              11111010\n  * }}}\n  */\n  def |(x: Int): Int\n  /**\n  * Returns the bitwise OR of this value and `x`.\n  * @example {{{\n  * (0xf0 | 0xaa) \u003d\u003d 0xfa\n  * // in binary:   11110000\n  * //            | 10101010\n  * //              --------\n  * //              11111010\n  * }}}\n  */\n  def |(x: Long): Long\n\n  /**\n  * Returns the bitwise AND of this value and `x`.\n  * @example {{{\n  * (0xf0 \u0026 0xaa) \u003d\u003d 0xa0\n  * // in binary:   11110000\n  * //            \u0026 10101010\n  * //              --------\n  * //              10100000\n  * }}}\n  */\n  def \u0026(x: Byte): Int\n  /**\n  * Returns the bitwise AND of this value and `x`.\n  * @example {{{\n  * (0xf0 \u0026 0xaa) \u003d\u003d 0xa0\n  * // in binary:   11110000\n  * //            \u0026 10101010\n  * //              --------\n  * //              10100000\n  * }}}\n  */\n  def \u0026(x: Short): Int\n  /**\n  * Returns the bitwise AND of this value and `x`.\n  * @example {{{\n  * (0xf0 \u0026 0xaa) \u003d\u003d 0xa0\n  * // in binary:   11110000\n  * //            \u0026 10101010\n  * //              --------\n  * //              10100000\n  * }}}\n  */\n  def \u0026(x: Char): Int\n  /**\n  * Returns the bitwise AND of this value and `x`.\n  * @example {{{\n  * (0xf0 \u0026 0xaa) \u003d\u003d 0xa0\n  * // in binary:   11110000\n  * //            \u0026 10101010\n  * //              --------\n  * //              10100000\n  * }}}\n  */\n  def \u0026(x: Int): Int\n  /**\n  * Returns the bitwise AND of this value and `x`.\n  * @example {{{\n  * (0xf0 \u0026 0xaa) \u003d\u003d 0xa0\n  * // in binary:   11110000\n  * //            \u0026 10101010\n  * //              --------\n  * //              10100000\n  * }}}\n  */\n  def \u0026(x: Long): Long\n\n  /**\n  * Returns the bitwise XOR of this value and `x`.\n  * @example {{{\n  * (0xf0 ^ 0xaa) \u003d\u003d 0x5a\n  * // in binary:   11110000\n  * //            ^ 10101010\n  * //              --------\n  * //              01011010\n  * }}}\n  */\n  def ^(x: Byte): Int\n  /**\n  * Returns the bitwise XOR of this value and `x`.\n  * @example {{{\n  * (0xf0 ^ 0xaa) \u003d\u003d 0x5a\n  * // in binary:   11110000\n  * //            ^ 10101010\n  * //              --------\n  * //              01011010\n  * }}}\n  */\n  def ^(x: Short): Int\n  /**\n  * Returns the bitwise XOR of this value and `x`.\n  * @example {{{\n  * (0xf0 ^ 0xaa) \u003d\u003d 0x5a\n  * // in binary:   11110000\n  * //            ^ 10101010\n  * //              --------\n  * //              01011010\n  * }}}\n  */\n  def ^(x: Char): Int\n  /**\n  * Returns the bitwise XOR of this value and `x`.\n  * @example {{{\n  * (0xf0 ^ 0xaa) \u003d\u003d 0x5a\n  * // in binary:   11110000\n  * //            ^ 10101010\n  * //              --------\n  * //              01011010\n  * }}}\n  */\n  def ^(x: Int): Int\n  /**\n  * Returns the bitwise XOR of this value and `x`.\n  * @example {{{\n  * (0xf0 ^ 0xaa) \u003d\u003d 0x5a\n  * // in binary:   11110000\n  * //            ^ 10101010\n  * //              --------\n  * //              01011010\n  * }}}\n  */\n  def ^(x: Long): Long\n\n  /** Returns the sum of this value and `x`. */\n  def +(x: Byte): Int\n  /** Returns the sum of this value and `x`. */\n  def +(x: Short): Int\n  /** Returns the sum of this value and `x`. */\n  def +(x: Char): Int\n  /** Returns the sum of this value and `x`. */\n  def +(x: Int): Int\n  /** Returns the sum of this value and `x`. */\n  def +(x: Long): Long\n  /** Returns the sum of this value and `x`. */\n  def +(x: Float): Float\n  /** Returns the sum of this value and `x`. */\n  def +(x: Double): Double\n\n  /** Returns the difference of this value and `x`. */\n  def -(x: Byte): Int\n  /** Returns the difference of this value and `x`. */\n  def -(x: Short): Int\n  /** Returns the difference of this value and `x`. */\n  def -(x: Char): Int\n  /** Returns the difference of this value and `x`. */\n  def -(x: Int): Int\n  /** Returns the difference of this value and `x`. */\n  def -(x: Long): Long\n  /** Returns the difference of this value and `x`. */\n  def -(x: Float): Float\n  /** Returns the difference of this value and `x`. */\n  def -(x: Double): Double\n\n  /** Returns the product of this value and `x`. */\n  def *(x: Byte): Int\n  /** Returns the product of this value and `x`. */\n  def *(x: Short): Int\n  /** Returns the product of this value and `x`. */\n  def *(x: Char): Int\n  /** Returns the product of this value and `x`. */\n  def *(x: Int): Int\n  /** Returns the product of this value and `x`. */\n  def *(x: Long): Long\n  /** Returns the product of this value and `x`. */\n  def *(x: Float): Float\n  /** Returns the product of this value and `x`. */\n  def *(x: Double): Double\n\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Byte): Int\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Short): Int\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Char): Int\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Int): Int\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Long): Long\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Float): Float\n  /** Returns the quotient of this value and `x`. */\n  def /(x: Double): Double\n\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Byte): Int\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Short): Int\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Char): Int\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Int): Int\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Long): Long\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Float): Float\n  /** Returns the remainder of the division of this value by `x`. */\n  def %(x: Double): Double\n\n  // Provide a more specific return type for Scaladoc\n  override def getClass(): Class[Int] \u003d ???\n}\n\nobject Int extends AnyValCompanion {\n  /** The smallest value representable as an Int. */\n  final val MinValue \u003d java.lang.Integer.MIN_VALUE\n\n  /** The largest value representable as an Int. */\n  final val MaxValue \u003d java.lang.Integer.MAX_VALUE\n\n  /** Transform a value type into a boxed reference type.\n   *\n   *  Runtime implementation determined by `scala.runtime.BoxesRunTime.boxToInteger`. See [[https://github.com/scala/scala src/library/scala/runtime/BoxesRunTime.java]].\n   *\n   *  @param  x   the Int to be boxed\n   *  @return     a java.lang.Integer offering `x` as its underlying value.\n   */\n  def box(x: Int): java.lang.Integer \u003d ???\n\n  /** Transform a boxed type into a value type.  Note that this\n   *  method is not typesafe: it accepts any Object, but will throw\n   *  an exception if the argument is not a java.lang.Integer.\n   *\n   *  Runtime implementation determined by `scala.runtime.BoxesRunTime.unboxToInt`. See [[https://github.com/scala/scala src/library/scala/runtime/BoxesRunTime.java]].\n   *\n   *  @param  x   the java.lang.Integer to be unboxed.\n   *  @throws     ClassCastException  if the argument is not a java.lang.Integer\n   *  @return     the Int resulting from calling intValue() on `x`\n   */\n  def unbox(x: java.lang.Object): Int \u003d ???\n\n  /** The String representation of the scala.Int companion object. */\n  override def toString \u003d \"object scala.Int\"\n  /** Language mandated coercions from Int to \"wider\" types. */\n  import scala.language.implicitConversions\n  implicit def int2long(x: Int): Long \u003d x.toLong\n  implicit def int2float(x: Int): Float \u003d x.toFloat\n  implicit def int2double(x: Int): Double \u003d x.toDouble\n}\n\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:882)
	... 16 more

2020.11.11 21:55:22 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 21:55:22 INFO  time: compiled task1-scala in 0.71s
Nov 11, 2020 9:55:29 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task1.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 16 more

Nov 11, 2020 9:55:31 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didFocus(MetalsLanguageServer.scala:932)
	... 16 more

Nov 11, 2020 9:55:32 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 812,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "import java.util.concurrent.atomic.AtomicReference\r\nobject Task2 {\r\n\r\n    var counter: Int \u003d 0\r\n    \r\n    def main(args: Array[String]) \r\n    {\r\n        val thread \u003d Threading(GenerateArray(10))\r\n        println(thread.start()mkString(\" \"))\r\n\r\n    }\r\n\r\n    def Threading(body: \u003d\u003eUnit): Thread \u003d \r\n    {\r\n        val t \u003d new Thread {override def run() \u003d body}\r\n        t\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n\r\n    def increaseCounter(): Unit \u003d {\r\n        counter +\u003d 1\r\n        val ref \u003d new AtomicReference(counter)\r\n    }\r\n\r\n    def threadTesting () : Unit \u003d\r\n    {\r\n        val thread1 \u003d new Thread {increaseCounter()}\r\n        val thread2 \u003d new Thread {increaseCounter()}\r\n        val thread3 \u003d new Thread {println(counter)}\r\n\r\n        thread1.start\r\n        thread2.start\r\n        thread3.start\r\n\r\n\r\n    }\r\n\r\n    def printCounter () : Int \u003d\r\n    {\r\n        counter\r\n    }\r\n\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

2020.11.11 21:55:32 INFO  compiling task1-scala (1 scala source)
2020.11.11 21:55:32 INFO  time: compiled task1-scala in 0.13s
Nov 11, 2020 9:55:42 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 813,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "import java.util.concurrent.atomic.AtomicReference\r\nobject Task2 {\r\n\r\n    var counter: Int \u003d 0\r\n    \r\n    def main(args: Array[String]) \r\n    {\r\n        val thread \u003d Threading(GenerateArray(10))\r\n        println(thread.start().)\r\n\r\n    }\r\n\r\n    def Threading(body: \u003d\u003eUnit): Thread \u003d \r\n    {\r\n        val t \u003d new Thread {override def run() \u003d body}\r\n        t\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n\r\n    def increaseCounter(): Unit \u003d {\r\n        counter +\u003d 1\r\n        val ref \u003d new AtomicReference(counter)\r\n    }\r\n\r\n    def threadTesting () : Unit \u003d\r\n    {\r\n        val thread1 \u003d new Thread {increaseCounter()}\r\n        val thread2 \u003d new Thread {increaseCounter()}\r\n        val thread3 \u003d new Thread {println(counter)}\r\n\r\n        thread1.start\r\n        thread2.start\r\n        thread3.start\r\n\r\n\r\n    }\r\n\r\n    def printCounter () : Int \u003d\r\n    {\r\n        counter\r\n    }\r\n\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

Nov 11, 2020 9:55:42 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 814,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "import java.util.concurrent.atomic.AtomicReference\r\nobject Task2 {\r\n\r\n    var counter: Int \u003d 0\r\n    \r\n    def main(args: Array[String]) \r\n    {\r\n        val thread \u003d Threading(GenerateArray(10))\r\n        println(thread.start().t)\r\n\r\n    }\r\n\r\n    def Threading(body: \u003d\u003eUnit): Thread \u003d \r\n    {\r\n        val t \u003d new Thread {override def run() \u003d body}\r\n        t\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n\r\n    def increaseCounter(): Unit \u003d {\r\n        counter +\u003d 1\r\n        val ref \u003d new AtomicReference(counter)\r\n    }\r\n\r\n    def threadTesting () : Unit \u003d\r\n    {\r\n        val thread1 \u003d new Thread {increaseCounter()}\r\n        val thread2 \u003d new Thread {increaseCounter()}\r\n        val thread3 \u003d new Thread {println(counter)}\r\n\r\n        thread1.start\r\n        thread2.start\r\n        thread3.start\r\n\r\n\r\n    }\r\n\r\n    def printCounter () : Int \u003d\r\n    {\r\n        counter\r\n    }\r\n\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

Nov 11, 2020 9:55:42 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 815,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "import java.util.concurrent.atomic.AtomicReference\r\nobject Task2 {\r\n\r\n    var counter: Int \u003d 0\r\n    \r\n    def main(args: Array[String]) \r\n    {\r\n        val thread \u003d Threading(GenerateArray(10))\r\n        println(thread.start().to)\r\n\r\n    }\r\n\r\n    def Threading(body: \u003d\u003eUnit): Thread \u003d \r\n    {\r\n        val t \u003d new Thread {override def run() \u003d body}\r\n        t\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n\r\n    def increaseCounter(): Unit \u003d {\r\n        counter +\u003d 1\r\n        val ref \u003d new AtomicReference(counter)\r\n    }\r\n\r\n    def threadTesting () : Unit \u003d\r\n    {\r\n        val thread1 \u003d new Thread {increaseCounter()}\r\n        val thread2 \u003d new Thread {increaseCounter()}\r\n        val thread3 \u003d new Thread {println(counter)}\r\n\r\n        thread1.start\r\n        thread2.start\r\n        thread3.start\r\n\r\n\r\n    }\r\n\r\n    def printCounter () : Int \u003d\r\n    {\r\n        counter\r\n    }\r\n\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

Nov 11, 2020 9:55:42 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 816,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "import java.util.concurrent.atomic.AtomicReference\r\nobject Task2 {\r\n\r\n    var counter: Int \u003d 0\r\n    \r\n    def main(args: Array[String]) \r\n    {\r\n        val thread \u003d Threading(GenerateArray(10))\r\n        println(thread.start().toS)\r\n\r\n    }\r\n\r\n    def Threading(body: \u003d\u003eUnit): Thread \u003d \r\n    {\r\n        val t \u003d new Thread {override def run() \u003d body}\r\n        t\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n\r\n    def increaseCounter(): Unit \u003d {\r\n        counter +\u003d 1\r\n        val ref \u003d new AtomicReference(counter)\r\n    }\r\n\r\n    def threadTesting () : Unit \u003d\r\n    {\r\n        val thread1 \u003d new Thread {increaseCounter()}\r\n        val thread2 \u003d new Thread {increaseCounter()}\r\n        val thread3 \u003d new Thread {println(counter)}\r\n\r\n        thread1.start\r\n        thread2.start\r\n        thread3.start\r\n\r\n\r\n    }\r\n\r\n    def printCounter () : Int \u003d\r\n    {\r\n        counter\r\n    }\r\n\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

Nov 11, 2020 9:55:43 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 817,
      "uri": "file:///c%3A/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/src/main/scala/task2.scala"
    },
    "contentChanges": [
      {
        "text": "import java.util.concurrent.atomic.AtomicReference\r\nobject Task2 {\r\n\r\n    var counter: Int \u003d 0\r\n    \r\n    def main(args: Array[String]) \r\n    {\r\n        val thread \u003d Threading(GenerateArray(10))\r\n        println(thread.start().toString())\r\n\r\n    }\r\n\r\n    def Threading(body: \u003d\u003eUnit): Thread \u003d \r\n    {\r\n        val t \u003d new Thread {override def run() \u003d body}\r\n        t\r\n    }\r\n\r\n    def GenerateArray (number : Int) : Array[Int] \u003d\r\n    {\r\n        val arr \u003d Array.ofDim[Int](number)\r\n        for (i \u003c- 1 to number) arr(i-1) \u003d i\r\n        arr\r\n    }\r\n\r\n    def increaseCounter(): Unit \u003d {\r\n        counter +\u003d 1\r\n        val ref \u003d new AtomicReference(counter)\r\n    }\r\n\r\n    def threadTesting () : Unit \u003d\r\n    {\r\n        val thread1 \u003d new Thread {increaseCounter()}\r\n        val thread2 \u003d new Thread {increaseCounter()}\r\n        val thread3 \u003d new Thread {println(counter)}\r\n\r\n        thread1.start\r\n        thread2.start\r\n        thread3.start\r\n\r\n\r\n    }\r\n\r\n    def printCounter () : Int \u003d\r\n    {\r\n        counter\r\n    }\r\n\r\n}"
      }
    ]
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 4: file:///C:/Users/aleks/Desktop/ProgLang/scala/tasks/task1.scala/.metals/readonly/scala/Int.scala
	at sun.nio.fs.WindowsPathParser.normalize(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPathParser.parse(Unknown Source)
	at sun.nio.fs.WindowsPath.parse(Unknown Source)
	at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source)
	at sun.nio.fs.AbstractPath.resolve(Unknown Source)
	at scala.meta.io.AbsolutePath.resolve(AbsolutePath.scala:43)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.currentDocument(SyntheticsDecorationProvider.scala:233)
	at scala.meta.internal.decorations.SyntheticsDecorationProvider.publishSynthetics(SyntheticsDecorationProvider.scala:66)
	at scala.meta.internal.metals.MetalsLanguageServer.didChange(MetalsLanguageServer.scala:984)
	... 15 more

2020.11.11 21:55:43 INFO  compiling task1-scala (1 scala source)
2020.11.11 21:55:43 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 21:55:43 INFO  time: compiled task1-scala in 0.71s
2020.11.11 21:56:10 INFO  compiling task1-scala (1 scala source)
2020.11.11 21:56:10 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 21:56:10 INFO  time: compiled task1-scala in 0.7s
2020.11.11 21:56:14 INFO  compiling task1-scala (1 scala source)
2020.11.11 21:56:14 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 21:56:14 INFO  time: compiled task1-scala in 0.74s
2020.11.11 22:01:08 INFO  compiling task1-scala (1 scala source)
2020.11.11 22:01:08 INFO  time: compiled task1-scala in 0.1s
2020.11.11 22:01:17 INFO  compiling task1-scala (1 scala source)
2020.11.11 22:01:17 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 22:01:17 INFO  time: compiled task1-scala in 0.65s
2020.11.11 22:13:44 INFO  compiling task1-scala (1 scala source)
2020.11.11 22:13:44 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 22:13:44 INFO  time: compiled task1-scala in 0.65s
2020.11.11 22:14:21 INFO  compiling task1-scala (1 scala source)
2020.11.11 22:14:21 INFO  time: compiled task1-scala in 54ms
2020.11.11 22:14:27 INFO  compiling task1-scala (1 scala source)
2020.11.11 22:14:27 INFO  time: compiled task1-scala in 59ms
2020.11.11 22:15:00 INFO  compiling task1-scala (1 scala source)
2020.11.11 22:15:00 INFO  time: compiled task1-scala in 58ms
2020.11.11 22:15:13 INFO  compiling task1-scala (1 scala source)
2020.11.11 22:15:13 INFO  time: compiled task1-scala in 54ms
2020.11.11 22:16:23 INFO  compiling task1-scala (1 scala source)
2020.11.11 22:16:23 INFO  time: compiled task1-scala in 51ms
2020.11.11 22:16:40 INFO  compiling task1-scala (1 scala source)
2020.11.11 22:16:40 INFO  time: compiled task1-scala in 0.15s
2020.11.11 22:16:59 INFO  compiling task1-scala (1 scala source)
2020.11.11 22:16:59 INFO  time: compiled task1-scala in 0.13s
2020.11.11 22:19:20 INFO  compiling task1-scala (1 scala source)
2020.11.11 22:19:20 INFO  time: compiled task1-scala in 0.12s
2020.11.11 22:19:27 INFO  compiling task1-scala (1 scala source)
2020.11.11 22:19:27 INFO  time: compiled task1-scala in 0.12s
2020.11.11 22:19:36 INFO  compiling task1-scala (1 scala source)
2020.11.11 22:19:36 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 22:19:36 INFO  time: compiled task1-scala in 0.73s
2020.11.11 22:28:12 INFO  compiling task1-scala (1 scala source)
2020.11.11 22:28:12 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 22:28:12 INFO  time: compiled task1-scala in 0.7s
2020.11.11 22:28:24 INFO  compiling task1-scala (1 scala source)
2020.11.11 22:28:24 INFO  time: compiled task1-scala in 0.11s
2020.11.11 22:28:33 INFO  compiling task1-scala (1 scala source)
2020.11.11 22:28:33 INFO  time: compiled task1-scala in 0.1s
2020.11.11 22:28:48 INFO  compiling task1-scala (1 scala source)
2020.11.11 22:28:48 INFO  time: compiled task1-scala in 0.11s
Nov 11, 2020 10:29:00 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4362
2020.11.11 22:29:00 INFO  compiling task1-scala (1 scala source)
2020.11.11 22:29:00 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 22:29:00 INFO  time: compiled task1-scala in 0.69s
2020.11.11 22:31:14 INFO  compiling task1-scala (1 scala source)
2020.11.11 22:31:14 WARN  1 deprecation (since 2.13.0); re-run with -deprecation for details
2020.11.11 22:31:14 INFO  time: compiled task1-scala in 0.73s
